***********************************************************************
*                                                                     *
* Name:         COBANAL                                               *
*                                                                     *
* Author:       Roland Schiradin                                      *
*               roland(at)Schiradin.de                                *
*                                                                     *
* Date:         February 1996                                         *
*                                                                     *
* Description:  Show compile-settings and some other information      *
*                                                                     *
* Changes:      16.12.1996 (european)                                 *
*               Support for VS/COBOL1 (just a few)                    *
*               String macro no longer inside this source             *
*               (request FILE183 from Naspa or drop me an email)      *
*               28.04.1997 (european)                                 *
*               Support for COBOL for MVS and VM Release 2 (formally  *
*               called AD/Cycle COBOL/370)                            *
*               04.03.1998 (european)                                 *
*               MODID-marco dropped                                   *
*               Direct Load-Library support                           *
*               Some parts of Dave Alcocks code (DA$COBR)             *
*               (You can contact him at dalcock(at)csw.com)           *
*               24.03.1998 (european)                                 *
*               Prevent S15D abend you invoke COBANAL from TSO-CALL   *
*               (reported by Dave Alcock)                             *
*               Support for newer STRING macro STRING GENERATE instead*
*               of STRING FINAL_CALL                                  *
*               (reported by Dave Alcock)                             *
*               Fixed a bug in statement list. Y now means Yes and not*
*               vice versa. Sorry                                     *
*               15.02.1999 (european)                                 *
*               Support for COBOL OS/390 and VM V2R1                  *
*               Some new Compile-options                              *
*               Compile-Date is European style, added long name       *
*               Some minor fixes I cant remember in detail            *
*               Support for MVS 4.3 (AMODE switching)                 *
*               10.06.1999 (european)                                 *
*               Fixed bugs reported by Mr. Smets (Thank you)          *
*               Show ?? as the century for COBOL2                     *
*               Support for Entrypoints (e.g. ENTRY 'DLITCBL')        *
*               Note: There is no need to do this for IMS             *
*               25.10.1999 (european)                                 *
*               Check ParmLength for Parameter "ALL".                 *
*               Close all datasets                                    *
*               Make CobAnal reentrant (LinkList!!!)                  *
*               Release storage                                       *
*               Load modules from DD COBANAL if exist                 *
*               29.12.1999 (european)                                 *
*               Abend 0C4 fixed                                       *
*               Add PPA2 support                                      *
*               Detect C/C++ and LE-enabled Assembler Programs        *
*               The product name for COBOL1 is OS/VS Cobol (MVS) and  *
*               DOS/VS COBOL (VSE)                                    *
*               13.04.2000 (european)                                 *
*               Support for some infos I missed (INVOKE, GLOBAL and   *
*               so on) Thank you Mr. Gross                            *
*               Add a third base register                             *
*               23.04.2000 (european)                                 *
*               Tested with STRING V507 from FILE183                  *
*               19.07.2000 (european)                                 *
*               Support for COBOL1 OEM products (e.g. CA-Optimzer)    *
*               Thank you Mr. Pfeifer                                 *
*               02.10.2000 (european)                                 *
*               Support for COBOL for OS/390 & VM V2R2                *
*               New TEST(SEPARATE)/NO TEST(SEPARATE)                  *
*               New ARITH(EXTEND)/ARITH(COMPAT)                       *
*               New line-sequential file                              *
*               Thank you IBM for HFS-Support and Display under CICS  *
*               Save some literal pool                                *
*               I know I need to re-design the program but the        *
*               time (you may know) is limited. At the start it       *
*               was intend to run once and then throw it away         *
*               Thanks for all ideas to do it better, if I'm retired  *
*               I would spent some time on it. Don't expect that      *
*               within the next 25 years !!!                          *
*               09.10.1999 (european)                                 *
*               End-Substract changed to End-Subtract                 *
*               Corect a length for moving literal Subtract           *
*               08.01.2001 (european)                                 *
*               Loop bug fixed                                        *
*               04.12.2001 (european)                                 *
*               Fixed bug reporting CLOSE Y/N                         *
*               Support for Cobol Enterprise V3R1                     *
*               Support for generic member names                      *
*                 You can use ? or * in the member name to minimize   *
*                 output instead of ALL or a single load member       *
*                 '?' stand for any single character                  *
*                 '*' stand for any character                         *
*                 Be aware this feature require SYS1.MODGEN(ASAXWC)   *
*                 introduced with MVS 5.2                             *
*               ** Attention ****                                     *
*                  CobAnal require MVS 5.2                            *
*               ** Attention ****                                     *
*               ASAXWC is not GUPI but I raised a requirement         *
*               If you think ASAXWC might be useful for you too,      *
*               please open a requirement                             *
*               12.02.2002 (european)                                 *
*               Support for IMS programs with an Entry Point DLITCBL  *
*               I still believe such an entry point is not needed     *
*               but it seems it's in use. However David Sumner        *
*               made the needed changes and I merged it to the        *
*               current source so it will be a part of CobAnal        *
*               Special thank you to David Sumner                     *
*               14.04.2002 (european)                                 *
*               CobanalZ require now Architecure Level 1 this means   *
*               it has the same requirement as OS/390 R10. If your    *
*               hardware doesn't support OS/390 R10 you can not use   *
*               CobAnalZ you have to use the old version called       *
*               CobAnal. New features will be added to CobAnalZ       *
*               but bug-fixes also for CobAnal.                       *
*               No base register needed (base-less)                   *
*               Support RMODE(ANY)                                    *
*               Prepared for z/OS R3 with AMODE(64)                   *
*               01.11.2002 (european)                                 *
*               Support for Cobol Enterprise V3R2                     *
*               Avoid LARL instruction                                *
*               17.01.2003 (european)                                 *
*               CMPR2 is not supported for Enterprise Cobol           *
*               29.01.2004 (european)                                 *
*               Merged code from Mike Giaquinto to prevent a S0C4     *
*               if the entry point is close to the end of the load    *
*               12.03.2004 (european)                                 *
*               Support for Cobol Enterprise V3R3                     *
*               Support for IEWBIND to display binder info (basic)    *
*               Display CICS Precompiler version                      *
*               Display CICS STUB version                             *
*               Display CICS EXCI version                             *
*               Changed the RC handling                               *
*               17.05.2004 (european)                                 *
*               Support for MOD level 1. Indicator DB2 V8 SQL is      *
*               supported by V3R2 and V3R3 (PQ83744)                  *
*               Detect PLI, DCE, Sockets programs                     *
*               08.07.2004 (european)                                 *
*               Support for DLL with multiple extents, but            *
*               CobAnal just analyze the first extent. In the past    *
*               it could abend with a S0C4                            *
*               (reported by Adam Hojniak)                            *
*               21.07.2004 (european)                                 *
*               Spelling problem (End-Multiply)                       *
*               20.01.2005 (european)                                 *
*               AbendS80A                                             *
*               Release storage in case of Binder RC <> 0             *
*               (reported by Didier Lamare)                           *
*               14.03.2005 (european)                                 *
*               Support for new C and C++ layout                      *
*               07.07.2005 (european)                                 *
*               Support for Cobol Enterprise V3R4                     *
*               FDUMP not for Cobol/370 (Enterprise Cobol)            *
*               Minor fixes                                           *
*              *V1.1  - April 2006: S.Stocker modified for CSC    *CSC*
*               - NOTE: All changes developed&run on OS/390 V2.10 *CSC*
*               - Add SUMMARY DD to provide a single-line summary *CSC*
*                 module by module highlighting the key info such *CSC*
*                 as Langauge and Compiler and then info relating *CSC*
*                 to 31-bit exploitation and Reentrancy. Invoked  *CSC*
*                 by PARM=SUMMARY so you lose wildcard function!  *CSC*
*               - Added identification of BMS Maps.               *CSC*
*               - COBOL2 versus COBOL3 CICS Translate option      *CSC*
*               - Identify Languages translated by CICS           *CSC*
*               - Tally of modules by language.                   *CSC*
*               - No support for COBOL CICS integrated translator *CSC*
*               - All changes (hopefully) are marked *CSC*        *CSC*
*              *V1.2  - April 2006:                               *CSC*
*               - Fix S0C4: loss of addressability to COBOL1 TGT  *CSC*
*               - Fix S0C4: on very small modules. Now enforce    *CSC*
*                 no analysis for modules < 32 bytes. Messages    *CSC*
*                 are issued in both reports.                     *CSC*
*               - Remove need for PARM='SUMMARY' to produce the   *CSC*
*                 SUMMARY report. This means all the wildcard     *CSC*
*                 searching is now available again. Yeah!         *CSC*
*               - Add specific messages for modules marked as     *CSC*
*                 NX (Not Executable).                            *CSC*
*               - Ensure at least module name and *INVALID is     *CSC*
*                 written to SUMMARY RPT for unloadable modules.  *CSC*
*               - Change sub-headings from ======= to -------     *CSC*
*                 improve ease of locating start of next module.  *CSC*
*              *V1.2a - April 2006: Fix z/OS V1.4 TIOT problem    *CSC*
*              *V1.2b - Rework Mr Schiradin's latest fixes:       *CSC*
*               06.02.2006 (european)                                 *
*               New PL/1 looks like new C/C++                         *
*              *V1.30 - October 2007 R.Schiradin                 RS1007
*               - Release-ID is now dynamic                      RS1007
*               - RUSE changed to REUS (like the binder)         RS1007
*               - Some info lines are to short                   RS1007
*               - End-Multiply literal was to short              RS1007
*               - Tested with Cobol Enterprise V3R4M1            RS1007
*               - Reformat the compile options                   RS1007
*               - Provide more BINDER info                       RS1007
*               - Debugcode for IEWBIND (add DDNAME              RS1007
*                 BINDEROU DD SYSOUT=* to activate)              RS1007
*               - get the real TGT but of no use so far          RS1007
*               - Support for long names listed as $PRIVnnnnnn   RS1007
*               - Support for new C/C++ and new PL1 formats      RS1007
*               - Display Binder info for NON-COBOL              RS1007
*               - Support for large include names                RS1007
*               - Report TGT usage via R9 or R13 (Peter Haus)    RS1107
*               - Report working storage size                    RS1107
*               - Report FCB for Cobol/370 and COBOL/ENT (P.Haus)RS1107
*               - C/370 now C/C++                                RS1107
*               - PK54632 for some missing END-XXXX (FIN APAR)   RS1107
*               - Minor fixes (John P. Kalinich)                 RS1107
* ------->      - z/Architecture required                        RS1107
*               - Use STRING64 instead of STRING                 RS1107
*               - Report CEEUOPT/#pragma/PLXOPT if present       RS1107
*               - Yearwindow for COBOL/2                         JK1107
*               - Report FCB for COBOL/2                         RS1107
*               - Cobol-submodul-infos (lmod only)               HP1107
*               - cobol-submodul-infos (main=asm  )              RS1107
*               - Update CSCCOMP only for main                   RS1107
*               - program-objects : associated CSV_OUTXTLST_ELPx HP1107
*                 search a second extent for CEEUOPT             HP1107
*               - Fixed S0C4                                     RS1107
*               - Show only changed CEEUOPTs                     RS1107
*              *V1.40 - December 2007 R.Schiradin                RS1207
*               - Fixed S0C4 (John Kalinich)                     RS1207
*               - First version to identify FORTRAN (J. Kalinich)RS1207
*               - Report "RENT REUS" wrong (John Kalinich)       RS1207
*               - Report AMODE64 (John Kalinich)                 RS1207
*               - CICS-Eyecatcher case sensitive (report wrong   RS1207
*                 COBOL3 option) since CTS 3.1                   RS1207
*               - Support for member list via SYSIN              RS1207
*               - Support for Enterprise Cobol V4.1              RS1207
*               - Cosmetical change FCB-Header (John Kalinich)   RS1207
*               - Wrong Compiler Version in the summary report   RS0108
*                 (John Kalinich)                                RS1207
*               - Omit analyze of includes (add DDNAME           RS0108
*                 MAINONLY DD DUMMY to activate)                 RS0108
*                 (Engelbert Smets)                              RS0108
*               - Fixed S0C4 (Ludwig Hartmann)                   RS0108
*                 EP2 is not always the correct entry point.     RS0108
*              *V1.41 - June 2008 R.Schiradin                    RS0608
*               - Fixed S0C4 (Werner Tomek)                      RS0608
*                 Missing parm cause abend                       RS0608
*               - Fix bug from using IEW_SECTION+2 in calls to   PF0608
*                 STRING64 macro.  Set up separate _LEN and      PF0608
*                 _DATA names so length is computed correctly    PF0608
*               - Increase available STATIC_AREA by moving all   PF0608
*                 initializing static DCB/DCBE's to separate     PF0608
*                 CSECT's                                        PF0608
*               - Introduce new DCB/DCBE named LOADL with        PF0608
*                 DSORG=PO for LOAD from COBANAL so that the     PF0608
*                 COBANAL DD can be concatenated (multiple DSN's)PF0608
*               - Add reset for indentation in all cases, so     PF0608
*                 that load-module-level information is not      PF0608
*                 incorrectly indented                           PF0608
*               - Add comments for each IEWBUFF area describing  PF0608
*                 what kind of data is returned in each one      PF0608
*               - Avoid msg IEW2134S from IEWBIND FUNC=ENDD when PF0608
*                 FUNC=STARTD failed for any reason              PF0608
*               - Avoid IEWBIND FUNC=DELETEW when FUNC=CREATEW   PF0608
*                 failed for any reason                          PF0608
*               - Avoid DELETE when PGMNAME_GET is XL8'FF' or    PF0608
*                 the LOAD failed for any reason                 PF0608
*               - Try to open SUMMARY file even if no COBANAL    PF0608
*                 is present so all scanned members will be      PF0608
*                 summarized                                     PF0608
*               - Issue CLOSE for SYSIN (avoid SC03 abend at EOJ)PF0608
*               - Do not subtract one from count of names so     PF0608
*                 that all names are processed                   PF0608
*               - From SD/ED entries in ESD section try to       PF0608
*                 provide AMODE/RMODE info and from IDRL section PF0608
*                 try to provide compiler/language/compile-date  PF0608
*                 info for load modules that are "UNKNOWN" after PF0608
*                 scans of load module text                      PF0608
*               - From ED/LD entries in ESD section try to       PF0608
*                 provide actual entry point name in CSCLPRM     PF0608
*                 field in SUMMARY line for load modules that    PF0608
*                 are "UNKNOWN" after scans of load module text  PF0608
*               - Save the Binder date and (if present) main     PF0608
*                 CSECT compile date for placement into the      PF0608
*                 SUMMARY line in case no date is found based on PF0608
*                 the object text                                PF0608
*               - Recover from IEWBIND FUNC=INCLUDE when RC=8    PF0608
*                 and RSNCODE=X'83000514' by re-trying INCLUDE   PF0608
*                 from DD COBANAL and member name (INTYPE=NAME)  PF0608
*                 using new DSORG=PO DCB/DCBE LOADL (see above)  PF0608
*               - Adjust a few messages for spelling and/or for  PF0608
*                 grammar                                        PF0608
*               - Add language indicators to PID table and also  PF0608
*                 sort by language, then use language indicators PF0608
*                 to adjust language counters for main EP's only PF0608
*               - Also made the PID Table an external member for PF0608
*                 easier modifications and sorting of entries    PF0608
*               - Fix AMODE bug for SUMMARY line in LE_370 code  PF0608
*                 for modules that start out "UNKNOWN"           PF0608
*               - Fix RENT  bug for SUMMARY line in LE_370 code  PF0608
*                 for modules that start out "UNKNOWN"           PF0608
*               - Add detection for compiled EZTrieve+ programs  PF0708
*                 and display EZTrieve+ version and compile date PF0708
*               - Fix error in BINDER_INFO_32 code so an actual  PF0708
*                 FORTRAN IDL entry is not ignored when found    PF0708
*              *V1.42 - September 2008 R.Schiradin               RS0908
*               - Minor fix in the display                       RS0908
*               - COBANAL was not RENT. Invocation from          RS0908
*                 LINKLIST gets S0C4 or using SETPROG REFRPROT   RS0908
*                 cause abend S0C4. I missed to use the List and RS0908
*                 Execute form of Macro Load.                    RS0908
*               - Correct setting of DCBE in the DCB             RS0908
*               - Abend0C4 for EZtrieve programs                 RS1208
*               - Case sensitive coding                          RS1208
*               - Count Unknown as other was wrong               RS1208
*              *V1.43 - February 2009 R.Schiradin                RS0209
*               - Allow comments in the SYSIN                    RS0209
*                 - May 2009 Craig Schneiderwent                 =CMS=
*               - Added JUSTDATA DD for those who wish to        =CMS=
*                 perform post-processing on the results         =CMS=
*                 - June 2009 Kirk Poschman                      KP0609
*               - Not fully rent                                 KP0609
*               - Alignment                                      KP0609
*              *V1.44 - February 2009 R.Schiradin                RS0712
*               - CMPR2 report missing for Cobol/2               RS0209
*              *V1.45 - January 2015  R.Schiradin                RS0115
*               - New PID for Enterprise Cobol V4 and V5         RS0115
*               - Basic support for Ent. Cobol V4 and V5         RS0115
*              *V1.46 - July 2015 R.Schiradin                    RS0615
*               - Fixed issue reported and almost fixed by       RS0615
*               Steve Stocker                                    RS0615
*              *V1.47 - October 2015 R.Schiradin                 RS1015
*               - Full support for Enterprise Cobol V5.1+V5.2    RS1015
*              *V1.50 - January 2016  E.Simonsen                 ES0116
*               - use whole words in report for                  ES0116
*               - options and procedure                          ES0116
*               New PID for Enterprise Cobol V6                  RS0316
*               Abend 0C4 fixed when load contains included      RS0316
*               Enterprise Cobol V5 sub routines                 RS0316
*               Use the binder info for invalid programs too     RS0316
*               Display RMODE in the SUMMARY                     RS0316
*              *V1.51 - May 2016 Roland Schiradin                RS0516
*               - Support for Enterprise Cobol V6.1              RS0516
*               - NOTEST(DWARF) was wrong                        RS0516
*               - Binder RMODE is now working using BLDL         RS0516
*               - RC4 instead of RC12 for PGM not found by SYSIN RS0516
*               - XMLPARSE option was wrong                      RS0616
*              *V1.52 - Dec 2016 Roland Schiradin                RS1216
*               - Fix abend S0C4                                 RS1216
*               - Fix abend S206-0C clear load parms             RS1216
         MACRO
&NAME   #STATUS &BYTE,&BIT,&MSG
         AIF   ('&BYTE'(1,3) EQ 'CVT' AND NOT D'&BIT).MEND
&NAME    TM    &BYTE,&BIT              check flag
         BRASL R14,$$STATUS            check CC, move, bump ptr
&N       SETA  K'&MSG-3
         DC    AL1(&N),C&MSG,0H'0'     Length,text,alignment
.MEND    MEND
&REL     SETC 'V1.52'                  Release number            RS0316
***********************************************************************
         TITLE 'CobAnal &REL Cobol-Analyser and a bit more'      RS1007
COBANAL  CSECT
COBANAL  AMODE 31
COBANAL  RMODE ANY
         SYSSTATE ARCHLVL=1
         COPY  IEABRC
         BAKR  R14,R0             Save register
         BRAS  R6,*+8                                            RS1102
         DC    A(STATIC_AREA)                                    RS1102
         L     R6,0(R6,0)                                        RS1102
         USING STATIC_AREA,R6     Addressebility                 RS1102
         L     R9,0(R1)           Save Parmlist
         USING COBANAL_PARM,R9    addressebility
         LAY   R0,COBANAL_WORK_LENGTH                            RS1206
         STORAGE OBTAIN,LENGTH=(R0),ADDR=(R1),COND=NO,LOC=BELOW
         LR    R11,R1             COBANAL_WORK register
         USING COBANAL_WORK,R11   addressebility
         MVC   EYECATCHER,=CL8'COBANAL'
         MVC   PGMNAME,BLANKS     clear PGMNAME                  RS0608
         MVC   PGMNAME_GET,BLANKS  clear PGMNANE GETMEM          RS0608
*        Getmain area for IEWBIND
         L     R0,BNLI_BUFFER_LENG
         STORAGE OBTAIN,LENGTH=(R0),ADDR=(R1),COND=NO,LOC=31
         ST    R1,IEW_BNLI_PTR
         L     R0,IDLI_BUFFER_LENG                               RS1007
         STORAGE OBTAIN,LENGTH=(R0),ADDR=(R1),COND=NO,LOC=31     RS1007
         ST    R1,IEW_IDLI_PTR                                   RS1007
         L     R0,ESDI_BUFFER_LENG                               RS1007
         STORAGE OBTAIN,LENGTH=(R0),ADDR=(R1),COND=NO,LOC=31     RS1007
         ST    R1,IEW_ESDI_PTR                                   RS1007
         L     R0,IDUI_BUFFER_LENG                               RS1007
         STORAGE OBTAIN,LENGTH=(R0),ADDR=(R1),COND=NO,LOC=31     RS1007
         ST    R1,IEW_IDUI_PTR                                   RS1007
         L     R0,IDZI_BUFFER_LENG                               RS1007
         STORAGE OBTAIN,LENGTH=(R0),ADDR=(R1),COND=NO,LOC=31     RS1007
         ST    R1,IEW_IDZI_PTR                                   RS1007
         L     R0,IDBI_BUFFER_LENG                               RS1007
         STORAGE OBTAIN,LENGTH=(R0),ADDR=(R1),COND=NO,LOC=31     RS1007
         ST    R1,IEW_IDBI_PTR                                   RS1007
         MVI   CSCSUMM,X'40'              Insert a blank          *CSC*
         MVC   CSCSUMM+1(L'CSCSUMM-1),CSCSUMM Repeat to clear     *CSC*
         ZAP   CNT_ASSEMBLER,=P'0'       Clear Assembler counter  *CSC*
         ZAP   CNT_BMS,=P'0'             Clear BMS       counter  *CSC*
         ZAP   CNT_COBOLI,=P'0'          Clear OS/VS/COB counter  *CSC*
         ZAP   CNT_COBOL2,=P'0'          Clear VS/COB2   counter  *CSC*
         ZAP   CNT_COBOLLE,=P'0'         Clear LE COBOL  counter  *CSC*
         ZAP   CNT_C370,=P'0'            Clear C/C++     counter  *CSC*
         ZAP   CNT_FORTRAN,=P'0'         Clear FORTRAN   counter  *CSC*
         ZAP   CNT_INVALID,=P'0'         Clear Invalid   counter  *CSC*
         ZAP   CNT_LEASS,=P'0'           Clear LE Assem  counter  *CSC*
         ZAP   CNT_OTHER,=P'0'           Clear Other     counter  *CSC*
         ZAP   CNT_PLI,=P'0'             Clear PLI       counter  *CSC*
         ZAP   CNT_TOTAL,=P'0'           Clear TOTAL     counter  *CSC*
         ZAP   CNT_UNKNOWN,=P'0'         Clear UNKNOWN   counter  *CSC*
         ZAP   CNT_NOTLOAD,=P'0'         Clear Notloaded counter PF0608
         ZAP   CNT_EZTRV,=P'0'           Clear EZTrieve+ counter PF0708
         MVI   JUSTDATA_R,C'N'           Default                  =CMS=
         MVI   SUMMARYR,C'N'             Default                  *CSC*
         MVI   LEFOUND,C'N'              Default                  *CSC*
         MVI   DOALL,C'N'                Default
         MVI   DD_COBANAL,C'N'           Default
         MVI   LOADERR,C'N'              Default                 PF0608
         MVI   FIXEDSUM,C'N'             Default                 PF0608
         MVI   SETRMODE,C'N'             Default                 RS0316
         MVC   SUM_DATE_SAVE,BLANKS      Default                 PF0608
         MVC   JUST_SPACE,BLANKS         Default
         XC    SAVEAREA,SAVEAREA         clear SaveArea
         LA    R13,SAVEAREA              get address of SaveArea
         MVC   4(4,R13),=C'F1SA'         indicate Linkage Stack 72bytes
         ST    R11,ADR_COBANAL_WORK      save address
         ST    R9,ADR_COBANAL_PARM       save address
*------------------------------------------------------------*
*        Check JCL-Parm                                      *
*------------------------------------------------------------*
         MVC   PARM_LENGTH,COBANAL_PARM_LENGTH
         LH    R10,PARM_LENGTH                                   RS0608
         LTR   R10,R10                                           RS0608
         JZ    COBANAL_020                                       RS0608
COBANAL_005 DS  0H                 do until first ',' or end
         LA    R9,2(R9)            jump length field
*        MVC   PGMNAME,BLANKS      clear PGMNANE                 RS0608
*        MVC   PGMNAME_GET,BLANKS  clear PGMNANE GETMEM          RS0608
         LA    R8,PGMNAME          first parm
COBANAL_010 DS  0H                 do until first ',' or end
         CLI   0(R9),C','          parm separator
         JE    COBANAL_020         next parm
         MVC   0(1,R8),0(R9)
         LA    R8,1(R8)            next digit
         LA    R9,1(R9)            next digit
         BRCT  R10,COBANAL_010     loop
COBANAL_020 DS  0H
         L     R15,=V(FIXSYSPR)                                  PF0608
         MVC   SYSPRINT(SYSPRINT_FIX_LENGTH),0(R15)              PF0608
         MVC   PARMLIST(C_LSTOL),C_LSTO
         LA    R9,SYSPRINT
         USING IHADCB,R9
         MVC   DCBDDNAM,=C'SYSPRINT'
         OPEN  ((R9),OUTPUT),MF=(E,PARMLIST),MODE=31
         DROP  R9
         LTR   R15,R15                   OPEN worked?             *CSC*
         JZ    COBANAL_020A              Yep, continue            *CSC*
*                                                                 *CSC*
         MVC   RETCODE,=F'16'            Set bad return code      *CSC*
         J     COBANAL_FIN_A             Lets get out of here     *CSC*
*                                                                 *CSC*
COBANAL_020A DS  0H                                               *CSC*
         DEVTYPE =CL8'COBANAL',DOUBLE     Get COBANAL information
         LTR   R15,R15                    Is it allocated?
         JNZ   TIOT110                    No, continue           PF0608
* Go check SUMMARY file anyway even if no COBANAL, because it    PF0608
* could be SYSIN input and STEPLIB load modules needing SUMMARY  PF0608
* -------------------------------------------------------------- PF0608
         MVI   DD_COBANAL,C'Y'    Default
         L     R15,=V(FIXINPUT)                                  PF0608
         MVC   INPUT(INPUT_FIX_LENGTH),0(R15)                    PF0608
         MVC   PARMLIST(C_LSTIL),C_LSTI
         LA    R9,INPUT
         USING IHADCB,R9
         MVC   DCBDDNAM,=C'COBANAL '
         OPEN  ((R9),INPUT),MF=(E,PARMLIST),MODE=31
         DROP  R9
*                                                                 *CSC*
         L     R15,=V(FIXLOADL)                                  PF0608
         MVC   LOADL(LOADL_FIX_LENGTH),0(R15)                    PF0608
         MVC   PARMLIST(C_LSTIL),C_LSTI                          PF0608
         LA    R9,LOADL                                          PF0608
         USING IHADCB,R9                                         PF0608
         MVC   DCBDDNAM,=C'COBANAL '                             PF0608
         LA    R0,LOADLE                Point DCB copy to        RS0516
         ST    R0,DCBDCBE               DCBE copy                RS0516
         OPEN  ((R9),INPUT),MF=(E,PARMLIST),MODE=31              PF0608
         DROP  R9                                                PF0608
*                                                                PF0608
*-----------------------------------------------------------------*CSC*
*  LOCATE A COBANAL DD CARD IF ONE SUPPLIED                      RS1007
*-----------------------------------------------------------------*CSC*
TIOT000  DS    0H                                                 *CSC*
         MVI   CSCDSN,X'40'                   First Space         *CSC*
         MVC   CSCDSN+1(L'CSCDSN-1),CSCDSN    Repeat to clear     *CSC*
         L     R3,PSATOLD-PSA                   CURRENT TCB       *CSC*
         L     R3,TCBTIO-TCB(R3)                TIOT              *CSC*
         LA    R3,TIOENTRY-TIOT(R3)           DDNAME ENTRIES      *CSC*
         USING TIOENTRY,R3                                        *CSC*
         SR    R4,R4                          CLEAR REGISTER      *CSC*
TIOT100  DS    0H                                                 *CSC*
         CLI   TIOELNGH,X'00'                 END OF TIOT DDNAMES?*CSC*
         JE    TIOT110                        YES,CONTINUE IF TSO *CSC*
         CLC   TIOEDDNM,=CL8'COBANAL'         NO, COBANAL DDNAME? *CSC*
         JNE   TIOT105                        NO, KEEP LOOKING    *CSC*
*                                                                 *CSC*
TIOTZOS  DS    0H                                                 *CSC*
         LA    R2,SWAWORK+4                   WORK AREA           *CSC*
         ST    R2,SWAWORK                     WORK AREA           *CSC*
         USING ZB505,R2                                           *CSC*
         XC    SWAEPAX,SWAEPAX                CLEAR WORK AREA     *CSC*
         MVC   SWVA,TIOEJFCB                  SVA OF THE JFCB     *CSC*
         SWAREQ FCODE=RL,EPA=SWAWORK,MF=(E,SWAREQL1),UNAUTH=YES   *CSC*
         L     R2,SWBLKPTR                    31'ADDRESS OF JFCB  *CSC*
         DROP  R2                                                 *CSC*
         USING INFMJFCB,R2                    Addressability      *CSC*
*                                                                 *CSC*
TIOTDSN  DS    0H                                                 *CSC*
         MVC   CSCDSN(44),JFCBDSNM            GET DATASET NAME    *CSC*
         J     SUMMARY_OPEN                                       *CSC*
*                                                                 *CSC*
TIOT105  DS    0H                                                 *CSC*
         IC    R4,TIOELNGH                    TIOT ENTRY LENGTH   *CSC*
         LA    R3,0(R4,R3)                    POINT AT NEXT TIOT  *CSC*
         J     TIOT100                        EXAMINE NEXT ENTRY  *CSC*
         DROP  R2                                                 *CSC*
         DROP  R3                                                 *CSC*
*                                                                 *CSC*
TIOT110  DS    0H                                                 *CSC*
         MVC   CSCDSN(44),=CL9'*UNKNOWN*' DATASET NAME unknown    *CSC*
*                                                                 *CSC*
SUMMARY_OPEN DS  0H                                               *CSC*
         DEVTYPE =CL8'SUMMARY',DOUBLE     Get COBANAL information *CSC*
         LTR   R15,R15                    Is it allocated?        *CSC*
         JNZ   JUSTDATA_OPEN              No, continue            =CMS=
*                                                                 *CSC*
         L     R15,=V(FIXSUMMA)                                  PF0608
         MVC   SUMMARY(SUMMARY_FIX_LENGTH),0(R15)                PF0608
         MVC   PARMLIST(C_LSTOL),C_LSTO                           *CSC*
         LA    R9,SUMMARY                                         *CSC*
         USING IHADCB,R9                                          *CSC*
         MVC   DCBDDNAM,=C'SUMMARY '                              *CSC*
         OPEN  ((R9),OUTPUT),MF=(E,PARMLIST),MODE=31              *CSC*
         DROP  R9                                                 *CSC*
         LTR   R15,R15                   OPEN worked?             *CSC*
         JZ    SUMMARY_HEADING           Yep, continue            *CSC*
*                                                                 *CSC*
         STRING64 'Error OPENing SUMMARY DD. RC=',((R15),,X),     *CSC*X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SPACE1                Print starting message   *CSC*
         MVC   RETCODE,=F'8'             Set bad return code      *CSC*
         J     COBANAL_021               But continue.            *CSC*
*                                                                 *CSC*
SUMMARY_HEADING DS  0H                                            *CSC*
         MVI   SUMMARYR,C'Y'              Yep, a SUMMARY REPORT   *CSC*
         STRING64 'COBANAL &REL - SUMMARY Report. ',                   X
               ' Dataset=',CSCDSN,INTO=RECORD                     *CSC*
         BRAS  R14,SUMMARY1               Print starting message  *CSC*
         STRING64 '                ',                             *CSC*X
               'PARM=',PGMNAME,INTO=RECORD                        *CSC*
         BRAS  R14,SUMMARY2               Print starting message  *CSC*
         STRING64 '                    ',                         *CSC*X
               '|Translate|',                                     *CSC*X
               '|--C o m p i l e r  ',                            *CSC*X
               'R e l a t e d--| ',                               *CSC*X
               '|--L K E D   O p t i o n s--|',                   *CSC*X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SUMMARY1               Print starting message  *CSC*
         STRING64 'Program   ',                                   *CSC*X
               'Language  ',                                      *CSC*X
               'CICS ',                                           *CSC*X
               'COBOL  ',                                         *CSC*X
               'Compiler          ',                              *CSC*X
               'LE  ',                                            *CSC*X
               'DATA ',                                           *CSC*X
               'RM  ',                                            *CSC*X
               'RENT ',                                           *CSC*X
               'RM  ',                                            *CSC*X
               'AM  ',                                            *CSC*X
               'LKED ATTRIBUTES           ',                      *CSC*X
               'COMPDATE    ',                                    *CSC*X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SUMMARY1               Print starting message  *CSC*
         STRING64 '--------- ',                                   *CSC*X
               '--------- ',                                      *CSC*X
               '---- ',                                           *CSC*X
               '------ ',                                         *CSC*X
               '----------------- ',                              *CSC*X
               '--- ',                                            *CSC*X
               '---- ',                                           *CSC*X
               '--- ',                                            *CSC*X
               '---- ',                                           *CSC*X
               '--- ',                                            *CSC*X
               '--- ',                                            *CSC*X
               '------------------------- ',                      *CSC*X
               '----------- ',                                    *CSC*X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SUMMARY2               Print starting message  *CSC*
*                                                                 *CSC*
JUSTDATA_OPEN DS  0H                                              =CMS=
         DEVTYPE =CL8'JUSTDATA',DOUBLE   Get JUSTDATA information =CMS=
         LTR   R15,R15                    Is it allocated?        =CMS=
         JNZ   COBANAL_021                No, continue            =CMS=
*                                                                 =CMS=
         L     R15,=V(FIXJUSTD)                                   =CMS=
         MVC   JUSTDATA(JUSTDATA_FIX_LENGTH),0(R15)               =CMS=
         MVC   PARMLIST(C_LSTOL),C_LSTO                           =CMS=
         LA    R9,JUSTDATA                                        =CMS=
         USING IHADCB,R9                                          =CMS=
         MVC   DCBDDNAM,=C'JUSTDATA'                              =CMS=
         OPEN  ((R9),OUTPUT),MF=(E,PARMLIST),MODE=31              =CMS=
         DROP  R9                                                 =CMS=
         LTR   R15,R15                   OPEN worked?             =CMS=
         JZ    JUSTDATA_OK               Yep, continue            =CMS=
*                                                                 =CMS=
         STRING64 'Error OPENing JUSTDATA DD. RC=',((R15),,X),    =CMS=X
               INTO=RECORD                                        =CMS=
         BRAS  R14,SPACE1                Print starting message   =CMS=
         MVC   RETCODE,=F'8'             Set bad return code      =CMS=
         J     COBANAL_021               But continue.            =CMS=
*                                                                 =CMS=
JUSTDATA_OK EQU *
         MVI   JUSTDATA_R,C'Y'
*                                                                 =CMS=
COBANAL_021 DS  0H
         DEVTYPE =CL8'SYSIN',DOUBLE       Get SYSIN information  RS1207
         LTR   R15,R15                    Is it allocated?       RS1207
         JNZ   COBANAL_0210               No, continue           RS1207
         MVI   DD_SYSIN,C'Y'    Default                          RS1207
         L     R15,=V(FIXSYSIN)                                  PF0608
         MVC   SYSIN(SYSIN_FIX_LENGTH),0(R15)                    PF0608
         MVC   PARMLIST(C_LSTIL),C_LSTI                          RS1207
         LA    R9,SYSIN                                          RS1207
         USING IHADCB,R9                                         RS1207
         MVC   DCBDDNAM,=C'SYSIN   '                             RS1207
         LA    R0,SYSINE                Point DCB copy to        RS0908
         ST    R0,DCBDCBE               DCBE copy                RS0908
         OPEN  ((R9),INPUT),MF=(E,PARMLIST),MODE=31              RS1207
         DROP  R9                                                RS1207
COBANAL_0210 DS  0H                                              RS1207
         STRING64 'COBANAL &REL - DETAIL Report.  ',             RS1007X
               ' Dataset=',CSCDSN,INTO=RECORD                     *CSC*
         BRAS  R14,SPACE1                 Print starting message  *CSC*
         STRING64 '                ',                             *CSC*X
               'PARM=',PGMNAME,INTO=RECORD                        *CSC*
         BRAS  R14,SPACE2                 Print starting message  *CSC*
         CLI   SUMMARYR,C'Y'       Is SUMMARY DD Allocated?       *CSC*
         JE    COBANAL_021A        Yes,Skip information message   *CSC*
*                                                                 *CSC*
         STRING64 '**NOTE: ',                                     *CSC*X
               'SUMMARY SYSOUT DD not allocated, skipping ',      *CSC*X
               'generation of SUMMARY Report.',INTO=RECORD        *CSC*
         BRAS  R14,SPACE2                 Print starting message  *CSC*
*                                                                 *CSC*
COBANAL_021A DS  0H                                               *CSC*
         STRING64 FOOTER,INTO=RECORD                              *CSC*
         BRAS  R14,SPACE2                                         *CSC*
         CLC   PGMNAME,BLANKS      check PGMNAME
         JE    COBANAL_PARM_ERROR  if clear ==> Error
         CLC   PGMNAME(3),=C'ALL'  PGMNAME = ALL indicate analyzing
         JNE   COBANAL_025         a complete Load, but check for
         CLC   PARM_LENGTH,=H'3'   length; maybe it is a prog called
         JNE   COBANAL_025         ALLWAYS :-))
         CLI   DD_COBANAL,C'Y'        Did you read the docs?
         JE    COBANAL_022           yes, thats fine
         STRING64 'Parameter=ALL specified but DD-Name COBANAL',       X
               ' missing',                                             X
               INTO=RECORD
         BRAS  R14,SPACE1                 Print starting message
         MVC   RETCODE,=F'12'
         J     COBANAL_EXIT         no, leave
** Loop
COBANAL_022 DS  0H
         MVI   DOALL,C'Y'          remember that
         BRAS  R14,GETMEM          get the member name
         CLC   PGMNAME_GET,XFF         more entries?
         JE    COBANAL_EXIT          leave
*------------------------------------------------------------*
*        Load the progamm from DD COBANAL                    *
*------------------------------------------------------------*
         XC    LOADWK(16),LOADWK      clear                      RS1216
         LA    R14,PGMNAME_GET                                   PF0608
         LA    R15,LOADL                                         PF0608
*        LOAD  EPLOC=PGMNAME_GET,DCB=LOADL,                      PF0608
         LOAD  EPLOC=(14),DCB=(15),                              PF0608X
               LSEARCH=YES,                                      PF0608X
               ERRET=COBANAL_LOAD_ERROR,SF=(E,LOADWK)            RS0908
         J     COBANAL_027
COBANAL_025 DS  0H
         CLC   PGMNAME(5),=C'SYSIN' SYSIN indicate analyzing     RS1207
         JNE   COBANAL_025B        a given member list via SYSIN RS1207
         CLC   PARM_LENGTH,=H'5'   length; maybe it is a prog called1
         JNE   COBANAL_025B        SYSINXX :-))                  RS1207
         CLI   DD_SYSIN,C'Y'       Did you read the docs?        RS1207
         JE    COBANAL_025A          yes, thats fine             RS1207
         STRING64 'Parameter=SYSIN specified but DD-Name SYSIN', RS1207X
               ' missing',                                       RS1207X
               INTO=RECORD                                       RS1207
         BRAS  R14,SPACE1          Print error message           RS1207
         MVC   RETCODE,=F'12' Returncode                         RS1207
         J     COBANAL_EXIT_B      leave                         RS0516
COBANAL_025A DS  0H                                              RS1207
         MVI   DOALL,C'S'          remember that (Sysin)         RS1207
         GET   SYSIN,SYSIN_DATA    get a member name from SYSIN  RS1207
         CLI   SYSIN_DATA,C'*'     Comment ?                     RS0209
         JE    COBANAL_025A          yes ignore                  RS0209
         MVC   PGMNAME_GET,SYSIN_DATA   remember PGMNAME         RS1207
         MVC   PGMNAME,PGMNAME_GET  remember PGMNAME             RS1207
         J     COBANAL_026        load programm from             RS1207
COBANAL_025B DS  0H                                              RS1207
         ST    R5,SAVER5          Save Register 5                RS0104
         LA    R5,PGMNAME         start search at address
         LA    R4,L'PGMNAME       length of string to be searched
         AR    R4,R5              + start of address
         LA    R0,C'?'            search for ?
         SRST  R4,R5              issue search
         BRC   4,COBANAL_028      wildcard ? found
         LA    R5,PGMNAME         start search at address
         LA    R4,L'PGMNAME       length of string to be searched
         AR    R4,R5              + start of address
         LA    R0,C'*'            search for *
         SRST  R4,R5              issue search
         BRC   4,COBANAL_028      wildcard * found
         L     R5,SAVER5          Reload Register 5              RS0104
         MVC   PGMNAME_GET,PGMNAME
         CLI   DD_COBANAL,C'Y'    load from DD Cobanal ?
         JE    COBANAL_026           yes
*------------------------------------------------------------*
*        Load the progamm                                    *
*------------------------------------------------------------*
         XC    LOADWK(16),LOADWK      clear                      RS1216
         LOAD  EPLOC=PGMNAME_GET,ERRET=COBANAL_LOAD_ERROR,       PF0608X
               SF=(E,LOADWK)                                     RS0908
         J     COBANAL_027
COBANAL_026 DS  0H
*------------------------------------------------------------*
*        Load the progamm from DD COBANAL                    *
*------------------------------------------------------------*
         XC    LOADWK(16),LOADWK      clear                      RS1216
         LA    R14,PGMNAME_GET                                   PF0608
         LA    R15,LOADL                                         PF0608
*        LOAD  EPLOC=PGMNAME_GET,DCB=LOADL,                      PF0608
         LOAD  EPLOC=(14),DCB=(15),                              PF0608X
               LSEARCH=YES,                                      PF0608X
               ERRET=COBANAL_LOAD_ERROR,SF=(E,LOADWK)            RS0908
COBANAL_027 DS  0H
         LTR   R15,R15             check response
         JNZ   COBANAL_LOAD_ERROR if greater zero ==> Error
         ST    R0,ADR_PGMNAME      save the address
*>---------------------------------------------------------------HP1107
         la    R3,csect_table                                    HP1107
         st    R3,csect_tabelem_act                              HP1107
         mvc   csect_anz_tabelem,=h'0'                           HP1107
         MVI   csect_analyze_kz,C'M'                             HP1107
*>---------------------------------------------------------------HP1107
*------------------------------------------------------------*
*        Check length                                        *
*------------------------------------------------------------*
*        MVC   CSV_OUTXTLST_ENTR,=F'8' Want 8 entries back       RS0704
         MVC   CSV_OUTXTLST_ENTR,=F'9' Want 9 entries back       PF0608
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     X
               INADDR=ADR_PGMNAME,     ADDRESS                         X
               OUTLOADPT=CSV_LOADPT,                                DEHX
               OUTLENGTH=CSV_LENGTH,                                   X
               OUTEPTKN=CSV_EPTOKEN,                                   X
               OUTVALID=CSV_OUTVALID,                            RS0704X
               OUTATTR1=CSV_OUTATTR1,                            *CSC* X
               OUTATTR2=CSV_OUTATTR2,                            *CSC* X
               OUTATTR3=CSV_OUTATTR3,                            *CSC* X
               OUTXTLST=CSV_OUTXTLST,                            RS0704X
               OUTPID=CSV_OUTPID,                                PF0608X
               MF=(E,CSVQRYWK)         WORK AREA
         LTR   R2,R15                  pass return code
         JNZ   COBANAL_CSV_ERROR if greater zero ==> Error
         AP    CNT_TOTAL,=P'1'           Increment counter        *CSC*
*        STRING64 '**Program Name= ',PGMNAME_GET,                PF0608X
               '   INADDR=',(ADR_PGMNAME,,X),                    PF0608X
               ' OUTLOADP=',(CSV_LOADPT,,X),                     PF0608X
               ' OUTLENGT=',(CSV_LENGTH,,X),                     PF0608X
               '  EPTOKEN=',(CSV_EPTOKEN,,X),                    PF0608X
               INTO=RECORD                                       PF0608
*        BRAS  R14,SPACE1                                        PF0608
         STRING64 '**Program Name= ',PGMNAME_GET,                 *CSC*X
               ' OUTATTR1=',(CSV_OUTATTR1,,X),                    *CSC*X
               ' OUTATTR2=',(CSV_OUTATTR2,,X),                    *CSC*X
               ' OUTATTR3=',(CSV_OUTATTR3,,X),                    *CSC*X
               ' OUTVALID=',(CSV_OUTVALID,,X),                    *CSC*X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         MVC   CSCLPRM,BLANKS                                    RS1007
         TM    CSV_OUTVALID,BIT5         Is CSV_OUTATTR1 Valid?   *CSC*
         JZ    AMODE                     NOPE ---                 *CSC*
RENTRUSE DS    0H                                                 *CSC*
         TM    CSV_OUTATTR1,BIT2+BIT3    Reentrant and REUS?      *CSC*
         JNO   RENT                      no                      RS1207
         STRING64 'RENT REUS',INTO=CSCLPRM                       RS1007
         J     AMODE                     Go analyze AMODE        PF0608
RENT     DS    0H                                                 *CSC*
         TM    CSV_OUTATTR1,BIT2         REENTRANT?               *CSC*
         JZ    RUSE                      NOPE ---                 *CSC*
         STRING64 'RENT ',INTO=CSCLPRM                    *CSC*
RUSE     DS    0H                                                 *CSC*
         TM    CSV_OUTATTR1,BIT3         Serially Reusable        *CSC*
         JZ    AMODE                     Go analyze AMODE        PF0608
         STRING64 'REUS ',INTO=CSCLPRM                           JK1207
AMODE    DS    0H                                                 *CSC*
         TM    CSV_OUTVALID,BIT6         Is CSV_OUTATTR2 Valid?   *CSC*
         JO    AMODEANY                  Yes,Check value         RS1207
         STRING64 '???',INTO=CSCAM       No, Set unknown value    *CSC*
         J     CONT                     Skip remaining validationRS1207
AMODEANY DS    0H                                                 *CSC*
         STRING64 '24 ',INTO=CSCAM                                *CSC*
         TM    CSV_OUTATTR2,BIT2         AMODEANY?                *CSC*
         JZ    AMODE31                   NOPE ---                 *CSC*
         STRING64 'ANY',INTO=CSCAM                                *CSC*
AMODE31  DS    0H                                                 *CSC*
         TM    CSV_OUTATTR2,BIT3         AMODE31?                 *CSC*
         JZ    AMODE64                   NOPE ---                RS1207
         STRING64 '31 ',INTO=CSCAM                                *CSC*
AMODE64  DS    0H                                                RS1207
         TM    CSV_OUTATTR2,BIT7         AMODE64?                RS1207
         JZ    CONT                      NOPE ---                RS1207
         STRING64 '64 ',INTO=CSCAM                               RS1207
CONT     DS    0H                                                 *CSC*
         J     COBANAL_03
*                                                                 *CSC*
COBANAL_028 DS  0H
         L     R5,SAVER5          Reload Register 5              RS0104
         MVI   DOALL,C'X'          remember that (eXclude)
         BRAS  R14,GETMEM          get the member name
         CLC   PGMNAME_GET,XFF         more entries?
         JE    COBANAL_EXIT          leave
         ASAXWC    PATTERNSTR=PGMNAME,                                 X
               PATTERNSTRLEN==A(L'PGMNAME),                            X
               STRING=PGMNAME_GET,                                     X
               STRINGLEN==A(L'PGMNAME_GET),                            X
               ZEROORMORE==CL1'*',                                     X
               ONECHAR==CL1'?',                                        X
               DELIMITER==CL1' ',                                      X
               RETCODE=IRETCODE,                                       X
               MF=(E,MYLIST)
*        STRING64 'Program Name= ',PGMNAME_GET,                        X
               ' Pattern= ',PGMNAME,'RC= ',(IRETCODE,,X),              X
               INTO=RECORD                    debug
*        BRAS  R14,SPACE1
         CLC   IRETCODE,=F'0'
         JNE   COBANAL_028
*------------------------------------------------------------*
*        Load the progamm from DD COBANAL                    *
*------------------------------------------------------------*
         XC    LOADWK(16),LOADWK      clear                      RS1216
         LA    R14,PGMNAME_GET                                   PF0608
         LA    R15,LOADL                                         PF0608
*        LOAD  EPLOC=PGMNAME_GET,DCB=LOADL,                      PF0608
         LOAD  EPLOC=(14),DCB=(15),                              PF0608X
               LSEARCH=YES,                                      PF0608X
               ERRET=COBANAL_LOAD_ERROR,SF=(E,LOADWK)            RS0908
         J     COBANAL_027
*------------------------------------------------------------*
*        Write info to sysprint                              *
*------------------------------------------------------------*
COBANAL_03 DS  0H
*        STRING64 'Program Name= ',PGMNAME_GET,                        X
               ' was loaded into storage at EPA= ',(ADR_PGMNAME,,X),   X
               INTO=RECORD
*        BRAS  R14,SPACE1
*        STRING64 'CSV-LOAD-PTR= ',(CSV_LOADPT,,X),1X,                 X
               ' Length= ',(CSV_LENGTH,,X),                            X
               ' Valid= ',(CSV_OUTVALID,,X),                           X
               ' Token= ',(CSV_EPTOKEN,,X),                            X
               INTO=RECORD                    debug
*        BRAS  R14,SPACE1
*        STRING64 'CSV-Entries= ',(CSV_OUTXTLST_ENTRR,,X),             X
               ' LP-1= ',(CSV_OUTXTLST_ELP1,,X),                       X
               ' L-1= ',(CSV_OUTXTLST_EL1,,X),                         X
               INTO=RECORD                    debug
*        BRAS  R14,SPACE1
*        STRING64 'CSV-Entries= ',(CSV_OUTXTLST_ENTRR,,X),             X
               ' LP-2= ',(CSV_OUTXTLST_ELP2,,X),                       X
               ' L-2= ',(CSV_OUTXTLST_EL2,,X),                         X
               INTO=RECORD                    debug
*        BRAS  R14,SPACE1
*
*        Dump the first 256 Bytes for Identification.
*        Should be activate only in case of problems
*
*        L     R4,ADR_PGMNAME
*        LA    R3,2048/16              LOOP COUNTER
*LOOP
COBANAL_04 DS  0H
*        STRING64 4X,((R4),4,X),1X,(4(R4),4,X),1X,(8(R4),4,X),1X,      X
               (12(R4),4,X),3X,((R4),16),                              X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        LA    R4,016(,R4)             BUMP POINTER
*        BRCT  R3,COBANAL_04
*ENDLOOP
         MVC   CSCPNAM(8),PGMNAME_GET                             *CSC*
         L     R4,ADR_PGMNAME       Load-Entry-Point
         USING COBOL_370_DSECT,R4
*        STRING64 ' R4=',((R4),4,X),1X,(4(R4),4,X),1X,(8(R4),4,X),1X,  X
               (12(R4),4,X),3X,((R4),16),                              X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 4X,(16(R4),4,X),1X,(20(R4),4,X),1X,(24(R4),4,X),1X,  X
               (28(R4),4,X),3X,(16(R4),16),                            X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 4X,(32(R4),4,X),1X,(36(R4),4,X),1X,(40(R4),4,X),1X,  X
               (44(R4),4,X),3X,(32(R4),16),                            X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
* Compute offset of entry point for later use in ESD processing  PF0608
         XC    OFF_PGMNAME,OFF_PGMNAME Assume zero offset        PF0608
         TM    CSV_OUTVALID+1,BIT0  Is CSV_LOADPT Valid?         PF0608
         JZ    COBANAL_04_1         NOPE ---                     PF0608
         L     R2,CSV_LOADPT        R2 => Load Point             PF0608
         N     R4,=X'7FFFFFFF'      Turn off high order bit      PF0608
         N     R2,=X'7FFFFFFF'      Turn off high order bit      PF0608
         SR    R4,R2                Get entry point offset       PF0608
         ST    R4,OFF_PGMNAME       Save offset for CSECT scan   PF0608
         L     R4,ADR_PGMNAME       Reload Entry-Point           PF0608
COBANAL_04_1 DS  0H                                              PF0608
         CLC   CSV_LENGTH,=F'36'    At least 36 bytes|||          *CSC*
         JNH   COBANAL_06_A         Try using Load Point          *CSC*
         L     R2,CSV_LOADPT        R2 => Load Point             MG0104
*        STRING64 ' R2=',((R2),4,X),1X,(4(R2),4,X),1X,(8(R2),4,X),1X,  X
               (12(R2),4,X),3X,((R2),16),                              X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 4X,(16(R2),4,X),1X,(20(R2),4,X),1X,(24(R2),4,X),1X,  X
               (28(R2),4,X),3X,(16(R2),16),                            X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 4X,(32(R2),4,X),1X,(36(R2),4,X),1X,(40(R2),4,X),1X,  X
               (44(R2),4,X),3X,(32(R2),16),                            X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
         A     R2,CSV_LENGTH        R2 => End of module          MG0104
         L     R10,ADR_PGMNAME      R10 => Entry Point           MG0104
         N     R10,=X'7FFFFFFF'     Turn off high order bit      MG0104
         SR    R2,R10               Get entry point length       MG0104
         C     R2,=F'36'            At least 36 bytes|||         RS1207
         JNH   COBANAL_06_A         Try using Load Point          *CSC*
         C     R2,=F'52'            At least 52 bytes?           PF0708
         JNH   COBANAL_04_2         No, can't be EZTrieve+       PF0708
         USING EZTRIEVE_DSECT,R4                                 PF0708
         CLC   EZ_EYECATCHER,=CL8'EZTPA00 ' Compiled EZTRIEVE?   PF0708
         JE    COBANAL_15           Yes, go process              PF0708
         USING COBOL_370_DSECT,R4   No, continue analysis        PF0708
COBANAL_04_2 DS  0H                                              PF0608
         L     R2,CSV_LOADPT        R2 => Load Point              *CSC*
         BRAS  R14,PGMNAME_2_MBR  Move PGMNAME to IEW_MBR        PF0708
         BRAS  R14,CREATE_PLINAME Create PLINAME for later use   PF0708
         CLC   28(8,R2),=CL8'PLISTART'      PLI V2.3?            RS0108
         JE    COBANAL_10A                                        *CSC*
         CLC   CEE_EYECATCHER,C_COBOL370   COBOL/370 ?  X'00C3C5C5'
         JE    COBOL_370
*   WHY ???
*        CLC   0(4,R4),=XL4'47F0F026' C or Cobol V5 ?  X'01C3C5C5'
*        JE    ENTCOBOLV5
         CLC   CEE_EYECATCHER,C_COBV5 Enter Cobol V5 ?  X'01C3C5C5'
         JE    ENTCOBOLV5
         CLC   CEE_EYECATCHER,=XL4'47000002' C    ?  X'47000002' RS0305
         JE    C_370_NEW                                         RS0305
         CLC   CEE_EYECATCHER,C_OPLINK     C         ?  X'01C3C5C5'
         JE    C_370
         USING COBOL_2_DSECT,R4
         CLC   C2_EYECATCHER,=CL4' C2 '     COBOL/2 ?  X'40C3F240'
         JE    COBOL_2
         USING COBOL_1_DSECT,R4
* ???    CLC   C1_EYECATCHER,=CL2'AN'       ANS4 COBOL ?
* ???    JE    COBOL_1
         CLC   C1_EYECATCHER(4),=CL4'VSR1'       OS/VS COBOL/1 ?
         JE    COBOL_1
         CLC   C1_EYECATCHER(4),=CL4'VSR2'       OS/VS COBOL/1 ?
         JE    COBOL_1
         CLC   0(4,R2),=XL4'47F0F028'        Fortran ?           RS1207
         JNE   COBANAL_05                      no                RS1207
         CLC   CSV_LENGTH,=F'112'   At least 112 bytes |||       RS1207
         JNH   COBANAL_05           Try using Load Point         RS1207
         CLC   104(8,R2),=CL8'#PIBTAB#'      Fortran ?           RS1207
         JE    COBANAL_11A                                       RS1207
* The following code is essentially a copy of the code above.       DEH
* The purpose is to continue analysis at the load point if we       DEH
*      have been unsuccessful at the entry point. This seems        DEH
*      to be of benefit for IMS load modules.                       DEH
COBANAL_05 DS  0H                                                MG0104
         STRING64 'Program= ',PGMNAME_GET,                    *CSC* DEHX
               ' loaded at address= ',(CSV_LOADPT,,X),           PF0608X
               ' in ',(CSV_OUTXTLST_ENTRR,F,R3B),' extents',           X
               ' for length=',(CSV_LENGTH,,X),                   PF0608X
               INTO=RECORD                                          DEH
         BRAS  R14,SPACE1                                           DEH
*        STRING64 'CSV-LOAD-PTR= ',(CSV_LOADPT,,X),1X,                 X
               ' Length= ',(CSV_LENGTH,,X),                            X
               INTO=RECORD                    debug
*        BRAS  R14,SPACE1
         MVC   CSCPNAM(8),PGMNAME_GET                             *CSC*
         L     R4,CSV_LOADPT        Load Load Address               DEH
         USING COBOL_370_DSECT,R4                                   DEH
         CLC   CSV_LENGTH,=F'32'    At least 32 bytes!!!          *CSC*
         JNH   COBANAL_06_A          prevent S0C4                 *CSC*
         CLC   CEE_EYECATCHER,C_COBOL370   COBOL/370 ?  X'00C3C5C5'
         JE    COBOL_370
         CLC   CEE_EYECATCHER,C_COBV5 Enter Cobol V5 ?  X'01C3C5C5'
         JE    ENTCOBOLV5
         CLC   CEE_EYECATCHER,=XL4'47000002' C    ?  X'47000002' RS0305
         JE    C_370_NEW                                         RS0305
         CLC   CEE_EYECATCHER,C_OPLINK     C         ?  X'01C3C5C5' DEH
         JE    C_370                                                DEH
         USING COBOL_2_DSECT,R4                                     DEH
         CLC   C2_EYECATCHER,=CL4' C2 '     COBOL/2 ?  X'40C3F240'  DEH
         JE    COBOL_2                                              DEH
         USING COBOL_1_DSECT,R4                                     DEH
* ???    CLC   C1_EYECATCHER,=CL2'AN'       ANS4 COBOL ?            DEH
* ???    JE    COBOL_1                                              DEH
         CLC   C1_EYECATCHER(4),=CL4'VSR1'       OS/VS COBOL/1 ?    DEH
         JE    COBOL_1                                              DEH
         CLC   C1_EYECATCHER(4),=CL4'VSR2'       OS/VS COBOL/1 ?    DEH
         JE    COBOL_1                                              DEH
COBANAL_06 DS  0H
* See if this program is a CICS/BMS Map. I noticed that at x'09'  *CSC*
* from the LOADpoint is a fairly common header that occassionally *CSC*
* changes.                                                        *CSC*
         MVC   CSCLANG(9),=CL9'BMS Map  '     Indicate BMS Mapset *CSC*
*                                                                 *CSC*
         CLC   9(5,R4),=XL5'704040004F'       CICS/VS BMS Map?    *CSC*
         JNE   COBANAL_BMS_CICSMVS            No, try CICSMVS BMS *CSC*
         MVC   CSCCICS(4),=CL4'B170'          and OLD!            *CSC*
         J     COBANAL_BMS_MESSAGE            Skip to message send*CSC*
COBANAL_BMS_CICSMVS DS  0H                                        *CSC*
         CLC   9(5,R4),=XL5'214040004F'       CICS/MVS BMS Map?   *CSC*
         JNE   COBANAL_BMS_CICSESA            No, try CICSESA BMS *CSC*
         MVC   CSCCICS(4),=CL4'B210'          CICS/MVS V2.1 Level *CSC*
         J     COBANAL_BMS_MESSAGE            Skip to message send*CSC*
COBANAL_BMS_CICSESA DS  0H                                        *CSC*
         CLC   9(5,R4),=XL5'324040004F'       CICS/ESA BMS Map?   *CSC*
         JNE   COBANAL_07                     No, Not BMS         *CSC*
         MVC   CSCCICS(4),=CL4'B320'          CICS/ESA V3.2 Level *CSC*
COBANAL_BMS_MESSAGE DS  0H                                        *CSC*
         AP    CNT_BMS,=P'1'             Increment counter        *CSC*
         STRING64 PGMNAME_GET,' is probably a CICS/BMS Mapset',   *CSC*X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         J     COBANAL_EXIT         no, leave                     *CSC*
*                                                                 *CSC*
COBANAL_06_A DS  0H                                               *CSC*
         AP    CNT_UNKNOWN,=P'1'         Increment counter        *CSC*
         MVC   CSCPNAM(8),PGMNAME_GET    Save info for summary   RS1107
         MVC   CSCLANG(9),=CL9'Unknown'  Save info for summary    *CSC*
         MVC   CSCLPRM(21),=CL21'*Too small to analyse' summary   *CSC*
*                                                                 *CSC*
         STRING64 'Program= ',PGMNAME_GET,                        *CSC*X
               ' was loaded at address= ',(CSV_LOADPT,,X),        *CSC*X
               ' in ',(CSV_OUTXTLST_ENTRR,F,R3B),' extents',      *CSC*X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         STRING64 'Program is too short to safely analyse! It ',  *CSC*X
               'is only x',(CSV_LENGTH,,X),' bytes in length',    *CSC*X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SPACE2                                         *CSC*
*                                                                 *CSC*
         J     COBANAL_EXIT         no, leave                     *CSC*
*                                                                 *CSC*
COBANAL_07 DS  0H                                                 *CSC*
         L     R2,CSV_LOADPT        R2 => Load Point              *CSC*
*        STRING64 ' R2=',(16(R2),4,X),1X,(20(R2),4,X),                 X
               1X,(24(R2),4,X),1X,                                     X
               1X,(28(R2),4,X),3X,(16(R2),16),                         X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
         CLC   20(6,R2),=CL6'DFHPL1' CICS PL/I Stub?              *CSC*
         JE    COBANAL_07_C         Yes,Cool.                     *CSC*
         CLC   0(4,R2),=CL4'DFHY'   CICS Stub?                    *CSC*
         JNE   COBANAL_07_D         No, no idea, sorry.           *CSC*
         CLI   4(R2),C'A'           Yes,Assembler?                *CSC*
         JNE   COBANAL_07_A         No, Try COBOL                 *CSC*
*                                                                 *CSC*
         STRING64 'Program=',PGMNAME_GET,                         *CSC*X
               ' is a CICS Assembler program',                    *CSC*X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         MVC   CSCLANG(9),=CL9'ASSEMBLER' Assembler.              *CSC*
         STRING64 'S',(5(R2),3),INTO=CSCCICS                      *CSC*
         AP    CNT_ASSEMBLER,=P'1'  Increment counter             *CSC*
         J     COBANAL_EXIT                                       *CSC*
*                                                                 *CSC*
COBANAL_07_A  DS  0H   ** Checking for COBOL here is redundant!!  *CSC*
         CLI   4(R2),C'C'           CICS COBOL Stub?              *CSC*
         JNE   COBANAL_07_B         No, Try C/C++                RS1107
*                                                                 *CSC*
         MVC   CSCLANG(7),=CL7'COBOL  ' COBOL                     *CSC*
         STRING64 'Program=',PGMNAME_GET,                         *CSC*X
               ' is a CICS COBOL program',                        *CSC*X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         STRING64 'S',(5(R2),3),INTO=CSCCICS                      *CSC*
         AP    CNT_OTHER,=P'1'      Redundant, so add to OTHER    *CSC*
         J     COBANAL_EXIT                                       *CSC*
*                                                                 *CSC*
COBANAL_07_B  DS  0H                                              *CSC*
         CLI   4(R2),C'I'           CICS C/C++ Stub?             RS1107
         JNE   COBANAL_07_C         No, Try PL/1 PL/I PL1 PLI     *CSC*
*                                                                 *CSC*
         STRING64 'Program=',PGMNAME_GET,                         *CSC*X
               ' is a CICS C/C++ program',                       RS1107X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         MVC   CSCLANG(7),=CL7'C/C++  ' C/C++                    RS1107
         STRING64 'S',(5(R2),3),INTO=CSCCICS                      *CSC*
         AP    CNT_C370,=P'1'       Increment counter             *CSC*
         J     COBANAL_EXIT                                       *CSC*
*                                                                 *CSC*
COBANAL_07_C  DS  0H                                              *CSC*
         STRING64 'Program=',PGMNAME_GET,                         *CSC*X
               ' is a CICS PL/I program',                         *CSC*X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         MVC   CSCLANG(7),=CL7'PL/I   ' PL/1 PL/I PL1 PLI         *CSC*
         MVC   CSCCICS(3),=CL3'YES'     PL/1 PL/I PL1 PLI         *CSC*
         STRING64 'PLI ',(28(R2),8),INTO=CSCCOMP                  *CSC*
         AP    CNT_PLI,=P'1'        Increment counter             *CSC*
         J     COBANAL_EXIT                                       *CSC*
*                                                                 *CSC*
COBANAL_07_D  DS  0H                                              *CSC*
         AP    CNT_UNKNOWN,=P'1'         Increment counter        *CSC*
         MVC   CSCLANG(9),=CL9'Unknown'                           *CSC*
         STRING64 'Can not establish the program language. ',    PF0608X
               'It is possibly assembler.',INTO=RECORD           PF0608
         BRAS  R14,SPACE1                                        PF0608
         STRING64 'See the SUMMARY listing for Binder record ',  PF0608X
               'info about language and other features.',        PF0608X
               INTO=RECORD                                       PF0608
         BRAS  R14,SPACE2                                        RS1007
         BRAS  R14,BINDER_INFO                                   RS1007
*>---------------------------------------------------------------HP1107
*>   any more csect's ? -> return to csect-loop                  HP1107
         CLI   csect_analyze_kz,C'S'  any more csects ?          HP1107
         je    COBANAL_Csect_Loop                                HP1107
*>---------------------------------------------------------------HP1107
         STRING64 '------------ End  --------------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD                                       RS1007
         BRAS  R14,SPACE2                                        RS1007
         MVC   PGMNAME_GET,PGMNAME_SAV                           PF0608
         MVI   PRINT_LEAD_SPACE,C'N' Insert NO space             PF0608
         MVC   RETCODE,=F'4'
         J     COBANAL_EXIT         no, leave
COBANAL_08 DS  0H
         AP    CNT_INVALID,=P'1'         Increment counter        *CSC*
         MVC   CSCLANG(9),=CL9'*INVALID'                          *CSC*
         STRING64 'Program=',PGMNAME_GET,' seems to be LE but',        X
               ' PPA1 looks invalid',INTO=RECORD
         BRAS  R14,SPACE2
         MVC   RETCODE,=F'8'
         BRAS  R14,BINDER_INFO                                   RS1007
         STRING64 '------------ End  --------------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD                                       RS1007
         BRAS  R14,SPACE2                                        RS1007
*                                                                 *CSC*
         J     COBANAL_EXIT         no, leave
COBANAL_09 DS  0H
         CLI   0(R2),X'04'          ID = Enterprise Cobol V5 (04)RS0115
         JE    COBANAL_10             no check PLI
         CLI   0(R2),X'03'          ID = C       (03) ?
         JNE   COBANAL_10             no check PLI
COBANAL_09A DS  0H                                                *CSC*
         AP    CNT_C370,=P'1'            Increment counter        *CSC*
         MVC   CSCLANG(9),=CL9'C/C++'                            RS1007
         STRING64 'Program=',PGMNAME_GET,' is a C/C++-Program ', RS1007X
               INTO=RECORD                                       RS1007
         BRAS  R14,SPACE2                                        RS1007
         BRAS  R14,BINDER_INFO                                   RS1007
         BRAS  R14,CEEUOPT_INFO                                  RS1107
         STRING64 '------------ End  --------------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD                                       RS1007
         BRAS  R14,SPACE2                                        RS1007
         MVC   RETCODE,=F'4'
         J     COBANAL_EXIT         no, leave
COBANAL_10 DS  0H
         CLI   0(R2),X'0A'          ID = PLI       (10) ?
         JNE   COBANAL_11             no, Check Fortran
COBANAL_10A DS  0H                                                *CSC*
         AP    CNT_PLI,=P'1'             Increment counter        *CSC*
         MVC   CSCLANG(9),=CL9'PL/I'                              *CSC*
         STRING64 'Program=',PGMNAME_GET,' is a PLI-Program ',         X
               INTO=RECORD
         BRAS  R14,SPACE2                                        RS1007
         BRAS  R14,BINDER_INFO                                   RS1007
         BRAS  R14,CEEUOPT_INFO                                  RS1107
         STRING64 '------------ End  --------------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD                                       RS1007
         BRAS  R14,SPACE2                                        RS1007
         MVC   RETCODE,=F'4'
         J     COBANAL_EXIT         no, leave
COBANAL_11 DS  0H
         CLI   0(R2),X'07'          ID = Fortran   (07) ?
         JNE   COBANAL_12             no, Check DCE
COBANAL_11A DS  0H                                               RS1107
         AP    CNT_FORTRAN,=P'1'         Increment counter        *CSC*
         MVC   CSCLANG(9),=CL9'FORTRAN'                           *CSC*
         STRING64 'Program=',PGMNAME_GET,' is a Fortran-Program ',     X
               INTO=RECORD
         BRAS  R14,SPACE2                                        RS1007
         BRAS  R14,BINDER_INFO                                   RS1007
         BRAS  R14,CEEUOPT_INFO                                  RS1107
         STRING64 '------------ End  --------------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD                                       RS1007
         BRAS  R14,SPACE2                                        RS1007
         MVC   RETCODE,=F'4'
         J     COBANAL_EXIT         no, leave
COBANAL_12 DS  0H
         CLI   0(R2),X'08'          ID = DCE       (08) ?
         JNE   COBANAL_13             no, Check Socket
         AP    CNT_OTHER,=P'1'           Increment counter        *CSC*
         MVC   CSCLANG(9),=CL9'DCE'                               *CSC*
         STRING64 'Program=',PGMNAME_GET,' is a DCE-Program ',         X
               INTO=RECORD
         BRAS  R14,SPACE2                                        RS1007
         BRAS  R14,BINDER_INFO                                   RS1007
         BRAS  R14,CEEUOPT_INFO                                  RS1107
         STRING64 '------------ End  --------------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD                                       RS1007
         BRAS  R14,SPACE2                                        RS1007
         MVC   RETCODE,=F'4'
         J     COBANAL_EXIT         no, leave
COBANAL_13 DS  0H
         CLI   0(R2),X'0C'          ID = Sockets   (12) ?
         JNE   COBANAL_14             no, Check Socket
         AP    CNT_OTHER,=P'1'           Increment counter        *CSC*
         MVC   CSCLANG(9),=CL9'SOCKETS'                           *CSC*
         STRING64 'Program=',PGMNAME_GET,' is a Sockets-Program',      X
               INTO=RECORD
         BRAS  R14,SPACE2                                        RS1007
         BRAS  R14,BINDER_INFO                                   RS1007
         BRAS  R14,CEEUOPT_INFO                                  RS1107
         STRING64 '------------ End  --------------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD                                       RS1007
         BRAS  R14,SPACE2                                        RS1007
         MVC   RETCODE,=F'4'
         J     COBANAL_EXIT         no, leave
COBANAL_14 DS  0H
         CLI   0(R2),X'0F'          ID = Assembler (15) ?
         JNE   COBANAL_06             no, unknown language
         AP    CNT_LEASS,=P'1'           Increment counter        *CSC*
         MVC   CSCLANG(9),=CL9'ASSEMBLER'                         *CSC*
         STRING64 'Program=',PGMNAME_GET,' is a LE-enabled ',          X
               'Assembler',INTO=RECORD
         BRAS  R14,SPACE2                                        RS1007
         BRAS  R14,BINDER_INFO                                   RS1007
         BRAS  R14,CEEUOPT_INFO                                  RS1107
         STRING64 '------------ End  --------------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD                                       RS1007
         BRAS  R14,SPACE2                                        RS1007
         MVC   RETCODE,=F'4'
         J     COBANAL_EXIT         no, leave
COBANAL_15 DS  0H                                                PF0708
         AP    CNT_EZTRV,=P'1'           Increment counter       PF0708
         MVC   CSCLANG(9),=CL9'EZTRIEVE+'                        PF0708
         STRING64 'Program=',PGMNAME_GET,' is a compiled ',      PF0708X
               'EZTrieve+',INTO=RECORD                           PF0708
         BRAS  R14,SPACE2                                        PF0708
* Now must search table of offsets to find JNLnnnnn CSECT        PF0708
* It is OK to pick the first one for our purposes                PF0708
         STRING64 ' R4=',((R4),4,X),1X,(4(R4),4,X),1X,(8(R4),4,X),1X,  X
               (12(R4),4,X),3X,((R4),16),                              X
               INTO=RECORD
         BRAS  R14,SPACE1          <== next line
         STRING64 4X,(16(R4),4,X),1X,(20(R4),4,X),1X,(24(R4),4,X),1X,  X
               (28(R4),4,X),3X,(16(R4),16),                            X
               INTO=RECORD
         BRAS  R14,SPACE1          <== next line
         STRING64 4X,(32(R4),4,X),1X,(36(R4),4,X),1X,(40(R4),4,X),1X,  X
               (44(R4),4,X),3X,(32(R4),16),                            X
               INTO=RECORD
         BRAS  R14,SPACE1          <== next line
         STRING64 4X,(48(R4),4,X),1X,(52(R4),4,X),1X,(56(R4),4,X),1X,  X
               (60(R4),4,X),3X,(32(R4),16),                            X
               INTO=RECORD
         BRAS  R14,SPACE1          <== next line
         USING EZTRIEVE_DSECT,R4                                 PF0708
         LR    R2,R4          R2 = A(EntryPoint)                 PF0708
         A     R2,EZ_TABLE_OFFSET  R2 = A(EZ_OFFSET_TABLE)       PF0708
         LR    R14,R4         R14= A(EntryPoint)                 PF0708
         A     R14,EZ_TBLEND_OFFSET R14= A(End of table)         PF0708
         DROP  R4             Drop initial table addressibility  PF0708
         USING EZ_OFFSET_TABLE,R2  Set table addressibility      PF0708
COBANAL_15A DS  0H            Loop to search for JNLnnnn CSECT   PF0708
         CR    R2,R14         End of table?                      PF0708
         JNL   COBANAL_15X    Yes, unknown EZTrieve version      PF0708
         OC    EZ_TBL_WORD1,EZ_TBL_WORD1 Word1 = 0?              PF0708
         JZ    COBANAL_15B    Yes, bypass this table entry       PF0708
         OC    EZ_TBL_WORD2,EZ_TBL_WORD2 Word2 = 0?              PF0708
         JZ    COBANAL_15B    Yes, bypass this table entry       PF0708
         LR    R15,R4         R15= A(EntryPoint)                 PF0708
         CLC   CSV_LENGTH,EZ_TBL_WORD2 Check length              RS1208
         JNH   COBANAL_15B           prevent S0C4                RS1208
         A     R15,EZ_TBL_WORD2 R15= A(Entrypoint + offset)      PF0708
         USING EZTRIEVE_JNL_DSECT,R15                            PF0708
         CLC   EZ_JNL_START_CODE,=X'47F0F0' Good starting code?  PF0708
         JNE   COBANAL_15B    No, keep looking                   PF0708
         CLC   EZ_JNL_R4_R5_CATCH,=C'E Z T  ' R4/R5 eyecatcher?  PF0708
         JE    COBANAL_15C    Yes, go process R4/R5              PF0708
         CLC   EZ_JNL_R6_CATCH,=C'CA-EASYTRIEVE ' R6 eyecatcher? PF0708
         JE    COBANAL_15D    Yes, go process R6                 PF0708
COBANAL_15B DS  0H            No, keep looking                   PF0708
         LA    R2,L'EZ_OFFSET_TABLE(,R2) Next table entry        PF0708
         J     COBANAL_15A    Loop                               PF0708
         DROP  R2                                                RS1108
COBANAL_15C DS  0H                   Move R4/R5 info             PF0708
         MVC   CSCCOMP,EZ_JNL_R4_R5_EYECT                        PF0708
         MVC   CSCDATE(L'EZ_JNL_R4_R5_CDATE),EZ_JNL_R4_R5_CDATE  PF0708
         CLI   CSCDATE,C' '   Space at start of date?            PF0708
         JNE   COBANAL_15X    No, done                           PF0708
         MVI   CSCDATE,C'0'   Yes, set to zero                   PF0708
         J     COBANAL_15X           Done                        PF0708
COBANAL_15D DS  0H                   Move R6 info                PF0708
         MVC   CSCCOMP(4),=CL4'EZT '                             PF0708
         MVC   CSCCOMP+4(L'EZ_JNL_R6_VERSN),EZ_JNL_R6_VERSN      PF0708
         MVC   CSCDATE(L'EZ_JNL_R6_CDATE),EZ_JNL_R6_CDATE        PF0708
         CLI   CSCDATE,C' '   Space at start of date?            PF0708
         JNE   COBANAL_15X    No, done                           PF0708
         MVI   CSCDATE,C'0'   Yes, set to zero                   PF0708
COBANAL_15X DS  0H                                               PF0708
         BRAS  R14,BINDER_INFO                                   PF0708
         BRAS  R14,CEEUOPT_INFO                                  PF0708
         STRING64 '------------ End  --------------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD                                       PF0708
         BRAS  R14,SPACE2                                        PF0708
         MVC   RETCODE,=F'4'                                     PF0708
         J     COBANAL_EXIT         no, leave                    PF0708
COBANAL_PARM_ERROR DS  0H
         STRING64 'Error parm statement, check it',INTO=RECORD
         BRAS  R14,SPACE1
         MVC   RETCODE,=F'12'
         J     COBANAL_EXIT         no, leave
COBANAL_LOAD_ERROR DS  0H
         ST    R1,SAVER1                 Save for later           *CSC*
         ST    R15,SAVER15               Save for later           *CSC*
         AP    CNT_NOTLOAD,=P'1'         Increment counter       PF0608
         MVI   LOADERR,C'Y'              Remember we didn't LOAD PF0608
         MVC   CSCPNAM(8),PGMNAME_GET    Save info for summary   RS1107
         MVC   CSCLANG(9),=CL9'*NOTLOAD' Save info for summary   PF0608
         MVC   CSCCOMP(17),=CL17'Program not found'              PF0608
*                                                                 *CSC*
         STRING64 'Error during LOAD of program=',PGMNAME_GET,    *CSC*X
               ' R1=',(SAVER1,,X),' R15=',(SAVER15,,X),           *CSC*X
               ' SYSIN',DD_SYSIN,                                 *CSC*X
               INTO=RECORD                                        *CSC*
         BRAS  R14,SPACE1
         STRING64 'R1=',(SAVER1,,X),                              *CSC*X
               ' R15=',(SAVER15,,X),INTO=CSCLPRM                  *CSC*
         MVC   RETCODE,=F'12'
         CLI   DD_SYSIN,C'Y'             via SYSIN ?             RS0516
         JNE   COBANAL_LOAD_ERROR_RC12   no set RC12             RS0516
         MVC   RETCODE,=F'4'             yes set RC4             RS0516
COBANAL_LOAD_ERROR_RC12 DS 0H                                    RS0516
*                                                                 *CSC*
         CLC   SAVER1,=X'00000706'       ABENDS706?               *CSC*
         JNE   COBANAL_EXIT              No, Leave                *CSC*
*                                                                 *CSC*
         STRING64 'Module marked NX (Not Executable)',INTO=RECORD *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         MVC   CSCLPRM(25),=CL25'NX (Not Executable)'             *CSC*
         J     COBANAL_EXIT              Leave
*                                                                 *CSC*
COBANAL_CSV_ERROR DS  0H
         STRING64 'CSVQUERY failed, RC=',((R2),,L),INTO=RECORD
         BRAS  R14,SPACE1
         MVC   RETCODE,=F'12'
         J     COBANAL_EXIT         no, leave
COBANAL_EXIT       DS 0H
         STRING64 FOOTER,INTO=RECORD Write a line of =====        *CSC*
         BRAS  R14,SPACE2                                         *CSC*
*                                                                 *CSC*
         CLC   PGMNAME_GET,XFF      No more members?             PF0608
         JE    COBANAL_EXIT_B       Yes, bypass DELETE           PF0608
         CLI   LOADERR,C'Y'         Did we have a LOAD error?    PF0608
         JNE   COBANAL_EXIT_A       No, go issue DELETE          PF0608
         MVI   LOADERR,C'N'         Yes, reset switch            PF0608
         J     COBANAL_EXIT_B       Bypass DELETE                PF0608
COBANAL_EXIT_A     DS 0H                                         PF0608
         DELETE EPLOC=PGMNAME_GET   Delete the pgm
         LTR   R15,R15              Error on delete?             PF0608
         JZ    COBANAL_EXIT_B       No, bypass error message     PF0608
         ST    R1,SAVER1            Store for display            PF0608
         ST    R15,SAVER15          Store for display            PF0608
         STRING64 'Error during DELETE of program=',PGMNAME_GET, PF0608X
               ' R1=',(SAVER1,,X),' R15=',(SAVER15,,X),          PF0608X
               ' PGMSAV=',PGMNAME_SAV,                           PF0608X
               INTO=RECORD                                       PF0608
         BRAS  R14,SPACE1                                        PF0608
COBANAL_EXIT_B     DS 0H                                         PF0608
         CLC   CSCDATE,BLANKS       Did we get a SUMMARY date?   PF0608
         JNE   COBANAL_EXIT_C       Yes, go print it             PF0608
         CLC   SUM_DATE_SAVE,BLANKS Do we have another date?     PF0608
         JE    COBANAL_EXIT_C       No, have to do without       PF0608
*                                   Compiler date to SUMMARY     PF0608
         STRING64 (SUM_DATE_SAVE,4),'.',                         PF0608X
               (SUM_DATE_SAVE+4,3),INTO=CSCDATE                  PF0608
COBANAL_EXIT_C     DS 0H                                         PF0608
*                                                                 *CSC*
         STRING64 CSCSUMM,INTO=RECORD                             *CSC*
         BRAS  R14,SUMMARY1               Print starting message  *CSC*
         MVI   CSCSUMM,X'40'              Insert a blank          *CSC*
         MVC   CSCSUMM+1(L'CSCSUMM-1),CSCSUMM Repeat to clear     *CSC*
         MVC   SUM_DATE_SAVE,BLANKS  Clear saved date info       PF0608
         MVI   FIXEDSUM,C'N'         Clear SUMMARY-fixed switch  PF0608
         MVI   SETRMODE,C'N'         Clear SUMMARY-fixed switch  RS0316
         MVI   LEFOUND,C'N'       Default                         *CSC*
*                                                                 *CSC*
         CLI   DOALL,C'N'           Default
         JE    COBANAL_FIN
         CLI   DOALL,C'X'           Exclude with wildcards?
         JE    COBANAL_EXIT_1         yes get next
         CLI   DOALL,C'S'           Read fom SYSIN?              RS1207
         JE    COBANAL_EXIT_2         yes get next               RS1207
         CLC   PGMNAME_GET,XFF      Last Program?
         JNE   COBANAL_022            no loop
         J     COBANAL_FIN          finish
COBANAL_EXIT_1     DS 0H
         CLC   PGMNAME_GET,XFF      Last Program?
         JNE   COBANAL_028           no loop
         J     COBANAL_FIN          leave                        RS1207
COBANAL_EXIT_2     DS 0H                                         RS1207
         GET   SYSIN,SYSIN_DATA    get a member name from SYSIN  RS1207
*   End of file??                                                RS1207
         CLI   SYSIN_DATA,C'*'     Comment ?                     RS0209
         JE    COBANAL_EXIT_2        yes ignore                  RS0209
         CLC   PGMNAME_GET,SYSIN_DATA   Same as last one?        PF0608
         JE    COBANAL_EXIT_2      Yes, try the next one         PF0608
         MVC   PGMNAME_GET,SYSIN_DATA   remember PGMNAME         RS1207
         MVC   PGMNAME,PGMNAME_GET  remember PGMNAME             RS1207
         J     COBANAL_026        load programm from             RS1207
COBANAL_FIN        DS 0H
*                                                                 *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_ASSEMBLER     EDIT BMS                 *CSC*
         MVC   TOT_ASSEMBLER(5),WORK+1   Assembler   Total        *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_BMS           EDIT BMS                 *CSC*
         MVC   TOT_BMS(5),WORK+1         BMS         Total        *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_COBOLI        EDIT COBOLI              *CSC*
         MVC   TOT_COBOLI(5),WORK+1      COBOLI      Total        *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_COBOL2        EDIT COBOL2              *CSC*
         MVC   TOT_COBOL2(5),WORK+1      COBOL2      Total        *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_COBOLLE       EDIT LE enabled COBOL    *CSC*
         MVC   TOT_COBOLLE(5),WORK+1     LE COBOL    Total        *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_C370          EDIT C/C++ programs     RS1107
         MVC   TOT_C370(5),WORK+1        C/C++ programs total    RS1107
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_FORTRAN       EDIT FORTRAN programs    *CSC*
         MVC   TOT_FORTRAN(5),WORK+1     FORTRAN     Total        *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_INVALID       EDIT INVALID    COBOL    *CSC*
         MVC   TOT_INVALID(5),WORK+1     INVALID     Total        *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_LEASS         EDIT LE Assemble progrs  *CSC*
         MVC   TOT_LEASS(5),WORK+1       LE Assembler Total       *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_OTHER         EDIT Other programs      *CSC*
         MVC   TOT_OTHER(5),WORK+1       OTHER progs Total        *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_PLI           EDIT PL/I                *CSC*
         MVC   TOT_PLI(5),WORK+1         PLI         Total        *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_TOTAL         EDIT Total   programs    *CSC*
         MVC   TOT_TOTAL(5),WORK+1       Total programs           *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros     *CSC*
         ED    WORK(6),CNT_UNKNOWN       EDIT UNKNOWN programs    *CSC*
         MVC   TOT_UNKNOWN(5),WORK+1     UNKNOWN     Total        *CSC*
         MVC   WORK(6),MASKTOT           Remove leading zeros    PF0608
         ED    WORK(6),CNT_NOTLOAD       EDIT Notloaded programs PF0608
         MVC   TOT_NOTLOAD(5),WORK+1     Notloaded   Total       PF0608
         MVC   WORK(6),MASKTOT           Remove leading zeros    PF0708
         ED    WORK(6),CNT_EZTRV         EDIT EZTrieve+ programs PF0708
         MVC   TOT_EZTRV(5),WORK+1       EZTrieve+   Total       PF0708
*                                                                 *CSC*
         STRING64 FOOTER,INTO=RECORD                             RS0908
         BRAS  R14,SPACE2                                         *CSC*
         STRING64 FOOTER,'========',INTO=RECORD                  RS0908
         BRAS  R14,SUMMARY2                                       *CSC*
         STRING64 '                BMS Maps:',                    *CSC*X
               TOT_BMS,INTO=RECORD                                *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         BRAS  R14,SUMMARY1                                       *CSC*
         STRING64 '             OS/VS/COBOL:',                    *CSC*X
               TOT_COBOLI,INTO=RECORD                             *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         BRAS  R14,SUMMARY1                                       *CSC*
         STRING64 '               VS/COBOL2:',                    *CSC*X
               TOT_COBOL2,INTO=RECORD                             *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         BRAS  R14,SUMMARY1                                       *CSC*
         STRING64 '     LE-conforming COBOL:',                    *CSC*X
               TOT_COBOLLE,INTO=RECORD                            *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         BRAS  R14,SUMMARY1                                       *CSC*
         STRING64 '                   C/C++:',                   RS1107X
               TOT_C370,INTO=RECORD                               *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         BRAS  R14,SUMMARY1                                       *CSC*
         STRING64 '                 FORTRAN:',                    *CSC*X
               TOT_FORTRAN,INTO=RECORD                            *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         BRAS  R14,SUMMARY1                                       *CSC*
         STRING64 '                 INVALID:',                    *CSC*X
               TOT_INVALID,INTO=RECORD                            *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         BRAS  R14,SUMMARY1                                       *CSC*
         STRING64 '               Assembler:',                    *CSC*X
               TOT_ASSEMBLER,INTO=RECORD                          *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         BRAS  R14,SUMMARY1                                       *CSC*
         STRING64 '    LE Enabled Assembler:',                    *CSC*X
               TOT_LEASS,INTO=RECORD                              *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         BRAS  R14,SUMMARY1                                       *CSC*
         STRING64 '                   OTHER:',                    *CSC*X
               TOT_OTHER,INTO=RECORD                              *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         BRAS  R14,SUMMARY1                                       *CSC*
         STRING64 '               EZTrieve+:',                   PF0708X
               TOT_EZTRV,INTO=RECORD                             PF0708
         BRAS  R14,SPACE1                                        PF0708
         BRAS  R14,SUMMARY1                                      PF0708
         STRING64 '                    PL/I:',                    *CSC*X
               TOT_PLI,INTO=RECORD                                *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         BRAS  R14,SUMMARY1                                       *CSC*
         STRING64 '                 UNKNOWN:',                    *CSC*X
               TOT_UNKNOWN,INTO=RECORD                            *CSC*
         BRAS  R14,SPACE2                                         *CSC*
         BRAS  R14,SUMMARY2                                       *CSC*
         STRING64 '   Total loaded Programs:',TOT_TOTAL,          *CSC*X*
               INTO=RECORD
         BRAS  R14,SPACE1                                         *CSC*
         BRAS  R14,SUMMARY1                                       *CSC*
         STRING64 '(includes do not count)',                     PF0608X*
               INTO=RECORD
         BRAS  R14,SPACE2                                         *CSC*
         BRAS  R14,SUMMARY2                                       *CSC*
*                                                                 *CSC*
         STRING64 '     Could not be Loaded:',                   PF0608X
               TOT_NOTLOAD,INTO=RECORD                           PF0608
         BRAS  R14,SPACE1                                        PF0608
         BRAS  R14,SUMMARY1                                      PF0608
         AP    CNT_TOTAL,CNT_NOTLOAD     Add for total processed PF0608
         MVC   WORK(6),MASKTOT           Remove leading zeros    PF0608
         ED    WORK(6),CNT_TOTAL         EDIT Total   programs   PF0608
         MVC   TOT_TOTAL(5),WORK+1       Total programs          PF0608
         STRING64 'Total Programs processed:',                   PF0608X
               TOT_TOTAL,INTO=RECORD                             PF0608
         BRAS  R14,SPACE1                                        PF0608
         BRAS  R14,SUMMARY1                                      PF0608
*                                                                PF0608
COBANAL_FIN_A      DS 0H                                          *CSC*
         LA    R9,SYSPRINT
         USING IHADCB,R9
         TM    DCBOFLGS-IHADCB(R9),DCBOFOPN Is it OPEN?
         JNO   COBANAL_FIN_1              No, ignore it
         MVC   PARMLIST(C_CLOSEL),C_CLOSE
         CLOSE ((R9)),MF=(E,PARMLIST),MODE=31     Close it
         DROP  R9
*                                                                 *CSC*
         CLI   SUMMARYR,C'Y'                                      *CSC*
         JNE   COBANAL_FIN_1                                      *CSC*
         LA    R9,SUMMARY                                         *CSC*
         USING IHADCB,R9                                          *CSC*
         TM    DCBOFLGS-IHADCB(R9),DCBOFOPN Is it OPEN?           *CSC*
         JNO   COBANAL_FIN_1              No, ignore it           *CSC*
         MVC   PARMLIST(C_CLOSEL),C_CLOSE                         *CSC*
         CLOSE ((R9)),MF=(E,PARMLIST),MODE=31     Close it        *CSC*
         DROP  R9                                                 *CSC*
COBANAL_FIN_1      DS 0H
         CLI   DD_COBANAL,C'Y'                                   PF0608
         JNE   COBANAL_FIN_2                                     PF0608
         LA    R9,INPUT
         USING IHADCB,R9
         TM    DCBOFLGS-IHADCB(R9),DCBOFOPN Is it OPEN?
         JNO   COBANAL_FIN_2              No, ignore it
         MVC   PARMLIST(C_CLOSEL),C_CLOSE
         CLOSE ((R9)),MF=(E,PARMLIST),MODE=31     Close it
         DROP  R9
COBANAL_FIN_2      DS 0H
         LA    R9,LOADL                                          PF0608
         USING IHADCB,R9                                         PF0608
         TM    DCBOFLGS-IHADCB(R9),DCBOFOPN Is it OPEN?          PF0608
         JNO   COBANAL_FIN_2A             No, ignore it          PF0608
         MVC   PARMLIST(C_CLOSEL),C_CLOSE                        PF0608
         CLOSE ((R9)),MF=(E,PARMLIST),MODE=31     Close it       PF0608
         DROP  R9                                                PF0608
COBANAL_FIN_2A     DS 0H                                         PF0608
*                                                                PF0608
         CLI   DD_SYSIN,C'Y'                                     PF0608
         JNE   COBANAL_FIN_2B                                     =CMS=
         LA    R9,SYSIN                                          PF0608
         USING IHADCB,R9                                         PF0608
         TM    DCBOFLGS-IHADCB(R9),DCBOFOPN Is it OPEN?          PF0608
         JNO   COBANAL_FIN_3              No, ignore it          PF0608
         MVC   PARMLIST(C_CLOSEL),C_CLOSE                        PF0608
         CLOSE ((R9)),MF=(E,PARMLIST),MODE=31     Close it       PF0608
         DROP  R9                                                PF0608
COBANAL_FIN_2B     DS 0H                                         PF0608
         CLI   JUSTDATA_R,C'Y'                                    =CMS=
         JNE   COBANAL_FIN_3                                      =CMS=
         LA    R9,JUSTDATA                                        =CMS=
         USING IHADCB,R9                                          =CMS=
         TM    DCBOFLGS-IHADCB(R9),DCBOFOPN Is it OPEN?           =CMS=
         JNO   COBANAL_FIN_3              No, ignore it           =CMS=
         MVC   PARMLIST(C_CLOSEL),C_CLOSE                         =CMS=
         CLOSE ((R9)),MF=(E,PARMLIST),MODE=31     Close it        =CMS=
         DROP  R9                                                 =CMS=
COBANAL_FIN_3      DS 0H                                         PF0608
*        Freemain area for IEWBIND
         L     R0,BNLI_BUFFER_LENG
         L     R1,IEW_BNLI_PTR
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)
         L     R0,IDLI_BUFFER_LENG                               RS1007
         L     R1,IEW_IDLI_PTR                                   RS1007
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)                   RS1007
         L     R0,ESDI_BUFFER_LENG                               RS1007
         L     R1,IEW_ESDI_PTR                                   RS1007
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)                   RS1007
         L     R0,IDUI_BUFFER_LENG                               RS1007
         L     R1,IEW_IDUI_PTR                                   RS1007
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)                   RS1007
         L     R0,IDZI_BUFFER_LENG                               RS1007
         L     R1,IEW_IDZI_PTR                                   RS1007
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)                   RS1007
         L     R0,IDBI_BUFFER_LENG                               RS1007
         L     R1,IEW_IDBI_PTR                                   RS1007
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)                   RS1007
         L     R8,RETCODE                                        RS1107
         LAY   R0,COBANAL_WORK_LENGTH                            RS1206
         STORAGE RELEASE,              free Storage                    X
               LENGTH=(R0),            Length                          X
               ADDR=((R11))
         LR    R15,R8                                            RS1107
         PR
*------------------------------------------------------------*
* Binder Info                                                *
* The code reside at this location as the LOAD macro         *
* on OS/390 R10 require a base register. At z/OS R4          *
* the LOAD macro works without a base register!!!            *
*------------------------------------------------------------*
*
BINDER_INFO DS 0H
         mvc   PGMNAME_sav,PGMNAME_GET                           HP1107
         ST    R14,BINDSAVE
         STRING64 ADDINFO,INTO=RECORD                             *CSC*
         BRAS  R14,SPACE1
         STRING64 '------------ about the Binder          -----------',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
         STRING64 'This program contains the following CSECTS',        X
               INTO=RECORD
         BRAS  R14,SPACE2                                        RS1007
         L     R4,IEW_BNLI_PTR
         USING IEWBBNL,R4
         LA    R5,BNLH_END
         USING BNL_ENTRY,R5
*        IEWBUFF FUNC=INITBUF,TYPE=NAME    Init the buffer
         MVC   IEWBBNL(BNLH_LENG),BNLI_INIT_VALUES
         MVC   IEW_DTOKEN,=D'0'       Clear dialog token
*        Clear WKTOKEN here in case STARTD fails                 PF0608
         MVC   IEW_WKTOKEN,=D'0'      Clear workmod token        PF0608
         MVC   IEWBIND_FUNCTION,=CL8'STARTD'                      *CSC*
         DEVTYPE =CL8'BINDEROU',DOUBLE    Get BINDEROU informationS1007
         LTR   R15,R15                    Is it allocated?       RS1007
         JNZ   BINDER_INFO_01             No, continue           RS1007
         IEWBIND FUNC=STARTD,     Start dialog with Debug-File         X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               DIALOG=IEW_DTOKEN,                                      X
               FILES=FILELIST,           <- Has file list for print    X
               OPTIONS=OPTLIST3,         <- Has term off and print on  X
               VERSION=4,                                              X
               MF=(E,IEWBIND)                                    RS1007
         J     BINDER_INFO_02             jump around            RS1007
BINDER_INFO_01 DS 0H                                             RS1007
         IEWBIND FUNC=STARTD,     Start dialog                         X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               DIALOG=IEW_DTOKEN,                                      X
               VERSION=4,                                              X
               MF=(E,IEWBIND)
BINDER_INFO_02 DS 0H                                             RS1007
         CLC   RSNCODE,=F'0'      Check the reason code
         JE    BINDER_INFO_03     Zero, OK to continue           PF0608
         MVC   IEW_DTOKEN,XFF     Remember no dialog was started PF0608
         J     BINDER_ERROR       Exit, bad STARTD               PF0608
BINDER_INFO_03 DS 0H                                             PF0608
         MVC   IEWBIND_FUNCTION,=CL8'CREATEW'                     *CSC*
         IEWBIND FUNC=CREATEW,    Create workmod Access only           X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               WORKMOD=IEW_WKTOKEN,                                    X
               DIALOG=IEW_DTOKEN,                                      X
               INTENT=ACCESS,                                          X
               VERSION=4,                                              X
               MF=(E,IEWBIND)
*        STRING64 'CREATEW: RC: ',(IRETCODE,,X),' RSN: ',(RSNCODE,,X), X
               'DTOKEN: ',(IEW_DTOKEN,,X),                             X
               INTO=RECORD
*        BRAS  R14,SPACE1
         CLC   RSNCODE,=F'0'      Check the reason code
         JE    BINDER_INFO_031    Zero, OK to continue           PF0608
         MVC   IEW_WKTOKEN,XFF    Remember we have no workmod    PF0608
         J     BINDER_ERROR       Exit, bad CREATEW              PF0608
BINDER_INFO_031 DS 0H                                            PF0608
         DEVTYPE =CL8'BINDEROU',DOUBLE  Get BINDEROU information RS1007
         LTR   R15,R15                  Is it allocated?         RS1007
         JNZ   BINDER_INFO_04           No, continue             RS1007
         MVC   IEWBIND_FUNCTION,=CL8'SETO'                       RS1007
         IEWBIND FUNC=SETO,        Set Options                         X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               WORKMOD=IEW_WKTOKEN,                                    X
               OPTION=O_LIST,OPTVAL=V_ALL,      LIST(ALL)              X
               VERSION=4,                                              X
               MF=(E,IEWBIND)                                    RS1007
*        STRING64 'INCLUDE: RC: ',(IRETCODE,,X),' RSN: ',(RSNCODE,,X), X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1                                        RS1007
         CLC   RSNCODE,=F'0'      Check the reason code          RS1007
         JNE   BINDER_ERROR       Exit if not zero               RS1007
BINDER_INFO_04 DS 0H                                             RS1007
         MVC   IEWBIND_FUNCTION,=CL8'INCLUDE'                     *CSC*
* Try INCLUDE from EPTOKEN first, then use NAME and COBANAL if   PF0608
* EPTOKEN attempt gets RC=8, RSN=83000514                        PF0608
         IEWBIND FUNC=INCLUDE,                                         X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               WORKMOD=IEW_WKTOKEN,                                    X
               INTYPE=TOKEN,                                           X
               EPTOKEN=CSV_EPTOKEN,                                    X
               VERSION=4,                                              X
               MF=(E,IEWBIND)
*        STRING64 'INCLUDE: RC= ',(IRETCODE,,X),                 PF0608X
               '   INADDR=',(ADR_PGMNAME,,X),                    PF0608X
               ' OUTLOADP=',(CSV_LOADPT,,X),                     PF0608X
               ' IEWTOKEN=',(IEW_WKTOKEN,,X),                    PF0608X
               '  EPTOKEN=',(CSV_EPTOKEN,,X),                    PF0608X
               INTO=RECORD                                       PF0608
*        BRAS  R14,SPACE1                                        PF0608
*        STRING64 'INCLUDE: RC: ',(IRETCODE,,X),' RSN: ',(RSNCODE,,X), X
               INTO=RECORD
*        BRAS  R14,SPACE1
         CLC   RSNCODE,=F'0'      Check the reason code
         JE    BINDER_INFO_05     Continue if zero               PF0608
* Possible INCLUDE error, check to see if it is only a warning   PF0608
         CLC   IRETCODE,=F'4'     Warning only?                  PF0608
         JNH   BINDER_INFO_05     Yes, OK to continue            PF0608
* INCLUDE error, check to see if we can retry with NAME/DDN/MBR  PF0608
         CLC   RSNCODE,=X'83000514' Retryable reason code?       PF0608
         JNE   BINDER_ERROR       No, don't retry                PF0608
         CLI   DD_COBANAL,C'Y'    Do we have a COBANAL DD?       PF0608
         JNE   BINDER_ERROR       No, can't try INCLUDE again    PF0608
* OK, we can retry INCLUDE with NAME/DDN/MBR                     PF0608
* First a message saying what has happened                       PF0608
         STRING64 'EPTOKEN access to the load module failed,',   PF0608X
               ' trying NAME access',                            PF0608X
               INTO=RECORD                                       PF0608
         BRAS  R14,SPACE1                                        PF0608
         BRAS  R14,PGMNAME_2_MBR  Move PGMNAME to IEW_MBR        PF0708
* Now retry the INCLUDE with NAME/DDN/MBR                        PF0608
         IEWBIND FUNC=INCLUDE,                                   PF0608X
               RETCODE=IRETCODE,                                 PF0608X
               RSNCODE=RSNCODE,                                  PF0608X
               WORKMOD=IEW_WKTOKEN,                              PF0608X
               INTYPE=NAME,                                      PF0608X
               DDNAME=IEW_DDN,                                   PF0608X
               MEMBER=IEW_MBR,                                   PF0608X
               VERSION=4,                                        PF0608X
               MF=(E,IEWBIND)                                    PF0608
*        STRING64 'INCLUDE: RC= ',(IRETCODE,,X),                 PF0608X
               '   INADDR=',(ADR_PGMNAME,,X),                    PF0608X
               ' OUTLOADP=',(CSV_LOADPT,,X),                     PF0608X
               ' IEWTOKEN=',(IEW_WKTOKEN,,X),                    PF0608X
               INTO=RECORD                                       PF0608
*        BRAS  R14,SPACE1                                        PF0608
*        STRING64 'INCLUDE: ',                                   PF0608X
               '  DD NAME=',IEW_DDNN,                            PF0608X
               ' MBR LENG=',(IEW_MBRL,,X),                       PF0608X
               ' MBR NAME=',IEW_MBRN,                            PF0608X
               INTO=RECORD                                       PF0608
*        BRAS  R14,SPACE1                                        PF0608
*        STRING64 'INCLUDE: RC: ',(IRETCODE,,X),' RSN: ',        PF0608X
               (RSNCODE,,X),INTO=RECORD                          PF0608
*        BRAS  R14,SPACE1                                        PF0608
         CLC   RSNCODE,=F'0'      Check the reason code          PF0608
         JE    BINDER_INFO_05     Continue if zero               PF0608
* Possible INCLUDE error, check to see if it is only a warning   PF0608
         CLC   IRETCODE,=F'4'     Warning only?                  PF0608
         JH    BINDER_ERROR       No, signal error               PF0608
BINDER_INFO_05 DS 0H                                             PF0608
         MVC   IEW_CURSORN,=F'0'      Clear Cursor
         MVC   IEWBIND_FUNCTION,=CL8'GETN'                        *CSC*
         IEWBIND FUNC=GETN,                                            X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               WORKMOD=IEW_WKTOKEN,                                    X
               AREA=IEWBBNL,                                           X
               CURSOR=IEW_CURSORN,                                     X
               COUNT=IEW_COUNTN,                                       X
               TCOUNT=IEW_TCOUNT,                                      X
               NTYPE=S,                                                X
               VERSION=4,                                              X
               MF=(E,IEWBIND)
*        STRING64 '   GETN: RC: ',(IRETCODE,,X),' RSN: ',(RSNCODE,,X), X
               'COUNT: ',(IEW_COUNTN,,X),' Token: ',(IEW_WKTOKEN,,X),  X
               INTO=RECORD
*        BRAS  R14,SPACE1
*
*        Dump the first 256 Bytes for Identification.
*        Should be activated only in case of problems
*        STRING64 4X,((R8),4,X),1X,(4(R8),4,X),1X,(8(R8),4,X),1X,      X
               (12(R8),4,X),3X,((R8),16),                              X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 4X,(16(R8),4,X),1X,(20(R8),4,X),1X,(24(R8),4,X),1X,  X
               (28(R8),4,X),3X,(16(R8),16),                            X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 4X,((R9),4,X),1X,(4(R9),4,X),1X,(8(R9),4,X),1X,      X
               (12(R9),4,X),3X,((R9),16),                              X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 4X,(16(R9),4,X),1X,(20(R9),4,X),1X,(24(R9),4,X),1X,  X
               (28(R9),4,X),3X,(16(R9),16),                            X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
         CLC   RSNCODE,=F'0'      Check reason code
         JE    BINDER_INFO_10     continue if zero
         CLC   IRETCODE,=F'4'     Do we have all the names
         JH    BINDER_ERROR       Any higher is an error
*                                                                 *CSC*
BINDER_INFO_10 DS 0H
         L     R12,IEW_COUNTN     Number of sections
*        BCTR  R12,0              Not -1! Process all names      PF0608
*loop
BINDER_INFO_20 DS 0H
         L     R3,BNL_NAME_PTR    Extract section name
         MVC   IEW_SECTION_DATA(255),BLANKS                      PF0608
         LH    R2,BNL_NAME_CHARS
         STH   R2,IEW_SECTION_LEN                                PF0608
         STRING64 (0(R3),(R2),),INTO=IEW_SECTION_DATA Name       PF0608
         CLI   LEFOUND,C'Y'                                       *CSC*
         JE    BINDER_INFO_30                                    RS1007
         CLC   CSCLANG(9),=CL9'Unknown'                          RS1107
         JE    BINDER_INFO_30                                    RS1107
         CLI   FIXEDSUM,C'Y'      Did it start out as UNKNOWN?   PF0608
         JE    BINDER_INFO_30     Yes, don't update LE column    PF0608
         MVC   CSCLE(3),=CL3'NO '                                 *CSC*
         CLC   0(3,R3),=CL3'CEE'                                  *CSC*
         JNE   BINDER_INFO_30                                    RS1007
         MVC   CSCLE(3),=CL3'YES'                                 *CSC*
         MVI   LEFOUND,C'Y'                                       *CSC*
BINDER_INFO_30 DS 0H                                             RS1007
         LH    R8,IEW_SECTION_LEN                                PF0608
         STRING64 2X,(IEW_SECTION_DATA,(R8),),INTO=RECORD        PF0608
         MVC   WORK,BLANKS        Keep it for later              RS1107
         STRING64 (IEW_SECTION_DATA,(R8),),INTO=WORK             PF0608
         CLI   IEW_SECTION_DATA,X'00'                            PF0608
         JNE   BINDER_INFO_30_NOPRIV                             RS1007
         STRING64 2X,'$PRIV',(IEW_SECTION_DATA,4,X),INTO=RECORD  PF0608
BINDER_INFO_30_NOPRIV DS 0H                                      RS1007
         BRAS  R14,SPACE1          <== next line                 RS1007
         LH    R8,IEW_SECTION_LEN                                PF0608
         MVC   IEW_CURSORD,=F'0'      Clear Cursor               RS1007
         STM   R4,R5,SAVER4_AND_R5                               RS1007
         L     R4,IEW_IDLI_PTR                                   RS1007
         USING IEWBIDL,R4                                        RS1007
*        IEWBUFF FUNC=INITBUF,TYPE=IDL     Init the buffer       RS1007
         MVC   IEWBIDL(IDLH_LENG),IDLI_INIT_VALUES               RS1007
         MVC   IEWBIND_FUNCTION,=CL8'GETD-IDL'                   RS1007
         LA    R5,IDLH_END                                       RS1007
         USING IDL_ENTRY,R5                                      RS1007
         IEWBIND FUNC=GETD,                                            X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               WORKMOD=IEW_WKTOKEN,                                    X
               CLASS=IEW_IDL,                                          X
               SECTION=IEW_SECTION,                                    X
               AREA=IEWBIDL,                                           X
               CURSOR=IEW_CURSORD,                                     X
               COUNT=IEW_COUNTD,                                       X
               VERSION=4,                                              X
               MF=(E,IEWBIND)                                    RS1007
*        STRING64 '   GETD: IDL ',(IRETCODE,,X),' RSN: ',(RSNCODE,,X), X
               'COUNT: ',(IEW_COUNTD,,X),' Token: ',(IEW_WKTOKEN,,X),  X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1                                        RS1007
         CLC   RSNCODE,=F'0'      Check reason code              RS1007
         JE    BINDER_INFO_31     continue if zero               RS1007
*        CLC   IRETCODE,=F'4'     Do we have all the names       RS1007
*        JH    BINDER_ERROR       Any higher is an error         RS1007
BINDER_INFO_31 DS 0H                                             RS1007
*        Should be activated only in case of problems            RS1007
*        STRING64 4X,((R4),4,X),1X,(4(R4),4,X),1X,(8(R4),4,X),1X,      X
               (12(R4),4,X),3X,((R4),16),                              X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(16(R4),4,X),1X,(20(R4),4,X),1X,(24(R4),4,X),1X,  X
               (28(R4),4,X),3X,(16(R4),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE2          <== next line                 RS1007
         MVC   CSECT_ACT_KZ(2),BLANKS  LANGUAGE-KZ               RS1107
         L     R10,IEW_COUNTD            Number of sections      RS1007
         LTR   R10,R10                                           RS1007
         JNZ   BINDER_INFO_32          Have some, go analyze     PF0608
         CLI   IEW_SECTION_DATA,X'00'  Binder-level name?        PF0608
         JE    BINDER_INFO_31_1        Yes, don't save here      RS1007
         LARL  R10,PID_TABLE_LAST      None avail, initialize    PF0608
         ST    R10,ADR_PIDENTRY        Save for ESD scan         PF0608
*        MVC   2(10,R10),=CL10'UnknownPID' Set PID to UNKNOWN    KP0609
         CLC   SUM_DATE_SAVE,BLANKS    Any date saved yet?       PF0608
         JNE   BINDER_INFO_31_1        Yes, don't change it      PF0608
         MVC   SUM_DATE_SAVE,BLANKS    Clear for SUMMARY         PF0608
         MVC   SUM_DATE_SAVE(9),=CL9'Unknown' Set to UNKNOWN     PF0608
BINDER_INFO_31_1 DS 0H                                           PF0608
         CLC   =CL9'Unknown',CSCLANG   Is main unknown?          PF0608
         JNE   BINDER_INFO_40          No, leave SUMMARY alone   PF0608
         MVC   CSCCOMP(17),=CL17'No info available'              PF0608
         J     BINDER_INFO_40          Leave, no entries at all  PF0608
*        BCTR  R10,0               Not -1, process all entries   PF0608
BINDER_INFO_32 DS 0H                                             RS1007
         MVC   SUM_DATE_SAVE,IDL_DATE_PROCESSED Save for SUMMARY PF0608
         USING IDL_ENTRY,R5                                      RS1007
         STRING64 11X,' B_IDRL ',                                      X
               (IDL_DATE_PROCESSED,4),'.',                             X
               (IDL_DATE_PROCESSED+4,3),1X,(IDL_PID_ID,10),            X
               ' V',IDL_VERSION,                                       X
               ' M',IDL_MOD_LEVEL,INTO=RECORD                    RS1007
         BRAS  R9,BINDER_INFO_32_1                               RS1007
*   Most taken from Dave Alcock                                  RS1007
*   Add indicators for all languages and sort by indicator/lang  PF0608
*   and put it into a separate copy member to ease maintenance   PF0608
*>---------------------------------------------------------------HP1107
         COPY  PIDTABLE                                          PF0608
PID_TABLE_LAST DS 0H                                             PF0608
    dc XL2'0',cl10'UnknownPID',CL8'Unknown'        end of table  KP0609
BINDER_INFO_32_1 DS 0H                                           RS1007
** table suffix 2byte for additional csect-analysis
         CLC   IDL_PID_ID(10),2(R9)         check                HP1107
         JE    BINDER_INFO_32_2        jump if on                RS1007
         LA    R9,20(,R9)              Skip entry                HP1107
         CLI   0(R9),0                 end of table?             RS1007
         JNE   BINDER_INFO_32_1        not yet, loop             RS1007
BINDER_INFO_32_2 DS 0H                                           RS1007
         MVC   RECORD+47(8),12(R9)     long text for PID         HP1107
         mvc   csect_act_kz(2),0(r9)   language-kz               HP1107
         ST    R9,ADR_PIDENTRY         Save entry for ESD scan   PF0608
*        CLI   0(R9),0                 End of table?             KP0609
*        JNE   BINDER_INFO_32_3        No, don't copy Binder PID KP0609
*        MVC   2(10,R9),IDL_PID_ID     Copy unknown PID to table KP0609
BINDER_INFO_32_3 DS 0H                                           PF0608
         CLC   =CL9'Unknown',CSCLANG   Is main unknown?          PF0608
         JE    BINDER_INFO_32_31       Yes, try to fix language  PF0708
         CLC   =CL9'*INVALID',CSCLANG  Is main invalid?          RS0316
         JE    BINDER_INFO_32_30       Yes, try to fix language  RS0316
         J     BINDER_INFO_32_5        No, leave SUMMARY alone   RS0316
BINDER_INFO_32_30 DS 0H          Adjust counter and reset RC     RS0316
         MVC   RETCODE,=F'0'           Reset RC                  RS0316
         SP    CNT_INVALID,=P'1'  Subtract from INVALID count    RS0316
         AP    CNT_UNKNOWN,=P'1'  Add from UNKNOWN count         RS0316
BINDER_INFO_32_31 DS 0H                                          PF0608
         CLC   PGMNAME_GET,WORK        Section name = LOAD name? PF0608
         JE    BINDER_INFO_32_4        Yes, go fix SUMMARY       PF0708
         CLC   =CL8'MAIN',WORK   Section name = MAIN = FORTRAN?  PF0708
         JNE   BINDER_INFO_32_5        No, leave SUMMARY alone   PF0708
BINDER_INFO_32_4 DS 0H                                           PF0708
         MVI   FIXEDSUM,C'Y'           Remember we fixed this    PF0608
         MVC   CSCLANG(8),12(R9)       Compiler name to SUMMARY  PF0608
         MVC   CSCCOMP,02(R9)          PID, compname to SUMMARY  PF0608
*                                      Compiler date to SUMMARY  PF0608
         STRING64 (IDL_DATE_PROCESSED,4),'.',                    PF0608X
               (IDL_DATE_PROCESSED+4,3),INTO=CSCDATE             PF0608
         BRAS  R14,ADJUST_COUNTS       Adjust language counts    PF0608
*>---------------------------------------------------------------HP1107
BINDER_INFO_32_5 DS 0H                                           PF0708
         BRAS  R14,SPACE1          <== next line
*        CLI   IDL_ENTRY+28,X'00'  Don't check here for more     PF0608
*        JE    BINDER_INFO_33      entries, will process all     PF0608
         J     BINDER_INFO_34    Go check for more entries       PF0608
BINDER_INFO_32_6 DS 0H           Here for 2nd etc. IDRL entries  PF0708
         STRING64 11X,' B_IDRL ',                                PF0608X
               (IDL_DATE_PROCESSED,4),'.',                       PF0608X
               (IDL_DATE_PROCESSED+4,3),1X,(IDL_PID_ID,10),      PF0608X
               ' V',IDL_VERSION,                                 PF0608X
               ' M',IDL_MOD_LEVEL,INTO=RECORD                    PF0608
         BRAS  R14,SPACE1          <== next line                 RS1007
BINDER_INFO_33 DS 0H                                             RS1007
*        STM   R14,R3,SNAPREGS         save registers            RS1007
*        STRING64 '0-3 ',(SNAPREGS+08,4,X),1X,(SNAPREGS+12,4,X),       X
               1X,(SNAPREGS+16,4,X),1X,(SNAPREGS+20,4,X),              X
               '  4-7 ',((R4),,X),1X,((R5),,X),                        X
               1X,((R6),,X),1X,((R7),,X),INTO=RECORD             RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 '8-B ',((R8),,X),1X,((R9),,X),1X,((R10),,X),         X
               1X,((R11),,X),'  C-F ',((R12),,X),1X,((R13),,X),        X
               1X,(SNAPREGS+00,4,X),1X,(SNAPREGS+04,4,X),INTO=RECORD
*        BRAS  R14,SPACE2          <== next line                 RS1007
*        STRING64 4X,((R5),4,X),1X,(4(R5),4,X),1X,(8(R5),4,X),1X,      X
               (12(R5),4,X),3X,((R5),16),                              X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(16(R5),4,X),1X,(20(R5),4,X),1X,(24(R5),4,X),1X,  X
               (28(R5),4,X),3X,(16(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(32(R5),4,X),1X,(36(R5),4,X),1X,(40(R5),4,X),1X,  X
               (44(R5),4,X),3X,(32(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(48(R5),4,X),1X,(52(R5),4,X),1X,(56(R5),4,X),1X,  X
               (60(R5),4,X),3X,(48(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(64(R5),4,X),1X,(68(R5),4,X),1X,(72(R5),4,X),1X,  X
               (76(R5),4,X),3X,(64(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(80(R5),4,X),1X,(84(R5),4,X),1X,(88(R5),4,X),1X,  X
               (92(R5),4,X),3X,(80(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(96(R5),4,X),1X,(100(R5),4,X),1X,(104(R5),4,X),1X,X
               (108(R5),4,X),3X,(96(R5),16),                           X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(112(R5),4,X),1X,(114(R5),4,X),1X,(116(R5),4,X),1X,
               (122(R5),4,X),3X,(112(R5),16),                          X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE2          <== next line                 RS1007
BINDER_INFO_34 DS 0H                                             RS1007
         LTR   R10,R10              Only one entry?              RS1007
         JZ    BINDER_INFO_40     yes, leave                     RS1007
         A     R5,IDLH_ENTRY_LENG   Move to next section name    RS1007
         BRCT  R10,BINDER_INFO_32_6 Just print info for 2nd etc. PF0708
*endloop
BINDER_INFO_40 DS 0H
         MVC   IEW_CURSORD,=F'0'      Clear Cursor               RS1007
         L     R4,IEW_ESDI_PTR                                   RS1007
         USING IEWBESD,R4                                        RS1007
*        IEWBUFF FUNC=INITBUF,TYPE=ESD     Init the buffer       RS1007
         MVC   IEWBESD(ESDH_LENG),ESDI_INIT_VALUES               RS1007
         MVC   IEWBIND_FUNCTION,=CL8'GETD-ESD'                   RS1007
         LA    R5,ESDH_END                                       RS1007
         USING ESD_ENTRY,R5                                      RS1007
         IEWBIND FUNC=GETD,                                            X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               WORKMOD=IEW_WKTOKEN,                                    X
               CLASS=IEW_ESD,                                          X
               SECTION=IEW_SECTION,                                    X
               AREA=IEWBESD,                                           X
               CURSOR=IEW_CURSORD,                                     X
               COUNT=IEW_COUNTD,                                       X
               VERSION=4,                                              X
               MF=(E,IEWBIND)                                    RS1007
*        STRING64 '   GETD: ESD ',(IRETCODE,,X),' RSN: ',(RSNCODE,,X), X
               'COUNT: ',(IEW_COUNTD,,X),' Token: ',(IEW_WKTOKEN,,X),  X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1                                        RS1007
         CLC   RSNCODE,=F'0'      Check reason code              RS1007
         JE    BINDER_INFO_41     continue if zero               RS1007
*        CLC   IRETCODE,=F'4'     Do we have all the names       RS1007
*        JH    BINDER_ERROR       Any higher is an error         RS1007
BINDER_INFO_41 DS 0H                                             RS1007
*                                                                RS1007
*        Should be activated only in case of problems            RS1007
*        STRING64 4X,((R4),4,X),1X,(4(R4),4,X),1X,(8(R4),4,X),1X,      X
               (12(R4),4,X),3X,((R4),16),                              X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(16(R4),4,X),1X,(20(R4),4,X),1X,(24(R4),4,X),1X,  X
               (28(R4),4,X),3X,(16(R4),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE2          <== next line                 RS1007
         L     R10,IEW_COUNTD            Number of sections      RS1007
         LTR   R10,R10                                           RS1007
         JZ    BINDER_INFO_50                                    RS1007
         BCTR  R10,0                     -1                      RS1007
         USING ESD_ENTRY,R5                                      RS1007
BINDER_INFO_42 DS 0H                                             RS1007
         MVC   ESDNAME,BLANKS       Initialize ESD name          PF0608
         LH    R8,IEW_SECTION_LEN   Length of ESD name           PF0608
         STRING64 (IEW_SECTION_DATA,(R8),),INTO=ESDNAME          PF0608
         CLC   ESD_TYPE,=C'SD'      Control section?             PF0608
         JNE   BINDER_INFO_42_AMX   No, go check for Element Def PF0608
         CLC   CSCAM,BLANKS         Already have AMODE?          PF0608
         JNE   BINDER_INFO_42_AMX   Yes, go check for Element DefPF0608
         CLI   FIXEDSUM,C'Y'        Fixed SUMMARY line?          PF0608
         JE    BINDER_INFO_42_AM0   Yes, go get AMODE            PF0608
         CLC   =CL9'Unknown',CSCLANG Is language UNKNOWN?        PF0608
         JNE   BINDER_INFO_43       No, done with this element   PF0608
BINDER_INFO_42_AM0 DS 0H                                         PF0608
         CLC   PGMNAME_GET,ESDNAME  ESD name = LOAD name?        PF0608
         JNE   BINDER_INFO_43       No, leave SUMMARY alone      PF0608
         STRING64 '???',INTO=CSCAM  Start with unknown value     PF0608
         CLI   ESD_AMODE,X'00'      Unspecified?                 PF0608
         JNE   BINDER_INFO_42_AM1   No, keep checking            PF0608
BINDER_INFO_42_AM1 DS 0H                                         PF0608
         CLI   ESD_AMODE,X'01'      24-bit?                      PF0608
         JNE   BINDER_INFO_42_AM2   No, keep checking            PF0608
         STRING64 '24 ',INTO=CSCAM  Set 24-bit in SUMMARY        PF0608
         J     BINDER_INFO_43       Done with this element       PF0608
BINDER_INFO_42_AM2 DS 0H                                         PF0608
         CLI   ESD_AMODE,X'02'      31-bit?                      PF0608
         JNE   BINDER_INFO_42_AM3   No, keep checking            PF0608
         STRING64 '31 ',INTO=CSCAM  Set 31-bit in SUMMARY        PF0608
         J     BINDER_INFO_43       Done with this element       PF0608
BINDER_INFO_42_AM3 DS 0H                                         PF0608
         CLI   ESD_AMODE,X'03'      ANY?                         PF0608
         JNE   BINDER_INFO_42_AM4   No, keep checking            PF0608
         STRING64 'ANY',INTO=CSCAM  Set ANY in SUMMARY           PF0608
         J     BINDER_INFO_43       Done with this element       PF0608
BINDER_INFO_42_AM4 DS 0H                                         PF0608
         CLI   ESD_AMODE,X'06'      64-bit?                      PF0608
         JNE   BINDER_INFO_42_AMX   No, keep checking            PF0608
         STRING64 '64 ',INTO=CSCAM  Set 64-bit in SUMMARY        PF0608
         J     BINDER_INFO_43       Done with this element       PF0608
BINDER_INFO_42_AMX DS 0H                                         PF0608
         CLC   ESD_TYPE,=C'ED'      Element Defnintion?          PF0608
         JNE   BINDER_INFO_42_CSX   No, go check for Label Def   PF0608
         CLC   CSCRMODE,BLANKS      Already set RMODE?           PF0608
         JNE   BINDER_INFO_42_RMX   Yes, done with RMODE analysisPF0608
         CLI   FIXEDSUM,C'Y'        Fixed SUMMARY line?          PF0608
         JE    BINDER_INFO_42_RMX   Yes, go get RMODE            PF0608
         CLC   =CL9'Unknown',CSCLANG Is language UNKNOWN?        PF0608
         JNE   BINDER_INFO_42_RMX   No, done with RMODE analysis PF0608
         CLC   PGMNAME_GET,WORK        Section name = LOAD name? PF0608
         JE    BINDER_INFO_42_RM1      Yes, go get RMODE         PF0608
         CLC   OFF_PGMNAME,ESD_CLASS_OFFSET At EP offset?        PF0608
         JNE   BINDER_INFO_42_RMX   No, done with RMODE analysis PF0608
BINDER_INFO_42_RM1 DS 0H                                         PF0608
         STRING64 '???',INTO=CSCRMODE Start with unknown value   PF0608
         CLI   ESD_RMODE,X'00'      Unspecified?                 PF0608
         JE    BINDER_INFO_42_RMX   Yes, done with RMODE analysisPF0608
         CLI   ESD_RMODE,X'01'      24-bit?                      PF0608
         JNE   BINDER_INFO_42_RM2   No, keep checking            PF0608
         STRING64 '24 ',INTO=CSCRMODE Set 24-bit in SUMMARY      PF0608
         J     BINDER_INFO_42_RMX   Done with RMODE analysis     PF0608
BINDER_INFO_42_RM2 DS 0H                                         PF0608
         CLI   ESD_RMODE,X'03'      ANY?                         PF0608
         JNE   BINDER_INFO_42_RMX   No, done with RMODE analysis PF0608
         STRING64 'ANY',INTO=CSCRMODE Set ANY in SUMMARY         PF0608
BINDER_INFO_42_RMX DS 0H                                         PF0608
         CLC   PGMNAME_GET,ESDNAME  ESD name = LOAD name?        RS0316
         JE    BINDER_INFO_42_RMX1  Yes, go set RMODE            RS0316
         CLI   SETRMODE,C'Y'        Set RMODE done?              RS0316
         JE    BINDER_INFO_42_RMY   Yes, no need to fix it twice RS0316
BINDER_INFO_42_RMX1 DS 0H                                        RS0316
         MVI   SETRMODE,C'Y'        Fixed SUMMARY line?          RS0316
         MVC   BLDL_FF,=H'1'         number of entries           RS0516
         MVC   BLDL_LL,=H'74'        lenght of entry             RS0516
         MVC   BLDL_NAME,PGMNAME_GET name                        RS0516
         BLDL  LOADL,BLDLLIST,NOCONNECT                          RS0516
*        LA    R9,BLDLLIST
*        STRING64 4X,((R9),4,X),1X,(4(R9),4,X),1X,(8(R9),4,X),1X,      X
               (12(R9),4,X),3X,((R9),16),                              X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 4X,(16(R9),4,X),1X,(20(R9),4,X),1X,(24(R9),4,X),1X,  X
               (28(R9),4,X),3X,(16(R9),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line
*        STRING64 4X,(32(R9),4,X),1X,(36(R9),4,X),1X,(40(R9),4,X),1X,  X
               (44(R9),4,X),3X,(32(R9),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line
         STRING64 '24',INTO=CSCRM    Start with RMODE 24         RS0516
         TM    DIRATTR3,DIRRMANY    RMODE ANY specified          RS0516
         JNO   BINDER_INFO_42_RMY   Yes, done with RMODE analysisRS0516
         STRING64 'ANY',INTO=CSCRM    Set ANY in SUMMARY         RS0516
BINDER_INFO_42_RMY DS 0H                                         RS0516
         CLI   FIXEDSUM,C'Y'        Fixed SUMMARY line?          PF0608
         JE    BINDER_INFO_42_UNX   Yes, no need to fix it twice PF0608
         CLC   =CL9'Unknown',CSCLANG   Is main still unknown?    PF0608
         JNE   BINDER_INFO_42_UNX      No, leave SUMMARY alone   PF0608
         CLC   PGMNAME_GET,WORK        Section name = LOAD name? PF0608
         JE    BINDER_INFO_42_UN2      Yes, go fix SUMMARY       PF0608
         CLC   OFF_PGMNAME,ESD_CLASS_OFFSET At EP offset?        PF0608
         JL    BINDER_INFO_42_UNX      EP earlier, so done now   PF0608
         JH    BINDER_INFO_42_UN1      Might be here, go check   PF0608
* OK, this ESD is the entry point of the load module             PF0608
         CLC   =CL8'MAIN',ESDNAME   ESD name = MAIN = FORTRAN?   PF0608
         JNE   BINDER_INFO_42_UN2   No, go fix SUMMARY           PF0608
* Not only EP, probably FORTRAN of some kind so set up PID Entry PF0608
         L     R9,ADR_PIDENTRY      Check if PID is Unknown      PF0708
         CLI   0(R9),0              Unknown entry is zeroes      PF0708
         JNE   BINDER_INFO_42_UN2   Not unknown, leave it alone  PF0708
         LARL  R9,PID_ENTRY_UNKFORT Get a(Unknown FORTRAN entry) PF0608
         ST    R9,ADR_PIDENTRY      Save A(PID Table entry)      PF0608
         J     BINDER_INFO_42_UN2      Now go fix SUMMARY        PF0708
BINDER_INFO_42_UN1 DS 0H                                         PF0608
         L     R15,ESD_LENG         Compute ESD end offset       PF0608
         A     R15,ESD_CLASS_OFFSET                              PF0608
         C     R15,OFF_PGMNAME      Is end offset > Entry Offset?PF0608
         JNH   BINDER_INFO_42_UNX   No, Entry Pt. not here       PF0608
BINDER_INFO_42_UN2 DS 0H                                         PF0608
         MVI   FIXEDSUM,C'Y'           Remember we fixed this    PF0608
         L     R9,ADR_PIDENTRY         Get A(PID Table entry)    PF0608
         MVC   CSCLANG(8),12(R9)       Compiler name to SUMMARY  PF0608
         MVC   CSCCOMP,02(R9)          PID, compname to SUMMARY  PF0608
*                                      Compiler date to SUMMARY  PF0608
         STRING64 (SUM_DATE_SAVE,4),'.',                         PF0608X
               (SUM_DATE_SAVE+4,3),INTO=CSCDATE                  PF0608
         STRING64 'EP=',(OFF_PGMNAME,4,X),',NAME=',ESDNAME,      PF0608X
               INTO=CSCLPRM                                      PF0608
         BRAS  R14,ADJUST_COUNTS       Adjust language counts    PF0608
BINDER_INFO_42_UNX DS 0H                                         PF0608
         STRING64 11X,' B_ESD  ',9X,                                   X
               'Length: ',(ESD_LENG,4,X),' Offset: ',                  X
               (ESD_CLASS_OFFSET,4,X),' PGM','Offset: ',               X
               (OFF_PGMNAME,4,X),INTO=RECORD
         BRAS  R14,SPACE1          <== next line                 RS1007
*>---------------------------------------------------------------HP1107
*>- check & save cobol-csect-info                               -HP1107
*>---------------------------------------------------------------HP1107
         st    R3,saveR3                                         HP1107
         st    R4,saveR4                                         HP1107
         CLC   IEW_SECTION_DATA(8),=CL8'IGZESTUB' ignore         PF0608
         jE    BINDER_INFO_42_0        no, skip                  RS1107
         DEVTYPE =CL8'MAINONLY',DOUBLE  Get MAINONLY DD          RS0108
         LTR   R15,R15                    Is it allocated?       RS0108
         JZ    BINDER_INFO_42_0           Yes, leave             RS0108
         CLC   WORK(8),PGMNAME_SAV  Section = load?              RS1107
         jE    BINDER_INFO_42_0        no, skip                  RS1107
         cli   csect_act_kz,C'C'             cobol ?             HP1107
         jne   BINDER_INFO_42_0              no, skip            HP1107
         lh    R3,csect_anz_tabelem                              HP1107
         la    r3,1(r3)                                          HP1107
         ch    r3,=h'50'                     table full ?        HP1107
         jh    BINDER_INFO_42_0              yes, skip           HP1107
*******
         l     R4,ESD_CLASS_OFFSET  csect-offset                 HP1107
         xr    r1,r1                                             HP1107
         l     r1,CSV_LOADPT        load-point  lmod             HP1107
         ar    r4,r1                csect-postion in lmod        HP1107
         st    r4,csect_anf         csect-postion in lmod        HP1107
         mvc   hadr,ADR_PGMNAME     ep                           HP1107
         cli   hadr,x'00'                                        HP1107
         je    BINDER_INFO_42_0a
         xi    hadr,x'80'                                        HP1107
BINDER_INFO_42_0a     DS 0H                                      HP1107
         l     r1,hadr              ep                           HP1107
         cr    r4,r1                                             HP1107
         je    BINDER_INFO_42_0     main-csect  |                HP1107
*******
         sth   R3,csect_anz_tabelem                              HP1107
         l     R3,csect_tabelem_act                              HP1107
         mvc   0(2,r3),csect_act_kz          save that           HP1107
         mvc   2(4,r3),ESD_CLASS_OFFSET                          HP1107
         mvc   6(4,r3),ESD_LENG                                  HP1107
         la    R3,10(r3)                     next table entry    HP1107
         st    R3,csect_tabelem_act                              HP1107
         MVI   csect_analyze_kz,C'S'                             HP1107
BINDER_INFO_42_0      DS 0H                                      HP1107
         l     R3,saveR3                                         HP1107
         l     R4,saveR4                                         HP1107
*>---------------------------------------------------------------HP1107
*        STM   R14,R3,SNAPREGS         save registers            RS1007
*        STRING64 '0-3 ',(SNAPREGS+08,4,X),1X,(SNAPREGS+12,4,X),       X
               1X,(SNAPREGS+16,4,X),1X,(SNAPREGS+20,4,X),              X
               '  4-7 ',((R4),,X),1X,((R5),,X),                        X
               1X,((R6),,X),1X,((R7),,X),INTO=RECORD             RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 '8-B ',((R8),,X),1X,((R9),,X),1X,((R10),,X),         X
               1X,((R11),,X),'  C-F ',((R12),,X),1X,((R13),,X),        X
               1X,(SNAPREGS+00,4,X),1X,(SNAPREGS+04,4,X),INTO=RECORD
*        BRAS  R14,SPACE2          <== next line                 RS1007
*        LM    R14,R3,SNAPREGS         save registers            RS1007
*        STRING64 4X,((R5),4,X),1X,(4(R5),4,X),1X,(8(R5),4,X),1X,      X
               (12(R5),4,X),3X,((R5),16),                              X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(16(R5),4,X),1X,(20(R5),4,X),1X,(24(R5),4,X),1X,  X
               (28(R5),4,X),3X,(16(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(32(R5),4,X),1X,(36(R5),4,X),1X,(40(R5),4,X),1X,  X
               (44(R5),4,X),3X,(32(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(48(R5),4,X),1X,(52(R5),4,X),1X,(56(R5),4,X),1X,  X
               (60(R5),4,X),3X,(48(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(64(R5),4,X),1X,(68(R5),4,X),1X,(72(R5),4,X),1X,  X
               (76(R5),4,X),3X,(64(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(80(R5),4,X),1X,(84(R5),4,X),1X,(88(R5),4,X),1X,  X
               (92(R5),4,X),3X,(80(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(96(R5),4,X),1X,(100(R5),4,X),1X,(104(R5),4,X),1X,X
               (108(R5),4,X),3X,(96(R5),16),                           X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(112(R5),4,X),1X,(114(R5),4,X),1X,(116(R5),4,X),1X,
               (122(R5),4,X),3X,(112(R5),16),                          X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE2          <== next line                 RS1007
*        J     BINDER_INFO_50      Only one ESD_TYPE = ED !!!!   PF0608
         J     BINDER_INFO_43      No, now also process SD, LD   PF0608
BINDER_INFO_42_CSX DS 0H                                         PF0608
         CLC   ESD_TYPE,=C'LD'      Label Definition?            PF0608
         JNE   BINDER_INFO_43       No, done with this element   PF0608
         CLI   FIXEDSUM,C'Y'        Fixed SUMMARY line?          PF0608
         JNE   BINDER_INFO_43       No, done with this element   PF0608
         CLC   OFF_PGMNAME,ESD_CLASS_OFFSET At EP offset?        PF0608
         JNE   BINDER_INFO_43       No, done with this element   PF0608
* OK, this LD is the entry point of the UNKNOWN load module      PF0608
         LH    R8,ESD_NAME_CHARS    Length of LD name            PF0608
         L     R2,ESD_NAME_PTR      Name pointer                 PF0608
         STRING64 'EP=',(OFF_PGMNAME,4,X),',NAME=',              PF0608X
               (0(R2),(R8),),INTO=CSCLPRM                        PF0608
*        J     BINDER_INFO_43       Now done with this element   PF0608
BINDER_INFO_43 DS 0H                                             RS1007
         LTR   R10,R10              Only one entry?              RS1007
         JZ    BINDER_INFO_50     yes, leave                     RS1007
         A     R5,ESDH_ENTRY_LENG   Move to next section name    RS1007
         BRCT  R10,BINDER_INFO_42                                RS1007
*endloop                                                         RS1007
BINDER_INFO_50 DS 0H                                             RS1007
         MVC   IEW_CURSORD,=F'0'      Clear Cursor               RS1007
         L     R4,IEW_IDUI_PTR                                   RS1007
         USING IEWBIDU,R4                                        RS1007
*        IEWBUFF FUNC=INITBUF,TYPE=IDU     Init the buffer       RS1007
         MVC   IEWBIDU(IDUH_LENG),IDUI_INIT_VALUES               RS1007
         MVC   IEWBIND_FUNCTION,=CL8'GETD-IDU'                   RS1007
         LA    R5,IDUH_END                                       RS1007
         USING ESD_ENTRY,R5                                      RS1007
         IEWBIND FUNC=GETD,                                            X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               WORKMOD=IEW_WKTOKEN,                                    X
               CLASS=IEW_IDU,                                          X
               SECTION=IEW_SECTION,                                    X
               AREA=IEWBIDU,                                           X
               CURSOR=IEW_CURSORD,                                     X
               COUNT=IEW_COUNTD,                                       X
               VERSION=4,                                              X
               MF=(E,IEWBIND)                                    RS1007
*        STRING64 '   GETD: IDU ',(IRETCODE,,X),' RSN: ',(RSNCODE,,X), X
               'COUNT: ',(IEW_COUNTD,,X),' Token: ',(IEW_WKTOKEN,,X),  X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1                                        RS1007
         CLC   RSNCODE,=F'0'      Check reason code              RS1007
         JE    BINDER_INFO_51     continue if zero               RS1007
*        CLC   IRETCODE,=F'4'     Do we have all the names       RS1007
*        JH    BINDER_ERROR       Any higher is an error         RS1007
BINDER_INFO_51 DS 0H                                             RS1007
*        Should be activated only in case of problems            RS1007
*        STRING64 4X,((R4),4,X),1X,(4(R4),4,X),1X,(8(R4),4,X),1X,      X
               (12(R4),4,X),3X,((R4),16),                              X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(16(R4),4,X),1X,(20(R4),4,X),1X,(24(R4),4,X),1X,  X
               (28(R4),4,X),3X,(16(R4),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE2          <== next line                 RS1007
         L     R10,IEW_COUNTD            Number of sections      RS1007
         LTR   R10,R10                                           RS1007
         JZ    BINDER_INFO_60                                    RS1007
         BCTR  R10,0                     -1                      RS1007
         USING IDU_ENTRY,R5                                      RS1007
BINDER_INFO_52 DS 0H                                             RS1007
         LH    R0,IDU_DATA_CHARS                                 RS1007
*        STRING64 11X,'B_IDRU ',                                       X
               (IDU_CREATE_DATE,4),'.',(IDU_CREATE_DATE+4,3),          X
               1X,(IDU_DATA,(R0),),INTO=RECORD                   RS1007
         STRING64 11X,' B_IDRU ',                                      X
               (IDU_CREATE_DATE,4),'.',(IDU_CREATE_DATE+4,3),          X
               1X,(IDU_DATA,(R0),),INTO=RECORD                   RS1007
         BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 2X,((R3),(R2),),1X,IDL_PID_ID,1X,'V',IDL_VERSION,    X
               ' M',IDL_MOD_LEVEL,1X,(IDL_DATE_PROCESSED,4),'.',       X
               (IDL_DATE_PROCESSED+4,,3),INTO=RECORD             RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STM   R14,R3,SNAPREGS         save registers            RS1007
*        STRING64 '0-3 ',(SNAPREGS+08,4,X),1X,(SNAPREGS+12,4,X),       X
               1X,(SNAPREGS+16,4,X),1X,(SNAPREGS+20,4,X),              X
               '  4-7 ',((R4),,X),1X,((R5),,X),                        X
               1X,((R6),,X),1X,((R7),,X),INTO=RECORD             RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 '8-B ',((R8),,X),1X,((R9),,X),1X,((R10),,X),         X
               1X,((R11),,X),'  C-F ',((R12),,X),1X,((R13),,X),        X
               1X,(SNAPREGS+00,4,X),1X,(SNAPREGS+04,4,X),INTO=RECORD
*        BRAS  R14,SPACE2          <== next line                 RS1007
*        LM    R14,R3,SNAPREGS         save registers            RS1007
*        STRING64 4X,((R5),4,X),1X,(4(R5),4,X),1X,(8(R5),4,X),1X,      X
               (12(R5),4,X),3X,((R5),16),                              X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(16(R5),4,X),1X,(20(R5),4,X),1X,(24(R5),4,X),1X,  X
               (28(R5),4,X),3X,(16(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(32(R5),4,X),1X,(36(R5),4,X),1X,(40(R5),4,X),1X,  X
               (44(R5),4,X),3X,(32(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(48(R5),4,X),1X,(52(R5),4,X),1X,(56(R5),4,X),1X,  X
               (60(R5),4,X),3X,(48(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(64(R5),4,X),1X,(68(R5),4,X),1X,(72(R5),4,X),1X,  X
               (76(R5),4,X),3X,(64(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(80(R5),4,X),1X,(84(R5),4,X),1X,(88(R5),4,X),1X,  X
               (92(R5),4,X),3X,(80(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(96(R5),4,X),1X,(100(R5),4,X),1X,(104(R5),4,X),1X,X
               (108(R5),4,X),3X,(96(R5),16),                           X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(112(R5),4,X),1X,(114(R5),4,X),1X,(116(R5),4,X),1X,
               (122(R5),4,X),3X,(112(R5),16),                          X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE2          <== next line                 RS1007
BINDER_INFO_53 DS 0H                                             RS1007
         LTR   R10,R10              Only one entry?              RS1007
         JZ    BINDER_INFO_60     yes, leave                     RS1007
         A     R5,IDUH_ENTRY_LENG   Move to next section name    RS1007
         BRCT  R10,BINDER_INFO_52                                RS1007
*endloop                                                         RS1007
BINDER_INFO_60 DS 0H                                             RS1007
         MVC   IEW_CURSORD,=F'0'      Clear Cursor               RS1007
         L     R4,IEW_IDZI_PTR                                   RS1007
         USING IEWBIDZ,R4                                        RS1007
*        IEWBUFF FUNC=INITBUF,TYPE=IDL     Init the buffer       RS1007
         MVC   IEWBIDZ(IDZH_LENG),IDZI_INIT_VALUES               RS1007
         MVC   IEWBIND_FUNCTION,=CL8'GETD-IDZ'                   RS1007
         LA    R5,IDZH_END                                       RS1007
         USING IDZ_ENTRY,R5                                      RS1007
         IEWBIND FUNC=GETD,                                            X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               WORKMOD=IEW_WKTOKEN,                                    X
               CLASS=IEW_IDZ,                                          X
               SECTION=IEW_SECTION,                                    X
               AREA=IEWBIDZ,                                           X
               CURSOR=IEW_CURSORD,                                     X
               COUNT=IEW_COUNTD,                                       X
               VERSION=4,                                              X
               MF=(E,IEWBIND)                                    RS1007
*        STRING64 '   GETD: IDZ ',(IRETCODE,,X),' RSN: ',(RSNCODE,,X), X
               'COUNT: ',(IEW_COUNTD,,X),' Token: ',(IEW_WKTOKEN,,X),  X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1                                        RS1007
         CLC   RSNCODE,=F'0'      Check reason code              RS1007
         JE    BINDER_INFO_61     continue if zero               RS1007
*        CLC   IRETCODE,=F'4'     Do we have all the names       RS1007
*        JH    BINDER_ERROR       Any higher is an error         RS1007
BINDER_INFO_61 DS 0H                                             RS1007
*        Should be activated only in case of problems            RS1007
*        STRING64 4X,((R4),4,X),1X,(4(R4),4,X),1X,(8(R4),4,X),1X,      X
               (12(R4),4,X),3X,((R4),16),                              X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(16(R4),4,X),1X,(20(R4),4,X),1X,(24(R4),4,X),1X,  X
               (28(R4),4,X),3X,(16(R4),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE2          <== next line                 RS1007
         L     R10,IEW_COUNTD            Number of sections      RS1007
         LTR   R10,R10                                           RS1007
         JZ    BINDER_INFO_70                                    RS1007
         BCTR  R10,0                     -1                      RS1007
         USING IDZ_ENTRY,R5                                      RS1007
BINDER_INFO_62 DS 0H                                             RS1007
*        STRING64 11X,' B_IDRZ ',(IDZ_DATE,4),'.',(IDZ_DATE+4,3),      X
               1X,(IDZ_ZAP_DATA,8),INTO=RECORD                   RS1007
         STRING64 21X,' B_IDRZ ',                                      X
               (IDZ_DATE,4),'.',(IDZ_DATE+4,3),                        X
               1X,(IDZ_ZAP_DATA,8),INTO=RECORD                   RS1007
         BRAS  R14,SPACE1          <== next line                 RS1007
*        STM   R14,R3,SNAPREGS         save registers            RS1007
*        STRING64 '0-3 ',(SNAPREGS+08,4,X),1X,(SNAPREGS+12,4,X),       X
               1X,(SNAPREGS+16,4,X),1X,(SNAPREGS+20,4,X),              X
               '  4-7 ',((R4),,X),1X,((R5),,X),                        X
               1X,((R6),,X),1X,((R7),,X),INTO=RECORD             RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 '8-B ',((R8),,X),1X,((R9),,X),1X,((R10),,X),         X
               1X,((R11),,X),'  C-F ',((R12),,X),1X,((R13),,X),        X
               1X,(SNAPREGS+00,4,X),1X,(SNAPREGS+04,4,X),INTO=RECORD
*        BRAS  R14,SPACE2          <== next line                 RS1007
*        LM    R14,R3,SNAPREGS         save registers            RS1007
*        STRING64 4X,((R5),4,X),1X,(4(R5),4,X),1X,(8(R5),4,X),1X,      X
               (12(R5),4,X),3X,((R5),16),                              X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(16(R5),4,X),1X,(20(R5),4,X),1X,(24(R5),4,X),1X,  X
               (28(R5),4,X),3X,(16(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(32(R5),4,X),1X,(36(R5),4,X),1X,(40(R5),4,X),1X,  X
               (44(R5),4,X),3X,(32(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(48(R5),4,X),1X,(52(R5),4,X),1X,(56(R5),4,X),1X,  X
               (60(R5),4,X),3X,(48(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(64(R5),4,X),1X,(68(R5),4,X),1X,(72(R5),4,X),1X,  X
               (76(R5),4,X),3X,(64(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(80(R5),4,X),1X,(84(R5),4,X),1X,(88(R5),4,X),1X,  X
               (92(R5),4,X),3X,(80(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(96(R5),4,X),1X,(100(R5),4,X),1X,(104(R5),4,X),1X,X
               (108(R5),4,X),3X,(96(R5),16),                           X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(112(R5),4,X),1X,(114(R5),4,X),1X,(116(R5),4,X),1X,
               (122(R5),4,X),3X,(112(R5),16),                          X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE2          <== next line                 RS1007
BINDER_INFO_63 DS 0H                                             RS1007
         LTR   R10,R10              Only one entry?              RS1007
         JZ    BINDER_INFO_70     yes, leave                     RS1007
         A     R5,IDZH_ENTRY_LENG   Move to next section name    RS1007
         BRCT  R10,BINDER_INFO_62                                RS1007
*endloop                                                         RS1007
BINDER_INFO_70 DS 0H                                             RS1007
         MVC   IEW_CURSORD,=F'0'      Clear Cursor               RS1007
         L     R4,IEW_IDBI_PTR                                   RS1007
         USING IEWBIDB,R4                                        RS1007
*        IEWBUFF FUNC=INITBUF,TYPE=IDB     Init the buffer       RS1007
         MVC   IEWBIDB(IDBH_LENG),IDBI_INIT_VALUES               RS1007
         MVC   IEWBIND_FUNCTION,=CL8'GETD-IDB'                   RS1007
         LA    R5,IDBH_END                                       RS1007
         USING IDB_ENTRY,R5                                      RS1007
         IEWBIND FUNC=GETD,                                            X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               WORKMOD=IEW_WKTOKEN,                                    X
               CLASS=IEW_IDB,                                          X
               SECTION=IEW_SECTION,                                    X
               AREA=IEWBIDB,                                           X
               CURSOR=IEW_CURSORD,                                     X
               COUNT=IEW_COUNTD,                                       X
               VERSION=4,                                              X
               MF=(E,IEWBIND)                                    RS1007
*        STRING64 '   GETD: IDB ',(IRETCODE,,X),' RSN: ',(RSNCODE,,X), X
               'COUNT: ',(IEW_COUNTD,,X),' Token: ',(IEW_WKTOKEN,,X),  X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1                                        RS1007
         CLC   RSNCODE,=F'0'      Check reason code              RS1007
         JE    BINDER_INFO_71     continue if zero               RS1007
*        CLC   IRETCODE,=F'4'     Do we have all the names       RS1007
*        JH    BINDER_ERROR       Any higher is an error         RS1007
BINDER_INFO_71 DS 0H                                             RS1007
*        Should be activated only in case of problems            RS1007
*        STRING64 4X,((R4),4,X),1X,(4(R4),4,X),1X,(8(R4),4,X),1X,      X
               (12(R4),4,X),3X,((R4),16),                              X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(16(R4),4,X),1X,(20(R4),4,X),1X,(24(R4),4,X),1X,  X
               (28(R4),4,X),3X,(16(R4),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE2          <== next line                 RS1007
         L     R10,IEW_COUNTD            Number of sections      RS1007
         LTR   R10,R10                                           RS1007
         JZ    BINDER_INFO_80                                    RS1007
         BCTR  R10,0                     -1                      RS1007
         USING IDB_ENTRY,R5                                      RS1007
         CLC   SUM_DATE_SAVE,BLANKS    Any date saved yet?       PF0608
         JNE   BINDER_INFO_72          Yes, don't change it      PF0608
         MVC   SUM_DATE_SAVE,IDB_DATE_BOUND Save for SUMMARY     PF0608
BINDER_INFO_72 DS 0H                                             RS1007
         STRING64 '  Bound   :',' B_IDRB ',                            X
               (IDB_DATE_BOUND,4),'.',(IDB_DATE_BOUND+4,3),1X,         X
               (IDB_BINDER_ID,10),' V',(IDB_VERSION,2),' M',           X
               (IDB_RELEASE,2),INTO=RECORD                       RS1007
         BRAS  R9,BINDER_INFO_72_1                               RS1007
*   Most Taken from Dave Alcock                                  RS1007
         DC    CL10'5695DF108 ',CL16'DFSMS Binder'               RS1007
         DC    CL10'566528408 ',CL16'DFP LKED'                   RS1007
         DC    CL10'566529508 ',CL16'DFP LKED'                   RS1007
         DC    CL10'5752SC104 ',CL16'LKED-F'                     RS1007
         DC    CL10'04LE960488',CL16'MVSLKED'                    RS1007
*   Roland                                                       RS1007
         DC    CL10'5695PMB01 ',CL16'z/OS Binder '               RS1007
         DC    XL10'0000',CL16'Unknown'             end of table RS1007
BINDER_INFO_72_1 DS 0H                                           RS1007
         CLC   IDB_BINDER_ID(10),0(R9)         check             RS1007
         JE    BINDER_INFO_72_2        jump if on                RS1007
         LA    R9,26(,R9)              Skip entry                RS1007
         CLI   0(R9),0                 end of table?             RS1007
         JNE   BINDER_INFO_72_1        not yet, loop             RS1007
BINDER_INFO_72_2 DS 0H                                           RS1007
         MVC   RECORD+47(16),10(R9)    long text for Binder-ID   RS1007
         BRAS  R14,SPACE2          <== next line                 RS1007
*        STM   R14,R3,SNAPREGS         save registers            RS1007
*        STRING64 '0-3 ',(SNAPREGS+08,4,X),1X,(SNAPREGS+12,4,X),       X
               1X,(SNAPREGS+16,4,X),1X,(SNAPREGS+20,4,X),              X
               '  4-7 ',((R4),,X),1X,((R5),,X),                        X
               1X,((R6),,X),1X,((R7),,X),INTO=RECORD             RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 '8-B ',((R8),,X),1X,((R9),,X),1X,((R10),,X),         X
               1X,((R11),,X),'  C-F ',((R12),,X),1X,((R13),,X),        X
               1X,(SNAPREGS+00,4,X),1X,(SNAPREGS+04,4,X),INTO=RECORD
*        BRAS  R14,SPACE2          <== next line                 RS1007
*        LM    R14,R3,SNAPREGS         save registers            RS1007
*        STRING64 4X,((R5),4,X),1X,(4(R5),4,X),1X,(8(R5),4,X),1X,      X
               (12(R5),4,X),3X,((R5),16),                              X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(16(R5),4,X),1X,(20(R5),4,X),1X,(24(R5),4,X),1X,  X
               (28(R5),4,X),3X,(16(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(32(R5),4,X),1X,(36(R5),4,X),1X,(40(R5),4,X),1X,  X
               (44(R5),4,X),3X,(32(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(48(R5),4,X),1X,(52(R5),4,X),1X,(56(R5),4,X),1X,  X
               (60(R5),4,X),3X,(48(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(64(R5),4,X),1X,(68(R5),4,X),1X,(72(R5),4,X),1X,  X
               (76(R5),4,X),3X,(64(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(80(R5),4,X),1X,(84(R5),4,X),1X,(88(R5),4,X),1X,  X
               (92(R5),4,X),3X,(80(R5),16),                            X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(96(R5),4,X),1X,(100(R5),4,X),1X,(104(R5),4,X),1X,X
               (108(R5),4,X),3X,(96(R5),16),                           X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE1          <== next line                 RS1007
*        STRING64 4X,(112(R5),4,X),1X,(114(R5),4,X),1X,(116(R5),4,X),1X,
               (122(R5),4,X),3X,(112(R5),16),                          X
               INTO=RECORD                                       RS1007
*        BRAS  R14,SPACE2          <== next line                 RS1007
BINDER_INFO_73 DS 0H                                             RS1007
         LTR   R10,R10              Only one entry?              RS1007
         JZ    BINDER_INFO_80     yes, leave                     RS1007
         A     R5,IDBH_ENTRY_LENG   Move to next section name    RS1007
         BRCT  R10,BINDER_INFO_72                                RS1007
*endloop                                                         RS1007
BINDER_INFO_80 DS 0H                                             RS1007
         LM    R4,R5,SAVER4_AND_R5                               RS1007
         USING IEWBBNL,R4                                        RS1007
         USING BNL_ENTRY,R5                                      RS1007
         A     R5,BNLH_ENTRY_LENG   Move to next section name
         BRCT  R12,BINDER_INFO_20
*endloop                                                         RS1007
*                                                                 *CSC*
BINDER_INFO_85 DS 0H                                             RS1007
         CLC   IEW_WKTOKEN,XFF      Do we have a workmod?        PF0608
         JE    BINDER_INFO_90       No, bypass DELETEW           PF0608
         MVC   IEWBIND_FUNCTION,=CL8'DELETEW'                     *CSC*
         IEWBIND FUNC=DELETEW,                                         X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               WORKMOD=IEW_WKTOKEN,                                    X
               PROTECT=YES,                                            X
               VERSION=4,                                              X
               MF=(E,IEWBIND)
*        STRING64 'DELETEW: RC: ',(IRETCODE,,X),' RSN: ',(RSNCODE,,X), X
               INTO=RECORD
*        BRAS  R14,SPACE1
         CLI   DOUBLE,C'Y'          Invoked from Binder-Error ?  RS0105
         JE    BINDER_INFO_90          don't check RC            RS1007
         CLC   RSNCODE,=F'0'
         JNE   BINDER_ERROR
BINDER_INFO_90 DS 0H                                             RS1007
         CLC   IEW_DTOKEN,XFF       Was a dialog started?        PF0608
         JE    BINDER_END           No, just exit                PF0608
         MVC   IEWBIND_FUNCTION,=CL8'ENDD'                        *CSC*
         IEWBIND FUNC=ENDD,                                            X
               RETCODE=IRETCODE,                                       X
               RSNCODE=RSNCODE,                                        X
               DIALOG=IEW_DTOKEN,                                      X
               VERSION=4,                                              X
               MF=(E,IEWBIND)
*        STRING64 'ENDD   : RC: ',(IRETCODE,,X),' RSN: ',(RSNCODE,,X), X
               'DTOKEN: ',(IEW_DTOKEN,,X),                             X
               INTO=RECORD
*        BRAS  R14,SPACE1
         CLI   DOUBLE,C'Y'          Invoked from Binder-Error ?  RS0105
         JE    BINDER_END              don't check RC            RS0105
         CLC   RSNCODE,=F'0'
         JNE   BINDER_ERROR
*        IEWBUFF FUNC=FREEBUF,TYPE=NAME
         J     BINDER_END
BINDER_ERROR DS 0H
         MVI   DOUBLE,C'Y'     Status Binder_Error !!            RS0105
         STRING64 'IEWBIND: RC: ',(IRETCODE,,X),' RSN: ',(RSNCODE,,X), X
               ' FUNCTION:',IEWBIND_FUNCTION,                     *CSC*X
               ' SEC-L:',(IEW_SECTION_LEN,2,X),INTO=RECORD       PF0608
         BRAS  R14,SPACE1
         STRING64 'Binder function failed, no further ',         PF0608X
               'information is available from the binder.',      PF0608X
               INTO=RECORD                                       PF0608
         BRAS  R14,SPACE1                                        PF0608
         J     BINDER_INFO_85       Issue DELETEW to rel storage RS1007
BINDER_END   DS 0H
*>---------------------------------------------------------------HP1107
         CLI   csect_analyze_kz,C'S'  any more csects ?          HP1107
         jne   BINDER_END_0                                      HP1107
         BRAS  R14,BLANK1                                        HP1107
         STRING '------------ Found additional COBOL modules included',X
               ', will report them later ------------------------',    X
               INTO=RECORD
         BRAS  R14,SPACE2                                        HP1107
BINDER_END_0 DS 0H
         st    R3,saveR3                                         HP1107
         la    R3,csect_table       anf of csect-table (cobol)   HP1107
         st    R3,csect_tabelem_act                              HP1107
         l     R3,saveR3                                         HP1107
*>---------------------------------------------------------------HP1107
         MVI   DOUBLE,C' '     Status Binder_Error !!            RS0105
         L     R14,BINDSAVE         Restore R14
         BR    R14            return
         DROP  R4,R5
*------------------------------------------------------------*   PF0708
* Move PGMNAME to IEW_MBR, calculating length in IEW_MBRL    *   PF0708
*------------------------------------------------------------*   PF0708
*                                                                PF0708
PGMNAME_2_MBR  DS 0H                                             PF0708
         ST    R14,CNT_R14SAVE    Can re-use this save word here PF0708
* Calculate length of member name first                          PF0708
         XC    IEW_MBRL,IEW_MBRL  Clear length to zero           PF0708
         LA    R15,8              Max length is 8                PF0708
         LA    R14,PGMNAME_GET+L'PGMNAME_GET-1 Point to name end PF0708
PGMNAME_2_MBR_1 DS 0H             Loop for length                PF0708
         CLI   0(R14),C' '        Space or not?                  PF0708
         JNE   PGMNAME_2_MBR_2    Not space, have length         PF0708
         BCTR  R14,0              Is a space, decrement address  PF0708
         BRCT  R15,PGMNAME_2_MBR_1 Then decrement length + loop  PF0708
         J     PGMNAME_2_MBR_X    Zero length, exit              PF0708
PGMNAME_2_MBR_2 DS 0H             Have name length now           PF0708
         STH   R15,IEW_MBRL       Store length                   PF0708
         MVC   IEW_MBRN,PGMNAME_GET Copy the member name         PF0708
PGMNAME_2_MBR_X DS 0H             Exit here                      PF0708
         L     R14,CNT_R14SAVE    Restore                        PF0708
         BR    R14                And return                     PF0708
*------------------------------------------------------------*   PF0708
* Create PL/I-style internal name from member name IEW_MBR   *   PF0708
*------------------------------------------------------------*   PF0708
*                                                                PF0708
CREATE_PLINAME DS 0H                                             PF0708
         ST    R14,CNT_R14SAVE    Can re-use this save word here PF0708
         MVC   PLINAME_LEN,IEW_MBRL+1 Name length                PF0708
         MVI   PLINAME,C'*'       Pre-fill name with '*' chars   PF0708
         MVC   PLINAME+1(L'PLINAME-1),PLINAME                    PF0708
         LHI   R14,L'PLINAME      Compute where to start name    PF0708
         LH    R15,IEW_MBRL       How much to move               PF0708
         CHI   R15,L'PLINAME      But no more than can fit       PF0708
         JNH   CREATE_PLINAME_1   OK, not more than can fit      PF0708
         LHI   R15,L'PLINAME      More than can fit, use first   PF0708
CREATE_PLINAME_1 DS 0H                                           PF0708
         SR    R14,R15            Finish calculation             PF0708
         LA    R14,PLINAME(R14)   R14=where to start             PF0708
         BCTR  R15,0              Length minus one for EXecute   PF0708
         EX    R15,MOVE_PLINAME   Move to PLINAME                PF0708
         L     R14,CNT_R14SAVE    Restore                        PF0708
         BR    R14                And return                     PF0708
*------------------------------------------------------------*   PF0608
* Adjust language counts for UNKNOWN load modules            *   PF0608
*------------------------------------------------------------*   PF0608
*                                                                PF0608
ADJUST_COUNTS DS 0H                                              PF0608
         ST    R14,CNT_R14SAVE                                   PF0608
         CLI   0(R9),C'A'         Assembler?                     PF0608
         JNE   ADJ_CNT_01_1       No, keep checking              PF0608
         AP    CNT_ASSEMBLER,=P'1' Yes, add to Assembler count   PF0608
         J     ADJ_CNT_END        Done                           PF0608
ADJ_CNT_01_1 DS 0H                                               PF0608
         CLI   1(R9),C'3'         COBOL 1?                       PF0608
         JNE   ADJ_CNT_01_2       No, keep checking              PF0608
         AP    CNT_COBOLI,=P'1'   Yes, add to COBOL 1   count    PF0608
         J     ADJ_CNT_END        Done                           PF0608
ADJ_CNT_01_2 DS 0H                                               PF0608
         CLI   1(R9),C'2'         COBOL 2?                       PF0608
         JNE   ADJ_CNT_01_3       No, keep checking              PF0608
         AP    CNT_COBOL2,=P'1'   Yes, add to COBOL 2   count    PF0608
         J     ADJ_CNT_END        Done                           PF0608
ADJ_CNT_01_3 DS 0H                                               PF0608
         CLI   1(R9),C'1'         COBOL LE?                      PF0608
         JNE   ADJ_CNT_EXIT       No, not recognized, exit       PF0608
         AP    CNT_COBOLLE,=P'1'  Yes, add to COBOL LE  count    PF0608
         J     ADJ_CNT_END        Done                           PF0608
ADJ_CNT_02 DS 0H                                                 PF0608
         CLI   0(R9),C'F'         FORTRAN?                       PF0608
         JNE   ADJ_CNT_03         No, keep checking              PF0608
         AP    CNT_FORTRAN,=P'1'  Yes, add to FORTRAN   count    PF0608
         J     ADJ_CNT_END        Done                           PF0608
ADJ_CNT_03 DS 0H                                                 PF0608
         CLI   0(R9),C'P'         PL/1?                          PF0608
         JNE   ADJ_CNT_04         No, keep checking              PF0608
         AP    CNT_PLI,=P'1'      Yes, add to PL/1      count    PF0608
         J     ADJ_CNT_END        Done                           PF0608
ADJ_CNT_04 DS 0H                                                 PF0608
         CLI   0(R9),C'U'         C/C++?                         PF0608
         JNE   ADJ_CNT_05         No, keep checking              PF0608
         AP    CNT_C370,=P'1'     Yes, add to C370      count    PF0608
         J     ADJ_CNT_END        Done                           PF0608
ADJ_CNT_05 DS 0H                                                 PF0608
*        Not any of the above, adjust OTHER count                PF0608
         CLI   0(R9),0            Unknown ?                      RS1208
         JE    ADJ_CNT_EXIT         Yes, leave                   RS1208
         AP    CNT_OTHER,=P'1'    Yes, add to OTHER     count    PF0608
ADJ_CNT_END DS 0H                                                PF0608
         SP    CNT_UNKNOWN,=P'1'  Subtract from UNKNOWN count    PF0608
ADJ_CNT_EXIT DS 0H                                               PF0608
         L     R14,CNT_R14SAVE                                   PF0608
         BR    R14                                               PF0608
*------------------------------------------------------------*
* CEEUOPT_INFO                                               *   RS1107
*------------------------------------------------------------*
*
CEEUOPT_INFO DS 0H
         ST    R14,BINDSAVE
         BRAS  R14,BLANK1
         STRING64 ADDINFO,INTO=RECORD
         BRAS  R14,SPACE1
         STRING64 '------------ about the CEEUOPT/#pragma/PLXOPT ----',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
         L     R5,CSV_OUTXTLST_ELP1  Start of data to be searched
         L     R4,CSV_OUTXTLST_EL1   Length of string
         AR    R4,R5         Points to the end of data
         LR    R8,R4         keep it for later
         LA    R0,C'C'       Search for 'C'
CEEUOPT_05  DS    0H
         SRST  R4,R5         Search
         BRC   1,CEEUOPT_05  Search interrupted, continue
         BRC   2,CEEUOPT_10  String not found
         LR    R2,R8         End of string
         SR    R2,R4         minus found at
         CH    R2,=H'6'      at least 5 bytes ???
         JL    CEEUOPT_10    no leave
         CLC   =C'CEEOCB',0(R4)  CEEUOPT ?????
         JE    CEEUOPT_20
         LR    R5,R4
         LA    R5,1(,R5)     +1
         LR    R4,R8
         J     CEEUOPT_05    Search again
CEEUOPT_10  DS    0H
         CLC   CSV_OUTXTLST_ENTRR,=F'1' more then 1 extend ?     RS1107
         JNH   CEEUOPT_90                 no leave               RS1107
         L     R5,CSV_OUTXTLST_ELP2  Start of data to be searched
         L     R4,CSV_OUTXTLST_EL2   Length of string
         AR    R4,R5         Points to the end of data
         LR    R8,R4         keep it for later
         LA    R0,C'C'       Search for 'C'
CEEUOPT_15  DS    0H
         SRST  R4,R5         Search
         BRC   1,CEEUOPT_15  Search interrupted, continue
         BRC   2,CEEUOPT_90  String not found
         LR    R2,R8         End of string
         SR    R2,R4         minus found at
         CH    R2,=H'6'      at least 5 bytes ???
         JL    CEEUOPT_90    no leave
         CLC   =C'CEEOCB',0(R4)  CEEUOPT ?????
         JE    CEEUOPT_20
         LR    R5,R4
         LA    R5,1(,R5)     +1
         LR    R4,R8
         J     CEEUOPT_15    Search again
CEEUOPT_20  DS    0H
         STRING64 'LE User Options present',INTO=RECORD
         BRAS  R14,SPACE2
         USING CEEOCB,R4
         CLC   =C'CEEOCB',CEEOCB_EYEC   Eyecatcher
         JNE   CEEUOPT_98
         CLC   CEEOCB_VER,=H'15'        Version 15 ? z/OS R4
         JE    CEEUOPT_11
         CLC   CEEOCB_VER,=H'16'        Version 16 ? z/OS R5
         JE    CEEUOPT_11
         CLC   CEEOCB_VER,=H'17'        Version 17 ? z/OS R8
         JE    CEEUOPT_11
         CLC   CEEOCB_VER,=H'18'        Version 18 ? z/OS R9
         JE    CEEUOPT_11
         J     CEEUOPT_97               version not supported
CEEUOPT_11 DS   0H
         LR    R5,R4
         CLI   OPTION_ABPE_FLAG,X'81'    CEEUOPT specified ?
         JNE   CEEUOPT_ABPERCX              no leave
         A     R5,OPTION_ABPE_SUB
         USING SUBOPT_ABPE,R5
         STRING64 '      ABPERC(NONE)',INTO=RECORD
         TM    SUBOPT_ABPE_US,X'80'     None
         JO    CEEUOPT_ABPERC9
         STRING64 '      ABPERC(',INTO=RECORD
         TM    SUBOPT_ABPE_US,X'40'     User abendcode
         JNO   CEEUOPT_ABPERC1
         STRING64 (RECORD,,T),'U',(SUBOPT_ABPE_CODE,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         J     CEEUOPT_ABPERC9
CEEUOPT_ABPERC1 DS 0H
         TM    SUBOPT_ABPE_US,X'20'     System abendcode
         JNO   CEEUOPT_ABPERC2
         STRING64 (RECORD,,T),'S',(SUBOPT_ABPE_CODE,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         J     CEEUOPT_ABPERC9
CEEUOPT_ABPERC2 DS 0H                   Other Abcode
         STRING64 (RECORD,,T),SUBOPT_ABPE_ABC,INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
CEEUOPT_ABPERC9 DS 0H
         BRASL R14,SPACE1
CEEUOPT_ABPERCX DS 0H
         DROP  R5
         CLI   OPTION_ABTE_FLAG,X'81'    CEEUOPT specified ?
         JNE   CEEUOPT_ABTERMENCX           no leave
         LR    R5,R4
         A     R5,OPTION_ABTE_SUB
         USING SUBOPT_ABTE,R5
         STRING64 '      ABTERMENC(RETCODE)',INTO=RECORD
         CLC   SUBOPT_ABTE_OPT,=F'1'
         JE    CEEUOPT_ABTERMENC
         STRING64 '      ABTERMENC(ABEND)',INTO=RECORD
CEEUOPT_ABTERMENC DS  0H
         BRASL R14,SPACE1
CEEUOPT_ABTERMENCX DS 0H
         DROP  R5
         CLI   OPTION_AIXB_FLAG,X'81'    CEEUOPT specified ?
         JNE   CEEUOPT_AIXBX                no leave
         STRING64 '      AIXBLD',INTO=RECORD
         TM    OPTION_AIXB_FLAG,X'80'
         JO    CEEUOPT_AIXBLD
         STRING64 '    NOAIXBLD',INTO=RECORD
CEEUOPT_AIXBLD DS  0H
         BRASL R14,SPACE1
CEEUOPT_AIXBX  DS 0H
         CLI   OPTION_ALL3_FLAG,X'81'    CEEUOPT specified ?
         JNH   CEEUOPT_ALL3X                no leave
         STRING64 '      ALL31(ON)',INTO=RECORD
         TM    OPTION_ALL3_FLAG,X'80'
         JO    CEEUOPT_ALL31
         STRING64 '      ALL31(OFF)',INTO=RECORD
CEEUOPT_ALL31  DS  0H
         BRASL R14,SPACE1
CEEUOPT_ALL3X  DS 0H
         CLI   OPTION_ANYH_FLAG,X'81'    CEEUOPT specified ?
         JNE   CEEUOPT_ANYHX                no leave
         LR    R5,R4
         A     R5,OPTION_ANYH_SUB
         USING SUBOPT_ANYH,R5
         STRING64 '      ANYHEAP(',INTO=RECORD
         STRING64 (RECORD,,T),(SUBOPT_ANYH_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_ANYH_INC,F,L9B),INTO=RECORD
         TM    SUBOPT_ANYH_ALLOC,X'80'  Below
         JO    CEEUOPT_ANYHEAP1
         STRING64 (RECORD,,T),',ANYWHERE',INTO=RECORD
         J     CEEUOPT_ANYHEAP2
CEEUOPT_ANYHEAP1       DS  0H
         STRING64 (RECORD,,T),',BELOW',INTO=RECORD
CEEUOPT_ANYHEAP2       DS  0H
         TM    SUBOPT_ANYH_ALLOC,X'40'  Free
         JO    CEEUOPT_ANYHEAP3
         STRING64 (RECORD,,T),',KEEP)',INTO=RECORD
         J     CEEUOPT_ANYHEAP4
CEEUOPT_ANYHEAP3       DS  0H
         STRING64 (RECORD,,T),',FREE)',INTO=RECORD
CEEUOPT_ANYHEAP4       DS  0H
         BRASL R14,SPACE1
CEEUOPT_ANYHX  DS 0H
         DROP  R5
         CLI   OPTION_AUTO_FLAG,X'81'    CEEUOPT specified ?
         JNE   CEEUOPT_AUTOX                no leave
         LR    R5,R4
         A     R5,OPTION_AUTO_SUB
         USING SUBOPT_AUTO,R5
         STRING64 '      AUTOTASK(',SUBOPT_AUTO_LMOD,',',              X
               (SUBOPT_AUTO_NO,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         TM    OPTION_AUTO_FLAG,X'80'
         JO    CEEUOPT_AUTOTASK
         STRING64 '    NOAUTOTASK',INTO=RECORD
CEEUOPT_AUTOTASK DS 0H
         BRASL R14,SPACE1
CEEUOPT_AUTOX  DS 0H
         CLI   OPTION_BELH_FLAG,X'81'    CEEUOPT specified ?
         JNE   CEEUOPT_BELHX                no leave
         LR    R5,R4
         A     R5,OPTION_BELH_SUB
         USING SUBOPT_BELH,R5
         STRING64 '      BELOWHEAP(',INTO=RECORD
         STRING64 (RECORD,,T),(SUBOPT_BELH_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_BELH_INC,F,L9B),INTO=RECORD
         TM    SUBOPT_BELH_ALLOC,X'40'  Free?
         JO    CEEUOPT_BELOWHEAP1
         STRING64 (RECORD,,T),')',INTO=RECORD
         J     CEEUOPT_BELOWHEAP
CEEUOPT_BELOWHEAP1  DS  0H
         STRING64 (RECORD,,T),',FREE)',INTO=RECORD
CEEUOPT_BELOWHEAP   DS  0H
         BRASL R14,SPACE1
CEEUOPT_BELHX  DS 0H
         CLI   OPTION_CBLO_FLAG,X'81'    CEEUOPT specified ?
         JNE   CEEUOPT_CBLOX                no leave
         DROP  R5
         STRING64 '      CBLOPTS(ON)',INTO=RECORD
         TM    OPTION_CBLO_FLAG,X'80'
         JO    CEEUOPT_CBLOPTS
         STRING64 '      CBLOPTS(OFF)',INTO=RECORD
CEEUOPT_CBLOPTS DS 0H
         BRASL R14,SPACE1
CEEUOPT_CBLOX  DS 0H
         CLI   OPTION_CBLP_FLAG,X'81'    CEEUOPT specified ?
         JNE   CEEUOPT_CBLPX                no leave
         STRING64 '      CBLPSHPOP(ON)',INTO=RECORD
         TM    OPTION_CBLP_FLAG,X'80'
         JO    CEEUOPT_CBLPSHPOP
         STRING64 '      CBLPSHPOP(OFF)',INTO=RECORD
CEEUOPT_CBLPSHPOP DS 0H
         BRASL R14,SPACE1
CEEUOPT_CBLPX  DS  0H
         CLI   OPTION_CBLQ_FLAG,X'81'    CEEUOPT specified ?
         JNE   CEEUOPT_CBLQX                no leave
         STRING64 '      CBLQDA(ON)',INTO=RECORD
         TM    OPTION_CBLQ_FLAG,X'80'
         JO    CEEUOPT_CBLQDA
         STRING64 '      CBLQDA(OFF)',INTO=RECORD
CEEUOPT_CBLQDA   DS  0H
         BRASL R14,SPACE1
CEEUOPT_CBLQX  DS 0H
         CLC   CEEOCB_VER,=H'18'        Version 18 ? z/OS R9
         JL    CEEUOPT_CEEDMPX
         CLI   OPTION_CEEDMP_FLAG,X'81'    CEEUOPT specified ?
         JNE   CEEUOPT_CEEDMPX              no leave
         LR    R5,R4
         A     R5,OPTION_CEEDMP_SUB
         USING SUBOPT_CEEDMP,R5
         STRING64 '      CEEDUMP(',(SUBOPT_CEEDMP_PAGL,F,L3B),         X
               INTO=RECORD
         STRING64 (RECORD,,T),',SYSOUT=(',SUBOPT_CEEDMP_SYSC,          X
               ',',SUBOPT_CEEDMP_SYSO,'),',INTO=RECORD
         TM    SUBOPT_CEEDMP_FREE,X'00'  Free=end of close
         JNZ   CEEUOPT_CEEDMP2
         STRING64 (RECORD,,T),'FREE=END,',INTO=RECORD
         J     CEEUOPT_CEEDMP3
CEEUOPT_CEEDMP2     DS  0H
         STRING64 (RECORD,,T),'FREE=CLOSE',INTO=RECORD
CEEUOPT_CEEDMP3     DS  0H
         TM    SUBOPT_CEEDMP_SPIN,X'00'  SPIN=Unalloc or NO
         JNZ   CEEUOPT_CEEDMP4
         STRING64 (RECORD,,T),'SPIN=UNALLOC)',INTO=RECORD
         J     CEEUOPT_CEEDMP5
CEEUOPT_CEEDMP4     DS  0H
         STRING64 (RECORD,,T),'SPIN=NO)',INTO=RECORD
CEEUOPT_CEEDMP5     DS  0H
         BRASL R14,SPACE1
CEEUOPT_CEEDMPX DS 0H
         CLI   OPTION_CHEC_FLAG,X'81'    CEEUOPT specified ?
         JNE   CEEUOPT_CHECX                no leave
         STRING64 '      CHECK(ON)',INTO=RECORD
         TM    OPTION_CHEC_FLAG,X'80'
         JO    CEEUOPT_CHECK
         STRING64 '      CHECK(OFF)',INTO=RECORD
CEEUOPT_CHECK  DS  0H
         BRASL R14,SPACE1
CEEUOPT_CHECX  DS 0H
         CLI   OPTION_COUN_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_COUNX                no leave
         LR    R5,R4
         A     R5,OPTION_COUN_SUB
         USING SUBOPT_COUN,R5
         STRING64 '      COUNTRY(',SUBOPT_COUN_ID,')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_COUNX  DS 0H
         CLI   OPTION_DEBU_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_DEBUX                no leave
         STRING64 '      DEBUG',INTO=RECORD
         TM    OPTION_DEBU_FLAG,X'80'
         JO    CEEUOPT_DEBUG
         STRING64 '    NODEBUG',INTO=RECORD
CEEUOPT_DEBUG    DS  0H
         BRASL R14,SPACE1
CEEUOPT_DEBUX  DS 0H
         DROP  R5
         CLI   OPTION_DEPT_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_DEPTX                no leave
         LR    R5,R4
         A     R5,OPTION_DEPT_SUB
         USING SUBOPT_DEPT,R5
         STRING64 '      DEPTHCONDLMT(',(SUBOPT_DEPT_COUNT,F,L9B),     X
               INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_DEPTX  DS 0H
         DROP  R5
         CLC   CEEOCB_VER,=H'17'        Version 17 ? z/OS R8
         JL    CEEUOPT_NODYNDUMP
         CLI   OPTION_DYNDMP_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_DYNDMPX              no leave
         LR    R5,R4
         A     R5,OPTION_DYNDMP_SUB
         USING SUBOPT_DYNDMP,R5
         LR    R8,R4
         A     R8,SUBOPT_DYNDMP_HLQP
         USING SUBOPT_DYNDMP_HLQO,R8
         LH    R0,SUBOPT_DYNDMP_HLQL  length
         STRING64 '      DYNDUMP("',(SUBOPT_DYNDMP_HLQS,(R0)),         X
               INTO=RECORD
         TM    SUBOPT_DYNDMP_FLG1,X'80'  Dynamic
         JZ    CEEUOPT_DYNDMP1
         STRING64 (RECORD,,T),',DYNAMIC',INTO=RECORD
         J     CEEUOPT_DYNDMP4
CEEUOPT_DYNDMP1     DS  0H
         TM    SUBOPT_DYNDMP_FLG1,X'40'  Nodynamic
         JZ    CEEUOPT_DYNDMP2
         STRING64 (RECORD,,T),',NODYNAMIC',INTO=RECORD
         J     CEEUOPT_DYNDMP4
CEEUOPT_DYNDMP2     DS  0H
         TM    SUBOPT_DYNDMP_FLG1,X'20'  Force
         JZ    CEEUOPT_DYNDMP3
         STRING64 (RECORD,,T),',FORCE',INTO=RECORD
         J     CEEUOPT_DYNDMP4
CEEUOPT_DYNDMP3     DS  0H
         TM    SUBOPT_DYNDMP_FLG1,X'10'  Both
         JZ    CEEUOPT_DYNDMP4
         STRING64 (RECORD,,T),',BOTH',INTO=RECORD
CEEUOPT_DYNDMP4     DS  0H
         TM    SUBOPT_DYNDMP_FLG2,X'80'  TDUMP
         JZ    CEEUOPT_DYNDMP5
         STRING64 (RECORD,,T),',TDUMP")',INTO=RECORD
         BRASL R14,SPACE1
         J     CEEUOPT_NODYNDUMP
CEEUOPT_DYNDMP5     DS  0H
         TM    SUBOPT_DYNDMP_FLG2,X'40'  NOTDUMP
         JZ    CEEUOPT_NODYNDUMP
         STRING64 (RECORD,,T),',NOTDUMP")',INTO=RECORD
         BRASL R14,SPACE1
         DROP  R5
CEEUOPT_NODYNDUMP DS  0H
CEEUOPT_DYNDMPX DS 0H
         CLI   OPTION_ENVA_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_ENVAX                no leave
         LR    R5,R4
         A     R5,OPTION_ENVA_SUB
         USING SUBOPT_ENVA,R5
         STRING64 '      ENVAR("")',INTO=RECORD
         CLC   SUBOPT_ENVA_LEN,=H'0'
         JE    CEEUOPT_ENVAR
         STRING64 '      ENVAR("',(SUBOPT_ENVA_STR,60),'")',INTO=RECORD
CEEUOPT_ENVAR    DS  0H
         BRASL R14,SPACE1
CEEUOPT_ENVAX  DS 0H
         DROP  R5
         CLI   OPTION_ERRC_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_ERRCX                no leave
         LR    R5,R4
         A     R5,OPTION_ERRC_SUB
         USING SUBOPT_ERRC,R5
         STRING64 '      ERRCOUNT(',(SUBOPT_ERRC_COUNT,F,L9B),         X
               INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_ERRCX  DS 0H
         DROP  R5
         CLI   OPTION_ERRU_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_ERRUX                no leave
         LR    R5,R4
         A     R5,OPTION_ERRU_SUB
         USING SUBOPT_ERRU,R5
         STRING64 '      ERRUNIT(',(SUBOPT_ERRU_COUNT,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_ERRUX  DS 0H
         DROP  R5
         CLI   OPTION_FILE_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_FILEX                no leave
         STRING64 '      FILEHIST',INTO=RECORD
         TM    OPTION_FILE_FLAG,X'80'
         JO    CEEUOPT_FILEHIST
         STRING64 '    NOFILEHIST',INTO=RECORD
CEEUOPT_FILEHIST DS  0H
         BRASL R14,SPACE1
CEEUOPT_FILEX  DS 0H
         CLI   OPTION_FILT_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_FILTX                no leave
         LR    R5,R4
         A     R5,OPTION_FILT_SUB
         USING SUBOPT_FILT,R5
         STRING64 '      FILETAG(AUTOCVT,',INTO=RECORD
         TM    SUBOPT_FILT_FLG,X'80'
         JO    CEEUOPT_FILETAG1
         STRING64 '      FILETAG(NOAUTOCVT,',INTO=RECORD
CEEUOPT_FILETAG1 DS  0H
         TM    SUBOPT_FILT_FLG,X'40'
         JO    CEEUOPT_FILETAG2
         STRING64 (RECORD,,T),'NOAUTOTAG)',INTO=RECORD
         J     CEEUOPT_FILETAG3
CEEUOPT_FILETAG2 DS  0H
         STRING64 (RECORD,,T),'AUTOTAG)',INTO=RECORD
CEEUOPT_FILETAG3 DS  0H
         BRASL R14,SPACE1
CEEUOPT_FILTX  DS 0H
         DROP  R5
         CLI   OPTION_FLOW_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_FLOWX                no leave
         STRING64 '      FLOW',INTO=RECORD
         TM    OPTION_FLOW_FLAG,X'80'
         JO    CEEUOPT_FLOW
         STRING64 '    NOFLOW',INTO=RECORD
CEEUOPT_FLOW     DS  0H
         BRASL R14,SPACE1
CEEUOPT_FLOWX  DS 0H
         CLI   OPTION_HEAP_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_HEAPX                no leave
         LR    R5,R4
         A     R5,OPTION_HEAP_SUB
         USING SUBOPT_HEAP,R5
         STRING64 '      HEAP(',INTO=RECORD
         STRING64 (RECORD,,T),(SUBOPT_HEAP_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEAP_INC,F,L9B),INTO=RECORD
         TM    SUBOPT_HEAP_ALLOC,X'80'  Below
         JO    CEEUOPT_HEAP1
         STRING64 (RECORD,,T),',ANYWHERE',INTO=RECORD
         J     CEEUOPT_HEAP2
CEEUOPT_HEAP1       DS  0H
         STRING64 (RECORD,,T),',BELOW',INTO=RECORD
CEEUOPT_HEAP2       DS  0H
         TM    SUBOPT_HEAP_ALLOC,X'40'  Free
         JO    CEEUOPT_HEAP3
         STRING64 (RECORD,,T),',KEEP,',INTO=RECORD
         J     CEEUOPT_HEAP4
CEEUOPT_HEAP3       DS  0H
         STRING64 (RECORD,,T),',FREE,',INTO=RECORD
CEEUOPT_HEAP4       DS  0H
         STRING64 (RECORD,,T),(SUBOPT_HEAP24_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEAP24_INC,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_HEAPX  DS 0H
         DROP  R5
*        CLI   WKCELL1,C'1'            64bit LE-Option
*        JNE   CEEUOPT_NOHEAP64          no leave
         CLI   OPTION_HE64_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_HE64X                no leave
         LR    R5,R4
         A     R5,OPTION_HE64_SUB
         USING SUBOPT_HE64,R5
         STRING64 '      HEAP64(',INTO=RECORD
         STRING64 (RECORD,,T),(SUBOPT_HE64_INIT,FD,L16B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HE64_INC,FD,L16B),INTO=RECORD
         TM    SUBOPT_HE64_ALLOC,X'40'  Free
         JO    CEEUOPT_HEAP64_1
         STRING64 (RECORD,,T),',KEEP,',INTO=RECORD
         J     CEEUOPT_HEAP64_2
CEEUOPT_HEAP64_1    DS  0H
         STRING64 (RECORD,,T),',FREE,',INTO=RECORD
CEEUOPT_HEAP64_2    DS  0H
         STRING64 (RECORD,,T),(SUBOPT_HE6431_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HE6431_INC,F,L9B),INTO=RECORD
         TM    SUBOPT_HE6431_ALLOC,X'40'  Free
         JO    CEEUOPT_HEAP64_3
         STRING64 (RECORD,,T),',KEEP,',INTO=RECORD
         J     CEEUOPT_HEAP64_4
CEEUOPT_HEAP64_3    DS  0H
         STRING64 (RECORD,,T),',FREE,',INTO=RECORD
CEEUOPT_HEAP64_4    DS  0H
         STRING64 (RECORD,,T),(SUBOPT_HE6424_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HE6424_INC,F,L9B),INTO=RECORD
         TM    SUBOPT_HE6424_ALLOC,X'40'  Free
         JO    CEEUOPT_HEAP64_5
         STRING64 (RECORD,,T),',KEEP)',INTO=RECORD
         J     CEEUOPT_HEAP64_6
CEEUOPT_HEAP64_5    DS  0H
         STRING64 (RECORD,,T),',FREE)',INTO=RECORD
CEEUOPT_HEAP64_6    DS  0H
         BRASL R14,SPACE1
CEEUOPT_HE64X  DS 0H
         DROP  R5
CEEUOPT_NOHEAP64    DS  0H
         CLI   OPTION_HCHK_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_HCHKX                no leave
         LR    R5,R4
         A     R5,OPTION_HCHK_SUB
         USING SUBOPT_HCHK,R5
         STRING64 '      HEAPCHK(ON,',INTO=RECORD
         TM    OPTION_HCHK_FLAG,X'80'
         JO    CEEUOPT_HEAPCHECK
         STRING64 '      HEAPCHK(OFF,',INTO=RECORD
CEEUOPT_HEAPCHECK DS 0H
         STRING64 (RECORD,,T),(SUBOPT_HCHK_FREQ,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HCHK_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HCHK_CLVL,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HCHK_PLVL,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_HCHKX  DS 0H
         DROP  R5
         CLI   OPTION_HEPP_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_HEPPX                no leave
         LR    R5,R4
         A     R5,OPTION_HEPP_SUB
         USING SUBOPT_HEPP,R5
         STRING64 '      HEAPPOOLS(ON,',INTO=RECORD
         TM    OPTION_HEPP_FLAG,X'80'
         JO    CEEUOPT_HEAPPOOLS
         STRING64 '      HEAPPOOLS(OFF,',INTO=RECORD
CEEUOPT_HEAPPOOLS DS 0H
         STRING64 (RECORD,,T),(SUBOPT_HEPP_CP1S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP1P,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP2S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP2P,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP3S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP3P,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP4S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP4P,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP5S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP5P,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP6S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP6P,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP7S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP7P,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP8S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP8P,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP9S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP9P,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP10S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP10P,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP11S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP11P,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP12S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP_CP12P,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_HEPPX  DS 0H
         DROP  R5
*        CLI   WKCELL1,C'1'            64bit LE-Option
*        JNE   CEEUOPT_NOHEAPP64         no leave
         CLI   OPTION_HEPP64_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_HEPP64X              no leave
         LR    R5,R4
         A     R5,OPTION_HEPP64_SUB
         USING SUBOPT_HEPP64,R5
         STRING64 '      HEAPPOOLS64(ON,',INTO=RECORD
         TM    OPTION_HEPP64_FLAG,X'80'
         JO    CEEUOPT_HEAPP64
         STRING64 '      HEAPPOOLS64(OFF,',INTO=RECORD
CEEUOPT_HEAPP64   DS 0H
         STRING64 (RECORD,,T),(SUBOPT_HEPP64_CP1S,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP1P,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP2S,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP2P,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP3S,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP3P,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP4S,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP4P,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP5S,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP5P,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP6S,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP6P,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP7S,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP7P,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP8S,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP8P,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP9S,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP9P,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP10S,F,L9B),         X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP10P,F,L9B),         X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP11S,F,L9B),         X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP11P,F,L9B),         X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP12S,F,L9B),         X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_HEPP64_CP12P,F,L9B),         X
               INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_HEPP64X DS 0H
         DROP  R5
CEEUOPT_NOHEAPP64 DS 0H
         CLI   OPTION_INFO_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_INFOX                no leave
         LR    R5,R4
         A     R5,OPTION_INFO_SUB
         USING SUBOPT_INFO,R5
         STRING64 '      INFOMSGFILTER(ON,',SUBOPT_INFO_ID1,INTO=RECORD
         STRING64 (RECORD,,T),',',SUBOPT_INFO_ID2,INTO=RECORD
         STRING64 (RECORD,,T),',',SUBOPT_INFO_ID3,INTO=RECORD
         STRING64 (RECORD,,T),',',SUBOPT_INFO_ID4,INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         TM    OPTION_INFO_FLAG,X'80'
         JO    CEEUOPT_INFOMSGFILTER
         STRING64 '      INFOMSGFILTER(OFF,',SUBOPT_INFO_ID1,          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',SUBOPT_INFO_ID2,INTO=RECORD
         STRING64 (RECORD,,T),',',SUBOPT_INFO_ID3,INTO=RECORD
         STRING64 (RECORD,,T),',',SUBOPT_INFO_ID4,INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
CEEUOPT_INFOMSGFILTER DS 0H
         BRASL R14,SPACE1
CEEUOPT_INFOX  DS 0H
         DROP  R5
         CLI   OPTION_INQP_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_INQPX                no leave
         STRING64 '      INQPCOPN',INTO=RECORD
         TM    OPTION_INQP_FLAG,X'80'
         JO    CEEUOPT_INQPCOPN
         STRING64 '    NOINQPCOPN',INTO=RECORD
CEEUOPT_INQPCOPN DS  0H
         BRASL R14,SPACE1
CEEUOPT_INQPX  DS 0H
         CLI   OPTION_INTE_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_INTEX                no leave
         STRING64 '      INTERRUPT(ON)',INTO=RECORD
         TM    OPTION_INTE_FLAG,X'80'
         JO    CEEUOPT_INTERRUPT
         STRING64 '      INTERRUPT(OFF)',INTO=RECORD
CEEUOPT_INTERRUPT DS 0H
         BRASL R14,SPACE1
CEEUOPT_INTEX  DS 0H
*        CLI   WKCELL1,C'1'            64bit LE-Option
*        JNE   CEEUOPT_NOIOHEAP64        no leave
         CLI   OPTION_IOHE64_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_IOHE64X              no leave
         LR    R5,R4
         A     R5,OPTION_IOHE64_SUB
         USING SUBOPT_IOHE64,R5
         STRING64 '      IOHEAP64(',INTO=RECORD
         STRING64 (RECORD,,T),(SUBOPT_IOHE64_INIT,FD,L16B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_IOHE64_INC,FD,L16B),         X
               INTO=RECORD
         TM    SUBOPT_IOHE64_ALLOC,X'40'  Free
         JO    CEEUOPT_IOHEAP64_1
         STRING64 (RECORD,,T),',KEEP,',INTO=RECORD
         J     CEEUOPT_IOHEAP64_2
CEEUOPT_IOHEAP64_1    DS  0H
         STRING64 (RECORD,,T),',FREE,',INTO=RECORD
CEEUOPT_IOHEAP64_2    DS  0H
         STRING64 (RECORD,,T),(SUBOPT_IOHE6431_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_IOHE6431_INC,F,L9B),         X
               INTO=RECORD
         TM    SUBOPT_IOHE6431_ALLOC,X'40'  Free
         JO    CEEUOPT_IOHEAP64_3
         STRING64 (RECORD,,T),',KEEP,',INTO=RECORD
         J     CEEUOPT_IOHEAP64_4
CEEUOPT_IOHEAP64_3    DS  0H
         STRING64 (RECORD,,T),',FREE,',INTO=RECORD
CEEUOPT_IOHEAP64_4    DS  0H
         STRING64 (RECORD,,T),(SUBOPT_IOHE6424_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_IOHE6424_INC,F,L9B),         X
               INTO=RECORD
         TM    SUBOPT_IOHE6424_ALLOC,X'40'  Free
         JO    CEEUOPT_IOHEAP64_5
         STRING64 (RECORD,,T),',KEEP)',INTO=RECORD
         J     CEEUOPT_IOHEAP64_6
CEEUOPT_IOHEAP64_5    DS  0H
         STRING64 (RECORD,,T),',FREE)',INTO=RECORD
CEEUOPT_IOHEAP64_6    DS  0H
         BRASL R14,SPACE1
CEEUOPT_IOHE64X DS 0H
         DROP  R5
CEEUOPT_NOIOHEAP64    DS  0H
*        CLI   WKCELL1,C'1'            64bit LE-Option
*        JNE   CEEUOPT_NOLIBHEAP64       no leave
         CLI   OPTION_LIHE64_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_LIHE64X              no leave
         LR    R5,R4
         A     R5,OPTION_LIHE64_SUB
         USING SUBOPT_LIHE64,R5
         STRING64 '      LIBHEAP64(',INTO=RECORD
         STRING64 (RECORD,,T),(SUBOPT_LIHE64_INIT,FD,L16B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_LIHE64_INC,FD,L16B),         X
               INTO=RECORD
         TM    SUBOPT_LIHE64_ALLOC,X'40'  Free
         JO    CEEUOPT_LIBHEAP64_1
         STRING64 (RECORD,,T),',KEEP,',INTO=RECORD
         J     CEEUOPT_LIBHEAP64_2
CEEUOPT_LIBHEAP64_1    DS  0H
         STRING64 (RECORD,,T),',FREE,',INTO=RECORD
CEEUOPT_LIBHEAP64_2    DS  0H
         STRING64 (RECORD,,T),(SUBOPT_LIHE6431_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_LIHE6431_INC,F,L9B),         X
               INTO=RECORD
         TM    SUBOPT_LIHE6431_ALLOC,X'40'  Free
         JO    CEEUOPT_LIBHEAP64_3
         STRING64 (RECORD,,T),',KEEP,',INTO=RECORD
         J     CEEUOPT_LIBHEAP64_4
CEEUOPT_LIBHEAP64_3    DS  0H
         STRING64 (RECORD,,T),',FREE,',INTO=RECORD
CEEUOPT_LIBHEAP64_4    DS  0H
         STRING64 (RECORD,,T),(SUBOPT_LIHE6424_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_LIHE6424_INC,F,L9B),         X
               INTO=RECORD
         TM    SUBOPT_LIHE6424_ALLOC,X'40'  Free
         JO    CEEUOPT_LIBHEAP64_5
         STRING64 (RECORD,,T),',KEEP)',INTO=RECORD
         J     CEEUOPT_LIBHEAP64_6
CEEUOPT_LIBHEAP64_5    DS  0H
         STRING64 (RECORD,,T),',FREE)',INTO=RECORD
CEEUOPT_LIBHEAP64_6    DS  0H
         BRASL R14,SPACE1
CEEUOPT_LIHE64X DS 0H
         DROP  R5
CEEUOPT_NOLIBHEAP64    DS  0H
         CLI   OPTION_LIBS_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_LIBSX                no leave
         LR    R5,R4
         A     R5,OPTION_LIBS_SUB
         USING SUBOPT_LIBS,R5
         STRING64 '      LIBSTACK(',(SUBOPT_LIBS_INIT,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_LIBS_INC,F,L9B),INTO=RECORD
         TM    SUBOPT_LIBS_ALLOC,X'40'  Free?
         JO    CEEUOPT_LIBSTACK1
         STRING64 (RECORD,,T),',KEEP)',INTO=RECORD
         J     CEEUOPT_LIBSTACK2
CEEUOPT_LIBSTACK1   DS  0H
         STRING64 (RECORD,,T),',FREE)',INTO=RECORD
CEEUOPT_LIBSTACK2   DS  0H
         BRASL R14,SPACE1
CEEUOPT_LIBSX  DS 0H
         DROP  R5
         CLI   OPTION_MSGF_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_MSGFX                no leave
         LR    R5,R4
         A     R5,OPTION_MSGF_SUB
         USING SUBOPT_MSGF,R5
         STRING64 '      MSGFILE(',SUBOPT_MSGF_DD,INTO=RECORD
         STRING64 (RECORD,,T),',',SUBOPT_MSGF_RFM,INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_MSGF_RECL,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_MSGF_BLKS,F,L9B),INTO=RECORD
         CLC   SUBOPT_MSGF_ENQ,BLANKS
         JE    CEEUOPT_MSGFILE1
         STRING64 (RECORD,,T),',ENQ)',INTO=RECORD
         J     CEEUOPT_MSGFILE2
CEEUOPT_MSGFILE1 DS  0H
         STRING64 (RECORD,,T),',NOENQ)',INTO=RECORD
CEEUOPT_MSGFILE2 DS  0H
         BRASL R14,SPACE1
CEEUOPT_MSGFX  DS 0H
         DROP  R5
         CLI   OPTION_MSGQ_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_MSGQX                no leave
         LR    R5,R4
         A     R5,OPTION_MSGQ_SUB
         USING SUBOPT_MSGQ,R5
         STRING64 '      MSGQ(',(SUBOPT_MSGQ_COUNT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_MSGQX  DS 0H
         DROP  R5
         CLI   OPTION_NATL_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_NATLX                no leave
         LR    R5,R4
         A     R5,OPTION_NATL_SUB
         USING SUBOPT_NATL,R5
         STRING64 '      NATLANG(',SUBOPT_NATL_ID,')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_NATLX  DS 0H
         DROP  R5
         CLI   OPTION_OCST_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_OCSTX                no leave
         STRING64 '      OCSTATUS',INTO=RECORD
         TM    OPTION_OCST_FLAG,X'80'
         JO    CEEUOPT_OCSTATUS
         STRING64 '    NOOCSTATUS',INTO=RECORD
CEEUOPT_OCSTATUS DS  0H
         BRASL R14,SPACE1
CEEUOPT_OCSTX  DS 0H
         CLI   OPTION_PC_FLAG,X'81'         CEEUOPT specified ?
         JNE   CEEUOPT_PCX                  no leave
         STRING64 '      PC',INTO=RECORD
         TM    OPTION_PC_FLAG,X'80'
         JO    CEEUOPT_PC
         STRING64 '    NOPC',INTO=RECORD
CEEUOPT_PC       DS  0H
         BRASL R14,SPACE1
CEEUOPT_PCX    DS 0H
         CLI   OPTION_PLIT_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_PLITX                no leave
         LR    R5,R4
         A     R5,OPTION_PLIT_SUB
         USING SUBOPT_PLIT,R5
         STRING64 '      PLITASKCOUNT(',(SUBOPT_PLIT_COUNT,F,L9B),     X
               INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_PLITX  DS 0H
         CLI   OPTION_POSI_FLAG,X'81'       CEEUOPT specified ?
         JNH   CEEUOPT_POSIX                no leave
         DROP  R5
         STRING64 '      POSIX(ON)',INTO=RECORD
         TM    OPTION_POSI_FLAG,X'80'
         JO    CEEUOPT_POSIX1
         STRING64 '      POSIX(OFF)',INTO=RECORD
CEEUOPT_POSIX1   DS  0H
         BRASL R14,SPACE1
CEEUOPT_POSIX  DS 0H
         CLI   OPTION_PROF_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_PROFX                no leave
         LR    R5,R4
         A     R5,OPTION_PROF_SUB
         USING SUBOPT_PROF,R5
         STRING64 '      PROFILE(ON',INTO=RECORD
         TM    OPTION_PROF_FLAG,X'80'
         JO    CEEUOPT_PROFILE
         STRING64 '      PROFILE(OFF',INTO=RECORD
CEEUOPT_PROFILE  DS  0H
         CLC   SUBOPT_PROF_STRL,=H'0'
         JE    CEEUOPT_PROFILE1
         STRING64 (RECORD,,T),',"',(SUBOPT_PROF_STR,60),'")',          X
               INTO=RECORD
         J     CEEUOPT_PROFILE9
CEEUOPT_PROFILE1 DS  0H
         STRING64 (RECORD,,T),',"")',INTO=RECORD
CEEUOPT_PROFILE9 DS  0H
         BRASL R14,SPACE1
CEEUOPT_PROFX  DS 0H
         DROP  R5
         CLI   OPTION_PRTU_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_PRTUX                no leave
         LR    R5,R4
         A     R5,OPTION_PRTU_SUB
         USING SUBOPT_PRTU,R5
         STRING64 '      PRTUNIT(',(SUBOPT_PRTU_COUNT,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_PRTUX  DS 0H
         DROP  R5
         CLI   OPTION_PUNU_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_PUNUX                no leave
         LR    R5,R4
         A     R5,OPTION_PUNU_SUB
         USING SUBOPT_PUNU,R5
         STRING64 '      PUNUNIT(',(SUBOPT_PUNU_COUNT,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_PUNUX  DS 0H
         DROP  R5
         CLI   OPTION_RDRU_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_RDRUX                no leave
         LR    R5,R4
         A     R5,OPTION_RDRU_SUB
         USING SUBOPT_RDRU,R5
         STRING64 '      RDRUNIT(',(SUBOPT_RDRU_COUNT,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_RDRUX  DS 0H
         DROP  R5
         CLI   OPTION_RECP_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_RECPX                no leave
         LR    R5,R4
         A     R5,OPTION_RECP_SUB
         USING SUBOPT_RECP,R5
         STRING64 '      RECPAD(OFF)',INTO=RECORD
         CLC   SUBOPT_RECP_FLG,=F'4'
         JE    CEEUOPT_RECPAD
         STRING64 '      RECPAD(ON)',INTO=RECORD
         CLC   SUBOPT_RECP_FLG,=F'2'
         JE    CEEUOPT_RECPAD
         STRING64 '      RECPAD(VAR)',INTO=RECORD
CEEUOPT_RECPAD   DS  0H
         BRASL R14,SPACE1
CEEUOPT_RECPX  DS 0H
         DROP  R5
         CLI   OPTION_RPTO_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_RPTOX                no leave
         STRING64 '      RPTOPTS(ON)',INTO=RECORD
         TM    OPTION_RPTO_FLAG,X'80'
         JO    CEEUOPT_RPTOPTS
         STRING64 '      RPTOPTS(OFF)',INTO=RECORD
CEEUOPT_RPTOPTS  DS  0H
         BRASL R14,SPACE1
CEEUOPT_RPTOX  DS 0H
         CLI   OPTION_RPTS_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_RPTSX                no leave
         STRING64 '      RPTSTG(ON)',INTO=RECORD
         TM    OPTION_RPTS_FLAG,X'80'
         JO    CEEUOPT_RPTSTG
         STRING64 '      RPTSTG(OFF)',INTO=RECORD
CEEUOPT_RPTSTG   DS  0H
         BRASL R14,SPACE1
CEEUOPT_RPTSX  DS 0H
         CLI   OPTION_RTER_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_RTERX                no leave
         STRING64 '      RTEREUS',INTO=RECORD
         TM    OPTION_RTER_FLAG,X'80'
         JO    CEEUOPT_RTEREUS
         STRING64 '    NORTEREUS',INTO=RECORD
CEEUOPT_RTEREUS  DS  0H
         BRASL R14,SPACE1
CEEUOPT_RTERX  DS 0H
         CLI   OPTION_SIMV_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_SIMVX                no leave
         STRING64 '      SIMVRD',INTO=RECORD
         TM    OPTION_SIMV_FLAG,X'80'
         JO    CEEUOPT_SIMVRD
         STRING64 '    NOSIMVRD',INTO=RECORD
CEEUOPT_SIMVRD   DS  0H
         BRASL R14,SPACE1
CEEUOPT_SIMVX  DS 0H
         CLI   OPTION_STAC_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_STACX                no leave
         LR    R5,R4
         A     R5,OPTION_STAC_SUB
         USING SUBOPT_STAC,R5
         STRING64 '      STACK(',INTO=RECORD
         STRING64 (RECORD,,T),(SUBOPT_STAC_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_STAC_INC,F,L9B),INTO=RECORD
         TM    SUBOPT_STAC_ALLOC,X'80'  Below
         JO    CEEUOPT_STACK1
         STRING64 (RECORD,,T),',ANYWHERE',INTO=RECORD
         J     CEEUOPT_STACK2
CEEUOPT_STACK1      DS  0H
         STRING64 (RECORD,,T),',BELOW',INTO=RECORD
CEEUOPT_STACK2      DS  0H
         TM    SUBOPT_STAC_ALLOC,X'40'  Free
         JO    CEEUOPT_STACK3
         STRING64 (RECORD,,T),',KEEP,',INTO=RECORD
         J     CEEUOPT_STACK4
CEEUOPT_STACK3      DS  0H
         STRING64 (RECORD,,T),',FREE,',INTO=RECORD
CEEUOPT_STACK4      DS  0H
         STRING64 (RECORD,,T),(SUBOPT_STAC_DINIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_STAC_DINC,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_STACX  DS 0H
*        CLI   WKCELL1,C'1'            64bit LE-Option
*        JNE   CEEUOPT_NOSTACK64         no leave
         CLI   OPTION_STAC64_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_STAC64X              no leave
         LR    R5,R4
         A     R5,OPTION_STAC64_SUB
         USING SUBOPT_STAC64,R5
         STRING64 '      STACK64(',INTO=RECORD
         STRING64 (RECORD,,T),(SUBOPT_STAC64_INIT,FD,L9B),INTO=RECORD
         STRING64 (RECORD,,T),'M,',(SUBOPT_STAC64_INC,FD,L9B),         X
               INTO=RECORD
         STRING64 (RECORD,,T),'M,',(SUBOPT_STAC64_MAX,FD,L9B),         X
               INTO=RECORD
         STRING64 (RECORD,,T),'M)',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_STAC64X DS 0H
         DROP  R5
CEEUOPT_NOSTACK64   DS  0H
         CLI   OPTION_STOR_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_STORX                no leave
         LR    R5,R4
         A     R5,OPTION_STOR_SUB
         USING SUBOPT_STOR,R5
         STRING64 '      STORAGE(',INTO=RECORD
         TM    SUBOPT_STOR_CSF,X'80'
         JO    CEEUOPT_STORAGE1
         STRING64 (RECORD,,T),'NONE,',INTO=RECORD
         JNE   CEEUOPT_STORAGE2
CEEUOPT_STORAGE1       DS  0H
         STRING64 (RECORD,,T),(SUBOPT_STOR_AHSC,1,X),',',INTO=RECORD
CEEUOPT_STORAGE2       DS  0H
         TM    SUBOPT_STOR_CSF,X'40'
         JO    CEEUOPT_STORAGE3
         STRING64 (RECORD,,T),'NONE,',INTO=RECORD
         JNE   CEEUOPT_STORAGE4
CEEUOPT_STORAGE3       DS  0H
         STRING64 (RECORD,,T),(SUBOPT_STOR_FHSC,1,X),',',INTO=RECORD
CEEUOPT_STORAGE4       DS  0H
         TM    SUBOPT_STOR_CSF,X'20'
         JO    CEEUOPT_STORAGE5
         STRING64 (RECORD,,T),'NONE,',INTO=RECORD
         JNE   CEEUOPT_STORAGE6
CEEUOPT_STORAGE5       DS  0H
         STRING64 (RECORD,,T),(SUBOPT_STOR_ADSC,1,X),',',INTO=RECORD
CEEUOPT_STORAGE6       DS  0H
         STRING64 (RECORD,,T),(SUBOPT_STOR_SOSSZ,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_STORX  DS 0H
         CLI   OPTION_TERM_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_TERMX                no leave
         LR    R5,R4
         A     R5,OPTION_TERM_SUB
         USING SUBOPT_TERM,R5
         STRING64 '      TERMTHDACT(QUIET,',INTO=RECORD
         CLC   SUBOPT_TERM_FLG,=F'8'
         JE    CEEUOPT_TERMTHDACT1
         STRING64 '      TERMTHDACT(MSG,',INTO=RECORD
         CLC   SUBOPT_TERM_FLG,=F'4'
         JE    CEEUOPT_TERMTHDACT1
         STRING64 '      TERMTHDACT(TRACE,',INTO=RECORD
         CLC   SUBOPT_TERM_FLG,=F'2'
         JE    CEEUOPT_TERMTHDACT1
         STRING64 '      TERMTHDACT(DUMP,',INTO=RECORD
CEEUOPT_TERMTHDACT1    DS  0H
         TM    SUBOPT_TERM_CESE,X'80'     CESE
         JNO   CEEUOPT_TERMTHDACT2
         STRING64 (RECORD,,T),'CESE',INTO=RECORD
         J     CEEUOPT_TERMTHDACT3
CEEUOPT_TERMTHDACT2    DS  0H
         TM    SUBOPT_TERM_CESE,X'40'     CICSDDS
         JNO   CEEUOPT_TERMTHDACT3
         STRING64 (RECORD,,T),'CICSDDS',INTO=RECORD
CEEUOPT_TERMTHDACT3    DS  0H
         STRING64 (RECORD,,T),',',(SUBOPT_TERM_STOR,H,L3B),')',        X
               INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_TERMX  DS 0H
         DROP  R5
         CLI   OPTION_TEST_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_TESTX                no leave
         LR    R5,R4
         A     R5,OPTION_TEST_SUB
         USING SUBOPT_TEST,R5
         STRING64 '      TEST(',INTO=RECORD
         TM    OPTION_TEST_FLAG,X'80'
         JO    CEEUOPT_TEST
         STRING64 '    NOTEST(',INTO=RECORD
CEEUOPT_TEST     DS  0H
         CLC   SUBOPT_TEST_OPT,=F'4'
         JNE   CEEUOPT_TEST1
         STRING64 (RECORD,,T),'ALL,',INTO=RECORD
         J     CEEUOPT_TEST3
CEEUOPT_TEST1    DS  0H
         CLC   SUBOPT_TEST_OPT,=F'2'
         JNE   CEEUOPT_TEST3
         STRING64 (RECORD,,T),'ERROR,',INTO=RECORD
         BRASL R14,SPACE1
         J     CEEUOPT_TEST3
CEEUOPT_TEST2    DS  0H
         STRING64 (RECORD,,T),'NONE,',INTO=RECORD
CEEUOPT_TEST3    DS  0H
         STRING64 (RECORD,,T),SUBOPT_TEST_CF,INTO=RECORD
         STRING64 (RECORD,,T),',',SUBOPT_TEST_CL,INTO=RECORD
         STRING64 (RECORD,,T),',',SUBOPT_TEST_PF,INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_TESTX  DS 0H
         DROP  R5
         CLI   OPTION_THRH_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_THRHX                no leave
         LR    R5,R4
         A     R5,OPTION_THRH_SUB
         USING SUBOPT_THRH,R5
         STRING64 '      THREADHEAP(',INTO=RECORD
         STRING64 (RECORD,,T),(SUBOPT_THRH_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_THRH_INC,F,L9B),INTO=RECORD
         TM    SUBOPT_THRH_ALLOC,X'80'  Below
         JO    CEEUOPT_THREADHEAP1
         STRING64 (RECORD,,T),',ANYWHERE',INTO=RECORD
         J     CEEUOPT_THREADHEAP2
CEEUOPT_THREADHEAP1    DS  0H
         STRING64 (RECORD,,T),',BELOW',INTO=RECORD
CEEUOPT_THREADHEAP2    DS  0H
         TM    SUBOPT_THRH_ALLOC,X'40'  Free
         JO    CEEUOPT_THREADHEAP3
         STRING64 (RECORD,,T),',KEEP)',INTO=RECORD
         J     CEEUOPT_THREADHEAP4
CEEUOPT_THREADHEAP3    DS  0H
         STRING64 (RECORD,,T),',FREE)',INTO=RECORD
CEEUOPT_THREADHEAP4    DS  0H
         BRASL R14,SPACE1
CEEUOPT_THRHX  DS 0H
         CLI   OPTION_THRS_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_THRSX                no leave
         LR    R5,R4
         A     R5,OPTION_THRS_SUB
         USING SUBOPT_THRS,R5
         STRING64 '      THREADSTACK(',INTO=RECORD
         STRING64 (RECORD,,T),(SUBOPT_THRS_INIT,F,L9B),INTO=RECORD
         STRING64 (RECORD,,T),',',(SUBOPT_THRS_INC,F,L9B),INTO=RECORD
         TM    SUBOPT_THRS_ALLOC,X'80'  Below
         JO    CEEUOPT_THREADSTACK1
         STRING64 (RECORD,,T),',ANYWHERE',INTO=RECORD
         J     CEEUOPT_THREADSTACK2
CEEUOPT_THREADSTACK1    DS  0H
         STRING64 (RECORD,,T),',BELOW',INTO=RECORD
CEEUOPT_THREADSTACK2    DS  0H
         TM    SUBOPT_THRS_ALLOC,X'40'  Free
         JO    CEEUOPT_THREADSTACK3
         STRING64 (RECORD,,T),',KEEP)',INTO=RECORD
         J     CEEUOPT_THREADSTACK4
CEEUOPT_THREADSTACK3    DS  0H
         STRING64 (RECORD,,T),',FREE)',INTO=RECORD
CEEUOPT_THREADSTACK4    DS  0H
         BRASL R14,SPACE1
CEEUOPT_THRSX  DS 0H
         DROP  R5
         LR    R5,R4
*        CLI   WKCELL1,C'1'            64bit LE-Option
*        JNE   CEEUOPT_NOTHRS64          no leave
         CLI   OPTION_THRS64_FLAG,X'81'     CEEUOPT specified ?
         JNE   CEEUOPT_THRS64X              no leave
         LR    R5,R4
         A     R5,OPTION_THRS64_SUB
         USING SUBOPT_THRS64,R5
         STRING64 '      THREADSTACK64(',INTO=RECORD
         STRING64 (RECORD,,T),(SUBOPT_THRS64_INIT,FD,L9B),INTO=RECORD
         STRING64 (RECORD,,T),'M,',(SUBOPT_THRS64_INC,FD,L9B),         X
               INTO=RECORD
         STRING64 (RECORD,,T),'M,',(SUBOPT_THRS64_MAX,FD,L9B),         X
               INTO=RECORD
         STRING64 (RECORD,,T),'M)',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_THRS64X DS 0H
CEEUOPT_NOTHRS64       DS  0H
         CLI   OPTION_TRAC_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_TRACX                no leave
         LR    R5,R4
         A     R5,OPTION_TRAC_SUB
         USING SUBOPT_TRAC,R5
         STRING64 '      TRACE(ON,',INTO=RECORD
         TM    OPTION_TRAP_FLAG,X'80'
         JO    CEEUOPT_TRACE
         STRING64 '      TRACE(OFF,',INTO=RECORD
CEEUOPT_TRACE          DS  0H
         STRING64 (RECORD,,T),(SUBOPT_TRAC_SIZE,F,L9B),INTO=RECORD
         TM    SUBOPT_TRAC_FLG1,X'80'       DUMP
         JO    CEEUOPT_TRACE1
         STRING64 (RECORD,,T),',NODUMP,',INTO=RECORD
         JO    CEEUOPT_TRACE2
CEEUOPT_TRACE1         DS  0H
         STRING64 (RECORD,,T),',DUMP,',INTO=RECORD
CEEUOPT_TRACE2         DS  0H
         STRING64 (RECORD,,T),'LE=',(SUBOPT_TRAC_GFLG,F,L9B),          X
               INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_TRACX  DS 0H
         DROP  R5
         CLI   OPTION_TRAP_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_TRAPX                no leave
         LR    R5,R4
         A     R5,OPTION_TRAP_SUB
         USING SUBOPT_TRAP,R5
         STRING64 '      TRAP(ON,',INTO=RECORD
         TM    OPTION_TRAP_FLAG,X'80'
         JO    CEEUOPT_TRAP1
         STRING64 '      TRAP(OFF,',INTO=RECORD
CEEUOPT_TRAP1          DS  0H
         TM    SUBOPT_TRAP_FLG,X'80'   SPIE ?
         JO    CEEUOPT_TRAP2
         STRING64 (RECORD,,T),'NOSPIE)',INTO=RECORD
         J     CEEUOPT_TRAP3
CEEUOPT_TRAP2          DS  0H
         STRING64 (RECORD,,T),'SPIE)',INTO=RECORD
CEEUOPT_TRAP3          DS  0H
         BRASL R14,SPACE1
CEEUOPT_TRAPX  DS 0H
         DROP  R5
         CLI   OPTION_UPSI_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_UPSIX                no leave
         LR    R5,R4
         A     R5,OPTION_UPSI_SUB
         USING SUBOPT_UPSI,R5
         STRING64 '      UPSI(',SUBOPT_UPSI_SW,')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_UPSIX  DS 0H
         DROP  R5
         CLI   OPTION_USRH_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_USRHX                no leave
         LR    R5,R4
         A     R5,OPTION_USRH_SUB
         USING SUBOPT_USRH,R5
         STRING64 '      USRHDLR(',SUBOPT_USRH_UN1,INTO=RECORD
         TM    OPTION_USRH_FLAG,X'80'
         JO    CEEUOPT_USRHDLR
         STRING64 '    NOUSRHDLR(',SUBOPT_USRH_UN1,INTO=RECORD
CEEUOPT_USRHDLR        DS  0H
         STRING64 (RECORD,,T),',',SUBOPT_USRH_UN2,INTO=RECORD
         STRING64 (RECORD,,T),')',INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_USRHX  DS 0H
         DROP  R5
         CLI   OPTION_VCTR_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_VCTRX                no leave
         STRING64 '      VCTRSAVE(ON)',INTO=RECORD
         TM    OPTION_VCTR_FLAG,X'80'
         JO    CEEUOPT_VCTRSAVE
         STRING64 '      VCTRSAVE(OFF)',INTO=RECORD
CEEUOPT_VCTRSAVE DS  0H
         BRASL R14,SPACE1
CEEUOPT_VCTRX  DS 0H
         CLI   OPTION_XPLI_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_XPLIX                no leave
         STRING64 '      XPLINK(ON)',INTO=RECORD
         TM    OPTION_XPLI_FLAG,X'80'
         JO    CEEUOPT_XPLINK
         STRING64 '      XPLINK(OFF)',INTO=RECORD
CEEUOPT_XPLINK   DS  0H
         BRASL R14,SPACE1
CEEUOPT_XPLIX  DS 0H
         CLI   OPTION_XUFL_FLAG,X'81'       CEEUOPT specified ?
         JNE   CEEUOPT_XUFLX                no leave
         LR    R5,R4
         A     R5,OPTION_XUFL_SUB
         USING SUBOPT_XUFL,R5
         STRING64 '      XUFLOW(OFF)',INTO=RECORD
         CLC   OPTION_XUFL_FLAG,=F'4'
         JE    CEEUOPT_XUFLOW
         STRING64 '      XUFLOW(ON)',INTO=RECORD
         CLC   OPTION_XUFL_FLAG,=F'2'
         JE    CEEUOPT_XUFLOW
         STRING64 '      XUFLOW(AUTO)',INTO=RECORD
CEEUOPT_XUFLOW   DS  0H
         BRASL R14,SPACE1
CEEUOPT_XUFLX  DS 0H
         DROP  R5
         J     CEEUOPT_99              end
CEEUOPT_90 DS 0H
         STRING64 'No ','LE User Options present',INTO=RECORD
         BRAS  R14,SPACE1
         J     CEEUOPT_99              end
CEEUOPT_97 DS    0H
         STRING64 '    CEEOCB Version not valid: ',(8(R4),2,X),        X
               INTO=RECORD
         BRASL R14,SPACE1
         J     CEEUOPT_99              end
CEEUOPT_98 DS    0H
         STRING64 '    Eyecatcher CEEOCB not valid: ',(0(R4),8),       X
               INTO=RECORD
         BRASL R14,SPACE1
CEEUOPT_99   DS 0H
         BRAS  R14,BLANK1
         L     R14,BINDSAVE         Restore R14
         BR    R14            return
         DROP  R4,R8
*------------------------------------------------------------*
*    C/370 Program OPLINK Bit on !!!!!                       *
*    Offset instead of relative pointer!!!                   *
*------------------------------------------------------------*
C_370    DS 0H
         LR    R2,R4
         A     R2,12(,R4)          PPA1
         CLI   1(R2),X'CE'         Check PPA1
         JNE   COBANAL_08            seems invalid PPA1
         A     R4,4(,R2)           PPA2 pointer
         LR    R2,R4
         J     COBANAL_09          check languages
*------------------------------------------------------------*   RS0305
*    C/C++ New layout                                        *   RS1107
*------------------------------------------------------------*   RS0305
C_370_NEW DS 0H                  C/C++ or PL1?                   RS0305
         CLC   20(2,R4),=X'CE03'    CEL C/C++?                   RS1007
         JE    COBANAL_09A                                       RS1007
         CLC   20(2,R4),=X'CE01'    CEL C/C++?                   RS1007
         JE    COBANAL_09A                                       RS1007
         CLC   20(2,R4),=X'CE0A'    CEL PL1?                     RS1007
         JE    COBANAL_10A                                       RS1007
         BRAS  R14,SPACE1
         J     COBANAL_08            seems invalid               RS0305
*------------------------------------------------------------*
*    COBOL/370 Program                                       *
*------------------------------------------------------------*
ENTCOBOLV5 DS 0H
*        C_370 and Cobol V5 sharing the same CEE-Eyecatcher
         CLC   0(4,R4),=XL4'47F0F014' Not Cobol V5               RS0316
         JNE   C_370      looks like C                           RS0316
         MVC   LE_TGT_WS_LENGTH,8(R4)                            RS1007
         LR    R2,R4
         A     R2,12(,R4)      PPA1
         MVC   LE_PGM_NAME,BLANKS                                RS0116
         IC    R15,57(,R2)             get length                RS0116
         AHI   R15,-1                  -1                        RS0116
         EX    R15,MOVE_PGM_NAME       move pgm name             RS0116
         L     R2,44(,R4)      Options
         USING COBOLV5_DSECT,R2
         MVI   LE_SWITCH,C'1'
         MVC   LE_CCSID,CV5_CCSID
         MVC   LE_DATA_STATEMENTS,CV5_DATA_STATEMENTS
         MVC   LE_PROC_LINES,CV5_PROC_LINES
         XC    LE_YEAR_WINDOW,LE_YEAR_WINDOW
         XC    LE_TGT_NO_FCB,LE_TGT_NO_FCB   No FIB for COB V5   RS0116
*        ICM   R2,B'1111',CV5_TGT_ADDRESS    Start of data       RS1007
*        JZ    COBOL_370_15      not present leave               RS1007
*        USING COBOL_DAB_DSECT,R2  DAB for RENT                  RS1007
*        CLC   CV5_DAB_EYEC,=CL4'IDBA' Test RENT                 RS1007
*        JNE   COBOL_370_05      NORENT                          RS1007
*        MVC   LE_DAB_FIB_OFF+1,CV5_DAB_FIB_OFF                  RS1007
*        L     R2,CV5_DAB_TGT    TGT                             RS1007
*        AHI   R2,6              but +6 for some reason          RS1007
*        ST    R2,LE_TGT_ADDRESS Save for later                  RS1007
*        USING COBOL_TGT_DSECT,R2  TGT                           RS1007
*        MVC   LE_TGT_NO_FCB,CV5_TGT_NO_FCBS                     RS1007
*        MVC   LE_TGT_WS_LENGTH,CV5_TGT_WS_LENGTH                RS1007
*        MVC   LE_TGT_REG,CV5_TGT_REG                            RS1007
*        L     R2,LE_DAB_FIB_OFF  FIB offset 3 Bytes             RS1007
*        A     R2,CV5_PRI_EP_ADDRESS + Entry-Point               RS1007
*        ST    R2,LE_TGT_FIB_PTR     Save for later              RS1007
*        J     COBOL_370_15                                      RS1007
*OBOL_370_05 DS 0H               NORENT                          RS1007
*        ST    R2,LE_TGT_ADDRESS Save for later                  RS1007
*        USING COBOL_TGT_DSECT,R2  TGT                           RS1007
*        MVC   LE_TGT_NO_FCB,CV5_TGT_NO_FCBS                     RS1007
*        MVC   LE_TGT_WS_LENGTH,CV5_TGT_WS_LENGTH                RS1007
*        MVC   LE_TGT_REG,CV5_TGT_REG                            RS1007
*        MVC   LE_TGT_PTR_FCB_CELL,CV5_TGT_PTR_FCB_CELL          RS1007
*OBOL_370_15 DS 0H
*        STRING64 'CV5_STATUS_BYTE_01 ',(CV5_STATUS_BYTE_01,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_02 ',(CV5_STATUS_BYTE_02,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_03 ',(CV5_STATUS_BYTE_03,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_04 ',(CV5_STATUS_BYTE_04,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_05 ',(CV5_STATUS_BYTE_05,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_06 ',(CV5_STATUS_BYTE_06,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_07 ',(CV5_STATUS_BYTE_07,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_08 ',(CV5_STATUS_BYTE_08,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_09 ',(CV5_STATUS_BYTE_09,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_10 ',(CV5_STATUS_BYTE_10,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_11 ',(CV5_STATUS_BYTE_11,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_12 ',(CV5_STATUS_BYTE_12,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_13 ',(CV5_STATUS_BYTE_13,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_14 ',(CV5_STATUS_BYTE_14,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_15 ',(CV5_STATUS_BYTE_15,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_16 ',(CV5_STATUS_BYTE_16,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_17 ',(CV5_STATUS_BYTE_17,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_18 ',(CV5_STATUS_BYTE_18,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_19 ',(CV5_STATUS_BYTE_19,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_20 ',(CV5_STATUS_BYTE_20,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_21 ',(CV5_STATUS_BYTE_21,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_22 ',(CV5_STATUS_BYTE_22,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_23 ',(CV5_STATUS_BYTE_23,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_24 ',(CV5_STATUS_BYTE_24,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_25 ',(CV5_STATUS_BYTE_25,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_26 ',(CV5_STATUS_BYTE_26,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_27 ',(CV5_STATUS_BYTE_27,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CV5_STATUS_BYTE_28 ',(CV5_STATUS_BYTE_28,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
         MVC   LE_STATUS_BYTE_01,CV5_STATUS_BYTE_01
         MVC   LE_STATUS_BYTE_02,CV5_STATUS_BYTE_02
         MVC   LE_STATUS_BYTE_03,CV5_STATUS_BYTE_03
         MVC   LE_STATUS_BYTE_04,CV5_STATUS_BYTE_04
         MVC   LE_STATUS_BYTE_05,CV5_STATUS_BYTE_05
         MVC   LE_STATUS_BYTE_06,CV5_STATUS_BYTE_06
         MVC   LE_STATUS_BYTE_07,CV5_STATUS_BYTE_07
         MVC   LE_STATUS_BYTE_08,CV5_STATUS_BYTE_08
         MVC   LE_STATUS_BYTE_09,CV5_STATUS_BYTE_09
         MVC   LE_STATUS_BYTE_10,CV5_STATUS_BYTE_10
         MVC   LE_STATUS_BYTE_11,CV5_STATUS_BYTE_11
         MVC   LE_STATUS_BYTE_12,CV5_STATUS_BYTE_12
         MVC   LE_STATUS_BYTE_13,CV5_STATUS_BYTE_13
         MVC   LE_STATUS_BYTE_14,CV5_STATUS_BYTE_14
         MVC   LE_STATUS_BYTE_15,CV5_STATUS_BYTE_15
         MVC   LE_STATUS_BYTE_16,CV5_STATUS_BYTE_16
         MVC   LE_STATUS_BYTE_17,CV5_STATUS_BYTE_17
         MVC   LE_STATUS_BYTE_18,CV5_STATUS_BYTE_18
         MVC   LE_STATUS_BYTE_19,CV5_STATUS_BYTE_19
         MVC   LE_STATUS_BYTE_20,CV5_STATUS_BYTE_20
         MVC   LE_STATUS_BYTE_21,CV5_STATUS_BYTE_21
         MVC   LE_STATUS_BYTE_22,CV5_STATUS_BYTE_22
         MVC   LE_STATUS_BYTE_23,CV5_STATUS_BYTE_23
         MVC   LE_STATUS_BYTE_24,CV5_STATUS_BYTE_24
         MVC   LE_STATUS_BYTE_25,CV5_STATUS_BYTE_25
         MVC   LE_STATUS_BYTE_26,CV5_STATUS_BYTE_26
         MVC   LE_STATUS_BYTE_27,CV5_STATUS_BYTE_27
         MVC   LE_STATUS_BYTE_28,CV5_STATUS_BYTE_28
         MVC   LE_STATUS_BYTE_29,CV5_STATUS_BYTE_29
         MVC   LE_STATUS_BYTE_30,CV5_STATUS_BYTE_30
         MVC   LE_STATUS_BYTE_31,CV5_STATUS_BYTE_31
         MVC   LE_ARCHLEVEL,CV5_ARCHLEVEL
         MVC   LE_OPT_LEVEL,CV5_OPT_LEVEL
         MVC   LE_BUILD_LEVEL,CV5_BUILD_LEVEL  only for Cobol V6 RS0316
         LR    R1,R4             Entry Point
         A     R1,12(,R4)        PPA1
         LR    R2,R4             Entry Point
         A     R2,4(,R1)         Offset to PPA2 from PPA1
         A     R2,12(,R2)        Timestamp string
         USING COBOLV5_COMP_INFO,R2
         MVC   LE_COMP_DAY,CV5_COMP_DAY
         MVC   LE_COMP_MONTH,CV5_COMP_MONTH
         MVC   LE_COMP_YEAR,CV5_COMP_YEAR
         MVC   LE_COMP_HOURS,CV5_COMP_HOURS
         MVC   LE_COMP_MIN,CV5_COMP_MIN
         MVC   LE_COMP_SEC,CV5_COMP_SEC
         MVC   LE_VERS,CV5_VERS
         MVC   LE_REL,CV5_REL
         MVC   LE_MOD,CV5_MOD
         J     LE370_INFO
*------------------------------------------------------------*
*    COBOL/370 Program                                       *
*------------------------------------------------------------*
COBOL_370 DS 0H
         USING COBOL_370_DSECT,R4
         LR    R2,R4
         A     R2,12(,R4)          PPA1
         CLI   1(R2),X'CE'         Check PPA1
         JNE   COBANAL_08            seems invalid PPA1
         ICM   R2,B'1111',4(R2)    PPA2 pointer
         JZ    COBANAL_08            seems invalid PPA2
         CLI   0(R2),X'05'         ID = Cobol!! (05)
         JNE   COBANAL_09            no, error
         MVI   LE_SWITCH,C'1'
         L     R4,CEE_PRI_EP_ADDRESS
         MVC   LE_VERS,CEE_VERS
         MVC   LE_REL,CEE_REL
         MVC   LE_MOD,CEE_MOD
         MVC   LE_CCSID,CEE_CCSID
         MVC   LE_PGM_NAME,CEE_PGM_NAME
         MVC   LE_COMP_DAY,CEE_COMP_DAY
         MVC   LE_COMP_MONTH,CEE_COMP_MONTH
         MVC   LE_COMP_YEAR,CEE_COMP_YEAR
         MVC   LE_COMP_HOURS,CEE_COMP_HOURS
         MVC   LE_COMP_MIN,CEE_COMP_MIN
         MVC   LE_COMP_SEC,CEE_COMP_SEC
         MVC   LE_DATA_STATEMENTS,CEE_DATA_STATEMENTS
         MVC   LE_PROC_LINES,CEE_PROC_LINES
         MVC   LE_YEAR_WINDOW,CEE_YEAR_WINDOW
         ICM   R2,B'1111',CEE_TGT_ADDRESS    Start of data       RS1007
         JZ    COBOL_370_15      not present leave               RS1007
         USING COBOL_DAB_DSECT,R2  DAB for RENT                  RS1007
         CLC   CEE_DAB_EYEC,=CL4'IDBA' Test RENT                 RS1007
         JNE   COBOL_370_05      NORENT                          RS1007
         MVC   LE_DAB_FIB_OFF+1,CEE_DAB_FIB_OFF                  RS1007
         L     R2,CEE_DAB_TGT    TGT                             RS1007
         AHI   R2,6              but +6 for some reason          RS1007
         ST    R2,LE_TGT_ADDRESS Save for later                  RS1007
         USING COBOL_TGT_DSECT,R2  TGT                           RS1007
         MVC   LE_TGT_NO_FCB,CEE_TGT_NO_FCBS                     RS1007
         MVC   LE_TGT_WS_LENGTH,CEE_TGT_WS_LENGTH                RS1007
         MVC   LE_TGT_REG,CEE_TGT_REG                            RS1007
         L     R2,LE_DAB_FIB_OFF  FIB offset 3 Bytes             RS1007
         A     R2,CEE_PRI_EP_ADDRESS + Entry-Point               RS1007
         ST    R2,LE_TGT_FIB_PTR     Save for later              RS1007
         J     COBOL_370_15                                      RS1007
COBOL_370_05 DS 0H               NORENT                          RS1007
         ST    R2,LE_TGT_ADDRESS Save for later                  RS1007
         USING COBOL_TGT_DSECT,R2  TGT                           RS1007
         MVC   LE_TGT_NO_FCB,CEE_TGT_NO_FCBS                     RS1007
         MVC   LE_TGT_WS_LENGTH,CEE_TGT_WS_LENGTH                RS1007
         MVC   LE_TGT_REG,CEE_TGT_REG                            RS1007
         MVC   LE_TGT_PTR_FCB_CELL,CEE_TGT_PTR_FCB_CELL          RS1007
COBOL_370_15 DS 0H
         DROP  R2
*        STRING64 'CEE_STATUS_BYTE_01 ',(CEE_STATUS_BYTE_01,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_02 ',(CEE_STATUS_BYTE_02,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_03 ',(CEE_STATUS_BYTE_03,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_04 ',(CEE_STATUS_BYTE_04,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_05 ',(CEE_STATUS_BYTE_05,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_06 ',(CEE_STATUS_BYTE_06,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_07 ',(CEE_STATUS_BYTE_07,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_08 ',(CEE_STATUS_BYTE_08,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_09 ',(CEE_STATUS_BYTE_09,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_10 ',(CEE_STATUS_BYTE_10,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_11 ',(CEE_STATUS_BYTE_11,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_12 ',(CEE_STATUS_BYTE_12,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_13 ',(CEE_STATUS_BYTE_13,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_14 ',(CEE_STATUS_BYTE_14,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_15 ',(CEE_STATUS_BYTE_15,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_16 ',(CEE_STATUS_BYTE_16,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_17 ',(CEE_STATUS_BYTE_17,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_18 ',(CEE_STATUS_BYTE_18,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_19 ',(CEE_STATUS_BYTE_19,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_20 ',(CEE_STATUS_BYTE_20,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_21 ',(CEE_STATUS_BYTE_21,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_22 ',(CEE_STATUS_BYTE_22,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_23 ',(CEE_STATUS_BYTE_23,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_24 ',(CEE_STATUS_BYTE_24,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_25 ',(CEE_STATUS_BYTE_25,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_26 ',(CEE_STATUS_BYTE_26,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_27 ',(CEE_STATUS_BYTE_27,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
*        STRING64 'CEE_STATUS_BYTE_28 ',(CEE_STATUS_BYTE_28,,X),       X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
         MVC   LE_STATUS_BYTE_01,CEE_STATUS_BYTE_01
         MVC   LE_STATUS_BYTE_02,CEE_STATUS_BYTE_02
         MVC   LE_STATUS_BYTE_03,CEE_STATUS_BYTE_03
         MVC   LE_STATUS_BYTE_04,CEE_STATUS_BYTE_04
         MVC   LE_STATUS_BYTE_05,CEE_STATUS_BYTE_05
         MVC   LE_STATUS_BYTE_06,CEE_STATUS_BYTE_06
         MVC   LE_STATUS_BYTE_07,CEE_STATUS_BYTE_07
         MVC   LE_STATUS_BYTE_08,CEE_STATUS_BYTE_08
         MVC   LE_STATUS_BYTE_09,CEE_STATUS_BYTE_09
         MVC   LE_STATUS_BYTE_10,CEE_STATUS_BYTE_10
         MVC   LE_STATUS_BYTE_11,CEE_STATUS_BYTE_11
         MVC   LE_STATUS_BYTE_12,CEE_STATUS_BYTE_12
         MVC   LE_STATUS_BYTE_13,CEE_STATUS_BYTE_13
         MVC   LE_STATUS_BYTE_14,CEE_STATUS_BYTE_14
         MVC   LE_STATUS_BYTE_15,CEE_STATUS_BYTE_15
         MVC   LE_STATUS_BYTE_16,CEE_STATUS_BYTE_16
         MVC   LE_STATUS_BYTE_17,CEE_STATUS_BYTE_17
         MVC   LE_STATUS_BYTE_18,CEE_STATUS_BYTE_18
         MVC   LE_STATUS_BYTE_19,CEE_STATUS_BYTE_19
         MVC   LE_STATUS_BYTE_20,CEE_STATUS_BYTE_20
         MVC   LE_STATUS_BYTE_21,CEE_STATUS_BYTE_21
         MVC   LE_STATUS_BYTE_22,CEE_STATUS_BYTE_22
         MVC   LE_STATUS_BYTE_23,CEE_STATUS_BYTE_23
         MVC   LE_STATUS_BYTE_24,CEE_STATUS_BYTE_24
         MVC   LE_STATUS_BYTE_25,CEE_STATUS_BYTE_25
         MVC   LE_STATUS_BYTE_26,CEE_STATUS_BYTE_26
         MVC   LE_STATUS_BYTE_27,CEE_STATUS_BYTE_27
         MVC   LE_STATUS_BYTE_28,CEE_STATUS_BYTE_28
         MVC   LE_STATUS_BYTE_29,CEE_STATUS_BYTE_29
         J     LE370_INFO
*------------------------------------------------------------*
*    COBOL/2 Program                                         *
*------------------------------------------------------------*
COBOL_2 DS 0H
         USING COBOL_2_DSECT,R4
         MVI   LE_SWITCH,C'2'
         L     R4,C2_GET_ENTRY
         L     R4,0(R4)
         L     R2,92(R4)          VS/COBOL II TGT                RS1107
         LTR   R2,R2              Check TGT                      RS1107
         JZ    COBOL_2_15        not present leave               RS1107
*>---------------------------------------------------------------HP1107
*        st    r2,c2_tgt                                         HP1107
*>---------------------------------------------------------------HP1107
         USING COBOL_DAB_DSECT,R2  DAB for RENT                  RS1107
         CLC   CEE_DAB_EYEC,=CL4'IDBA' Test RENT                 RS1107
         JNE   COBOL_2_05        NORENT                          RS1107
         MVC   LE_DAB_FIB_OFF+1,CEE_DAB_FIB_OFF                  RS1107
         L     R2,CEE_DAB_TGT    TGT                             RS1107
         AHI   R2,6              but +6 for some reason          RS1107
         ST    R2,LE_TGT_ADDRESS Save for later                  RS1107
         USING COBOL_TGT_DSECT,R2  TGT                           RS1107
         MVC   LE_TGT_NO_FCB,CEE_TGT_NO_FCBS                     RS1107
         MVC   LE_TGT_WS_LENGTH,CEE_TGT_WS_LENGTH                RS1107
         XC    LE_TGT_REG,LE_TGT_REG   clear                     RS1107
         L     R2,LE_DAB_FIB_OFF  FIB offset 3 Bytes             RS1107
         A     R2,C2_PRI_EP_ADDRESS + Entry-Point                RS1107
         ST    R2,LE_TGT_FIB_PTR     Save for later              RS1107
         J     COBOL_2_15                                        RS1107
COBOL_2_05   DS 0H               NORENT                          RS1107
         ST    R2,LE_TGT_ADDRESS Save for later                  RS1107
         USING COBOL_TGT_DSECT,R2  TGT                           RS1107
         MVC   LE_TGT_NO_FCB,CEE_TGT_NO_FCBS                     RS1107
         MVC   LE_TGT_WS_LENGTH,CEE_TGT_WS_LENGTH                RS1107
         XC    LE_TGT_REG,LE_TGT_REG   clear                     RS1107
         MVC   LE_TGT_PTR_FCB_CELL,CEE_TGT_PTR_FCB_CELL          RS1107
COBOL_2_15   DS 0H
         MVC   LE_VERS,C2_VERS
         MVC   LE_REL,C2_REL
         MVC   LE_MOD,C2_MOD
         MVC   LE_PGM_NAME,C2_PGM_NAME
         MVC   LE_COMP_DAY,C2_COMP_DAY
         MVC   LE_COMP_MONTH,C2_COMP_MONTH
*        MVC   LE_COMP_YEAR(2),=C'??'    COBOL2 not Y2K ready    JK1107
         MVC   LE_COMP_YEAR(2),=C'19'    Assume 19xx             JK1107
         CLC   C2_COMP_YEAR,=C'66'       Y2K?                    JK1107
         BNL   COBOL_2_DATE              No                      JK1107
         MVC   LE_COMP_YEAR(2),=C'20'    Yes                     JK1107
COBOL_2_DATE DS 0H                                               JK1107
         MVC   LE_COMP_YEAR+2(2),C2_COMP_YEAR
         MVC   LE_COMP_HOURS,C2_COMP_HOURS
         MVC   LE_COMP_MIN,C2_COMP_MIN
         MVC   LE_COMP_SEC,C2_COMP_SEC
         MVC   LE_DATA_STATEMENTS,C2_DATA_STATEMENTS
         MVC   LE_PROC_LINES,C2_PROC_LINES
         MVC   LE_STATUS_BYTE_01,C2_STATUS_BYTE_01
         MVC   LE_STATUS_BYTE_02,C2_STATUS_BYTE_02
         MVC   LE_STATUS_BYTE_03,C2_STATUS_BYTE_03
         MVC   LE_STATUS_BYTE_04,C2_STATUS_BYTE_04
         MVC   LE_STATUS_BYTE_05,C2_STATUS_BYTE_05
         MVC   LE_STATUS_BYTE_06,C2_STATUS_BYTE_06
         MVC   LE_STATUS_BYTE_07,C2_STATUS_BYTE_07
         MVC   LE_STATUS_BYTE_08,C2_STATUS_BYTE_08
         MVC   LE_STATUS_BYTE_09,C2_STATUS_BYTE_09
         MVC   LE_STATUS_BYTE_10,C2_STATUS_BYTE_10
         MVC   LE_STATUS_BYTE_11,C2_STATUS_BYTE_11
         MVC   LE_STATUS_BYTE_12,C2_STATUS_BYTE_12
         MVC   LE_STATUS_BYTE_13,C2_STATUS_BYTE_13
         MVC   LE_STATUS_BYTE_14,C2_STATUS_BYTE_14
         MVC   LE_STATUS_BYTE_15,C2_STATUS_BYTE_15
         MVC   LE_STATUS_BYTE_16,C2_STATUS_BYTE_16
         MVC   LE_STATUS_BYTE_17,C2_STATUS_BYTE_17
         MVC   LE_STATUS_BYTE_18,C2_STATUS_BYTE_18
         MVC   LE_STATUS_BYTE_19,C2_STATUS_BYTE_19
         MVC   LE_STATUS_BYTE_20,C2_STATUS_BYTE_20
         MVC   LE_STATUS_BYTE_21,C2_STATUS_BYTE_21
         MVC   LE_STATUS_BYTE_22,C2_STATUS_BYTE_22
         MVC   LE_STATUS_BYTE_23,C2_STATUS_BYTE_23
         MVC   LE_STATUS_BYTE_24,C2_STATUS_BYTE_24
         MVC   LE_STATUS_BYTE_25,C2_STATUS_BYTE_25
         CLI   CSECT_ANALYZE_KZ,C'M' First csect (main-ep)?      PF0608
         JNE   LE370_INFO            No,don't set CSCLANG or cnt PF0608
         AP    CNT_COBOL2,=P'1'          Increment counter        *CSC*
         MVC   CSCLANG(9),=CL9'COBOL'                             *CSC*
         J     LE370_INFO
*------------------------------------------------------------*
* OS/VS COBOL   Program                                      *
*------------------------------------------------------------*
COBOL_1 DS 0H
         USING COBOL_1_DSECT,R4
         MVI   LE_SWITCH,C'3'
         MVC   LE_VERS,BLANKS
         MVC   LE_REL,C1_REL
         MVC   LE_MOD,BLANKS
         MVC   LE_PGM_NAME,C1_PGM_NAME
         MVC   LE_COMP_DAY,C1_COMP_DAY
         MVC   LE_COMP_MONTH,C1_COMP_MONTH
         MVC   LE_COMP_YEAR,C1_COMP_YEAR
         MVC   LE_COMP_HOURS,C1_COMP_HOURS
         MVC   LE_COMP_MIN,C1_COMP_MIN
         MVC   LE_COMP_SEC,C1_COMP_SEC
         CLI   csect_analyze_kz,C'M' first csect (main-ep)       RS0108
         JNE   COBOL_1_05            don't set CSCCOMP           RS0108
         AP    CNT_COBOLI,=P'1'          Increment counter       PF0608
         MVC   CSCLANG(9),=CL9'COBOL'                             *CSC*
         STRING64 'OS/VS/COBOL ',C1_EYECATCHER,C1_REL,INTO=CSCCOMP CSC*
COBOL_1_05 DS 0H                                                 RS0108
         L     R5,C1_TGT_PTR
         USING COBOL_1_TGT,R5
         CLC   C1_CHECK,=CL8'SYSOUT'     check
         JE    LE370_INFO
*
*        UNABLE TO FIND THE TASK GLOBAL TABLE  -
*
NOTTGT   DS    0H
         STRING64 'Program ',PGMNAME_GET,' failed the TGT (Task Global'X
               'Table) test',INTO=RECORD
         BRAS  R14,SPACE2
         LA    R15,8
         J     COBANAL_EXIT
LE370_INFO DS  0H
*>---------------------------------------------------------------HP1107
         MVI   PRINT_LEAD_SPACE,C'N' Insert space                HP1107
         CLI   csect_analyze_kz,C'M' first csect (main-ep)       HP1107
         je    LE370_INFO_0                                      HP1107
         STRING64 '------------ This module is an included Member ---',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
         mvc   PGMNAME_GET,LE_PGM_NAME                           HP1107
         MVI   PRINT_LEAD_SPACE,C'Y' Insert space                HP1107
LE370_INFO_0 DS  0H                                              HP1107
*>---------------------------------------------------------------HP1107
         STRING64 '------------ Info --------------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
         MVC   JUSTDATA_LANG,=CL8'COBOL'                          =CMS=
         MVC   JUSTDATA_PGM,LE_PGM_NAME                           =CMS=
         MVC   JUSTDATA_VV,LE_VERS                                =CMS=
         MVC   JUSTDATA_RR,LE_REL                                 =CMS=
         MVC   JUSTDATA_MM,LE_MOD                                 =CMS=
         CLI   LE_SWITCH,C'1'
         JNE   JUMP_AROUND_1
         STRING64 'Program: ',PGMNAME_GET,' is COBOL/370 Version ',    X
               LE_VERS,                                                X
               ' Release ',LE_REL,' Mod-Level ',LE_MOD,INTO=RECORD
         MVC   JUSTDATA_COMPILER,=C'COBOL370'                     =CMS=
         CLI   csect_analyze_kz,C'M' first csect (main-ep)       RS1107
         JNE   LE370_INFO_0V         don't set CSCCOMP           RS1107
         AP    CNT_COBOLLE,=P'1'         Increment counter       PF0608
         MVC   CSCLANG(9),=CL9'COBOL'                            PF0608
         STRING64 'COBOL/370 ',                                   *CSC*X
               'V',(LE_VERS+1,1),                                 *CSC*X
               '.',(LE_REL+1,1),                                  *CSC*X
               '.',(LE_MOD+1,1),                                  *CSC*X
               INTO=CSCCOMP                                       *CSC*
LE370_INFO_0V DS  0H                                             RS1107
         CLC   LE_VERS(4),=C'0301'  Vers+Rel < 0301 COBOL V3R1
         JL    JUMP_AROUND_2         yes
         STRING64 'Program: ',PGMNAME_GET,' is COBOL Enterprise',      X
               ' Version ',LE_VERS,                                    X
               ' Release ',LE_REL,' Mod-Level ',LE_MOD,INTO=RECORD
         MVC   JUSTDATA_COMPILER,=C'ECOBOL  '                     =CMS=
         CLI   csect_analyze_kz,C'M' first csect (main-ep)       RS1107
         JNE   LE370_INFO_0W         don't set CSCCOMP           RS1107
         STRING64 'COBOL/ENT ',                                   *CSC*X
               'V',(LE_VERS+1,1),                                 *CSC*X
               '.',(LE_REL+1,1),                                  *CSC*X
               '.',(LE_MOD+1,1),                                  *CSC*X
               INTO=CSCCOMP                                       *CSC*
LE370_INFO_0W DS  0H                                             RS1107
         J     JUMP_AROUND_2
JUMP_AROUND_1 DS 0H
         MVC   JUSTDATA_COMPILER,=C'VSCOBOL2'                     =CMS=
         CLI   csect_analyze_kz,C'M' first csect (main-ep)       RS1107
         JNE   LE370_INFO_0X         don't set CSCCOMP           RS1107
         MVC   CSCLANG(9),=CL9'COBOL'                            PF0608
         STRING64 'VS/COBOL2 ',                                   *CSC*X
               'V',(LE_VERS,1),                                   *CSC*X
               '.',(LE_REL,1),                                    *CSC*X
               '.',(LE_MOD,1),                                    *CSC*X
               INTO=CSCCOMP                                       *CSC*
LE370_INFO_0X DS  0H                                             RS1107
         STRING64 'Program: ',PGMNAME_GET,' is COBOL/2 Version ',      X
               LE_VERS,' Release ',LE_REL,' Mod-Level ',LE_MOD,        X
               INTO=RECORD
         CLI   LE_SWITCH,C'2'
         JE    JUMP_AROUND_2
         CLI   csect_analyze_kz,C'M' first csect (main-ep)       RS1107
         JNE   LE370_INFO_0Y         don't set CSCCOMP           RS1107
         STRING64 'OS/VS/COBOL ',C1_EYECATCHER,C1_REL,INTO=CSCCOMP *CSC
LE370_INFO_0Y DS  0H                                             RS1107
         STRING64 'Program: ',PGMNAME_GET,' is OS/VS COBOL Release ',  X
               LE_REL,                                                 X
               INTO=RECORD
         MVC   JUSTDATA_COMPILER,=C'OSVSCBL '                     =CMS=
JUMP_AROUND_2 DS 0H
         BRAS  R14,SPACE2
         STRING64 '------------ Timestamps --------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
         STRING64 'Compiled program name ',LE_PGM_NAME,INTO=RECORD
         BRAS  R14,SPACE1
         BRAS  R9,LE_370_12
MMM_TBL  DC    CL2'01',CL3'Jan',CL3'JAN'  Long name
#MMM_TBL EQU   *-MMM_TBL
         DC    CL2'02',CL3'Feb',CL3'FEB'  for our non-european user
         DC    CL2'03',CL3'Mar',CL3'MAR'
         DC    CL2'04',CL3'Apr',CL3'APR'
         DC    CL2'05',CL3'May',CL3'MAY'
         DC    CL2'06',CL3'Jun',CL3'JUN'
         DC    CL2'07',CL3'Jul',CL3'JUL'
         DC    CL2'08',CL3'Aug',CL3'AUG'
         DC    CL2'09',CL3'Sep',CL3'SEP'
         DC    CL2'10',CL3'Oct',CL3'OCT'                          *CSC*
         DC    CL2'11',CL3'Nov',CL3'NOV'
         DC    CL2'12',CL3'Dec',CL3'DEC'
         DC    X'0000',CL3'n/a',CL3'N/A'    end of table
LE_370_12 DS   0H
         CLC   LE_COMP_MONTH(2),0(R9)         check properties
         JE    LE_370_14               jump if on
         CLC   LE_COMP_MONTH,5(R9)     Matching for OS/VS month   =CMS=
         JE    LE_370_14               jump if found              =CMS=
         LA    R9,#MMM_TBL(,R9)        Skip entry
         CLI   0(R9),0                 end of table?
         JNE   LE_370_12               not yet, loop
LE_370_14 DS   0H
         MVC   JUSTDATA_LE_CYEAR,LE_COMP_YEAR                     =CMS=
         CLC   JUSTDATA_LE_CYEAR,=C'1950'          OSVS fixup     =CMS=
         JH    AROUND_A                                           =CMS=
         MVC   JUSTDATA_LE_CYEAR(2),=C'20'                        =CMS=
AROUND_A EQU   *                                                  =CMS=
         MVC   JUSTDATA_LE_CMONTH,0(R9)                           =CMS=
         MVC   JUSTDATA_LE_CDAY,LE_COMP_DAY                       =CMS=
         CLI   JUSTDATA_LE_CDAY,C' '               OSVS fixup     =CMS=
         JNE   AROUND_B                                           =CMS=
         MVI   JUSTDATA_LE_CDAY,C'0'                              =CMS=
AROUND_B EQU   *                                                  =CMS=
         MVC   JUSTDATA_LE_CHOURS,LE_COMP_HOURS                   =CMS=
         CLI   JUSTDATA_LE_CHOURS,C' '             OSVS fixup     =CMS=
         JNE   AROUND_C                                           =CMS=
         MVI   JUSTDATA_LE_CHOURS,C'0'                            =CMS=
AROUND_C EQU   *                                                  =CMS=
         MVC   JUSTDATA_LE_CMIN,LE_COMP_MIN                       =CMS=
         MVC   JUSTDATA_LE_CSEC,LE_COMP_SEC                       =CMS=
         STRING64 'Date: ',LE_COMP_DAY,'.',(LE_COMP_MONTH,2),'.',      X
               LE_COMP_YEAR,' (european) ',LE_COMP_DAY,'.',            X
               (2(R9),3,T),'.',LE_COMP_YEAR,' (long) ',                X
               ' Time: ',LE_COMP_HOURS,':',LE_COMP_MIN,                X
               ':',LE_COMP_SEC,INTO=RECORD
         CLI   CSECT_ANALYZE_KZ,C'M' First csect (main-ep)?      PF0608
         JNE   LE_370_14A            No,don't set CSCDATE        PF0608
         STRING64 LE_COMP_DAY,'.',(2(R9),3,T),'.',LE_COMP_YEAR,   *CSC*X
               INTO=CSCDATE
LE_370_14A DS   0H                                               PF0608
         BRAS  R14,JUSTDATA_PUT                                   =CMS=
         CLI   LE_SWITCH,C'3'    OS/VS COBOL ?
         JNE   JUMP_AROUND_3       no, go ahead
         STRING64 'Date: ',LE_COMP_DAY,'.',LE_COMP_MONTH,'.',          X
               LE_COMP_YEAR,' Time: ',LE_COMP_HOURS,':',LE_COMP_MIN,   X
               ':',LE_COMP_SEC,INTO=RECORD
         BRAS  R14,SPACE2
         ST    R4,SAVER4             Save for re-addressability  PF0708
         CLI   CSECT_ANALYZE_KZ,C'M' First csect (main-ep)?      PF0708
         JNE   INFO_COBOL            No,don't set CSCDATE        PF0708
         STRING64 LE_COMP_DAY,'.',LE_COMP_MONTH,'.',LE_COMP_YEAR, *CSC*X
               INTO=CSCDATE
*        ST    R4,SAVER4             Save for re-addressability  PF0708
*        J     CICS                  Check CICS and then no more! *CSC*
         DROP  R4
         J     INFO_COBOL            sorry no more information
JUMP_AROUND_3 DS 0H
         BRAS  R14,SPACE2
         STRING64 '------------ Statistics --------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
         STRING64 'Number of data items  : ',                          X
               (LE_DATA_STATEMENTS,F,R7B),INTO=RECORD
         BRAS  R14,SPACE1
         STRING64 'Number of instructions: ',(LE_PROC_LINES,F,R7B),    X
               INTO=RECORD
         BRAS  R14,SPACE2
         STRING64 '------------ Options in effect -------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
         MVC   RECORD,BLANKS
         LA    R15,RECORD
         MVC   1(3,R15),=C'ADV'
         TM    LE_STATUS_BYTE_01,BIT0
         JO    LE_370_15_#1                                       *CSC*
         MVC   1(5,R15),=C'NOADV'
LE_370_15_#1 DS 0H                                                *CSC*
         LA    R15,9(R15)                                        RS1007
         MVC   0(5,R15),=C'APOST'
         TM    LE_STATUS_BYTE_01,BIT1
         JO    LE_370_15_#2                                       *CSC*
         MVC   0(5,R15),=C'QUOTE'
LE_370_15_#2 DS 0H                                                *CSC*
* The COBANAL SUMMARY report is only generated for Mainline      SS0615
* modules. As DATA "31"/"24" reporting appears in SUMMARY we     SS0615
* need to ensure that we only set DATA "31" or "24" in CSCD31 if SS0615
* this is a Mainline module and not a subroutine.                SS0615
         MVC   RECORD+17(9),=CL9'DATA(31)'                       RS1007
         CLI   CSECT_ANALYZE_KZ,C'M' First csect (main-ep)?      PF0608
         JNE   LE_370_15_#21         No,don't set CSCD31         SS0615
         MVC   CSCD31(2),=CL3'31'                                 *CSC*
LE_370_15_#21 DS 0H                                              SS0615
         TM    LE_STATUS_BYTE_01,BIT2
         JO    LE_370_15_#3                                       *CSC*
         MVC   RECORD+17(9),=CL9'DATA(24)'                       RS1007
         CLI   CSECT_ANALYZE_KZ,C'M' First csect (main-ep)?      SS0615
         JNE   LE_370_15_#3          No,don't set CSCD31         SS0615
         MVC   CSCD31(2),=CL3'24'                                 *CSC*
LE_370_15_#3 DS 0H                                                *CSC*
         MVC   RECORD+27(6),=CL6'DECK'                           RS1007
         TM    LE_STATUS_BYTE_01,BIT3
         JO    LE_370_15_#4                                       *CSC*
         MVC   RECORD+27(6),=CL6'NODECK'                         RS1007
LE_370_15_#4 DS 0H                                                *CSC*
         MVC   RECORD+36(6),=CL6'DUMP'                           RS1007
         TM    LE_STATUS_BYTE_01,BIT4
         JO    LE_370_15_#5                                       *CSC*
         MVC   RECORD+36(6),=CL6'NODUMP'                         RS1007
LE_370_15_#5 DS 0H                                                *CSC*
         MVC   RECORD+44(8),=CL8'DYNAM'                          RS1007
         TM    LE_STATUS_BYTE_01,BIT5
         JO    LE_370_15_#6                                       *CSC*
         MVC   RECORD+44(8),=CL8'NODYNAM'                        RS1007
LE_370_15_#6 DS 0H                                                *CSC*
         MVC   RECORD+55(10),=CL10'FASTSRT'                      RS1007
         TM    LE_STATUS_BYTE_01,BIT6
         JO    LE_370_15_#7                                       *CSC*
         MVC   RECORD+55(10),=CL10'NOFASTSRT'                    RS1007
LE_370_15_#7 DS 0H                                                *CSC*
         CLC   LE_VERS(4),=C'0501'  Vers+Rel < 0501 E.Cob V5.1   RS1015
         JL    LE_370_15_#8          no                          RS1015
         MVC   RECORD+66(8),=CL8'SQLIMS'                         RS1015
         TM    LE_STATUS_BYTE_01,BIT7                            RS1015
         JO    LE_370_15_#8                                      RS1015
         MVC   RECORD+66(8),=CL8'NOSQLIMS'                       RS1015
LE_370_15_#8   DS 0H                                             RS1015
         CLI   LE_SWITCH,C'1'   COBOL/370 FDUMP not valid        RS0705
         JE    LE_370_17                                         RS0705
         MVC   RECORD+66(8),=CL8'FDUMP'                          RS1007
         TM    LE_STATUS_BYTE_01,BIT7
         JO    LE_370_17                                          *CSC*
         MVC   RECORD+66(8),=CL8'NOFDUMP'
LE_370_17 DS 0H                                                  RS0705
         MVC   RECORD+76(6),=CL6'LIB'                            RS1007
         TM    LE_STATUS_BYTE_02,BIT0                            RS1007
         JO    LE_370_17_#1                                      RS1007
         MVC   RECORD+76(6),=CL6'NOLIB'                          RS1007
LE_370_17_#1 DS 0H                                               RS1007
         MVC   RECORD+92(7),=CL7'LIST'                           RS1007
         TM    LE_STATUS_BYTE_02,BIT1                            RS1007
         JO    LE_370_17_#2                                      RS1007
         MVC   RECORD+92(7),=CL7'NOLIST'                         RS1007
LE_370_17_#2 DS 0H                                               RS1007
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(3),=CL3'MAP'                             RS1007
         TM    LE_STATUS_BYTE_02,BIT2
         JO    LE_370_17_#3                                       *CSC*
         MVC   RECORD+1(5),=CL5'NOMAP'                           RS1007
LE_370_17_#3 DS 0H                                                *CSC*
         MVC   RECORD+9(6),=CL6'NUM'                             RS1007
         TM    LE_STATUS_BYTE_02,BIT3
         JO    LE_370_17_#4                                       *CSC*
         MVC   RECORD+9(6),=CL6'NONUM'                           RS1007
LE_370_17_#4 DS 0H                                                *CSC*
         MVC   RECORD+17(6),=CL6'OBJ'
         TM    LE_STATUS_BYTE_02,BIT4
         JO    LE_370_17_#5                                       *CSC*
         MVC   RECORD+17(6),=CL6'NOOBJ'                          RS1007
LE_370_17_#5 DS 0H                                                *CSC*
         MVC   RECORD+27(8),=CL8'OFFSET'                         RS1007
         TM    LE_STATUS_BYTE_02,BIT5
         JO    LE_370_17_#6                                       *CSC*
         MVC   RECORD+27(8),=CL8'NOOFFSET'                       RS1007
LE_370_17_#6 DS 0H                                                *CSC*
         MVC   RECORD+36(10),=CL10'OPTIMIZE'                     RS1007
         TM    LE_STATUS_BYTE_02,BIT6
         JO    LE_370_17_#7                                       *CSC*
         MVC   RECORD+36(10),=CL10'NOOPTIMIZE'                   RS1007
LE_370_17_#7 DS 0H                                                *CSC*
         CLI   LE_SWITCH,C'1'   COBOL/370
         JNE   LE_370_18
         CLC   LE_VERS(4),=C'0301'  Vers+Rel < 0301 COBOL V3R1
         JL    LE_370_18             yes
         MVC   RECORD+55(18),=CL18'OUTDD(SYSOUT)'                RS1007
         TM    LE_STATUS_BYTE_02,BIT7
         JO    LE_370_19                                         RS1007
         MVC   RECORD+55(18),=CL18'OUTDD(Supplied)'              RS1007
*        BRAS  R14,SPACE1                                        RS1007
         J     LE_370_19
LE_370_18 DS 0H
         MVC   RECORD+55(17),=CL17'OUTDD(Default)'               RS1007
         TM    LE_STATUS_BYTE_02,BIT7
         JO    LE_370_19                                         RS1007
         MVC   RECORD+55(17),=CL17'OUTDD(Supplied)'              RS1007
*        BRAS  R14,SPACE1                                        RS1007
LE_370_19 DS 0H
         MVC   RECORD+76(15),=CL15'NUMPROC(MIG)'                 RS1007
         TM    LE_STATUS_BYTE_05,BIT0
         JO    LE_370_21
         MVC   RECORD+76(15),=CL15'NUMPROC(PFD)'
         TM    LE_STATUS_BYTE_03,BIT0
         JO    LE_370_21
         MVC   RECORD+76(15),=CL15'NUMPROC(NOPFD)'               RS1007
LE_370_21 DS 0H
         MVC   RECORD+92(7),=CL7'RENT'                           RS1007
         CLI   CSECT_ANALYZE_KZ,C'M' First csect (main-ep)?      PF0608
         JNE   LE_370_21_#0          No,don't set CSCCRNT        SS0615
         MVC   CSCCRNT(3),=CL3'YES'                               *CSC*
LE_370_21_#0 DS 0H                                               SS0615
         TM    LE_STATUS_BYTE_03,BIT1
         JO    LE_370_21_#1                                       *CSC*
         MVC   RECORD+92(7),=CL7'NORENT'                         RS1007
         CLI   CSECT_ANALYZE_KZ,C'M' First csect (main-ep)?      SS0615
         JNE   LE_370_21_#1          No,don't set CSCCRNT        SS0615
         MVC   CSCCRNT(3),=CL3'NO '                               *CSC*
LE_370_21_#1 DS 0H                                                *CSC*
         BRAS  R14,SPACE1                                        RS1007
         MVC   RECORD,BLANKS                                     RS1007
         MVC   RECORD+1(6),=CL6'RES'                             RS1007
         TM    LE_STATUS_BYTE_03,BIT2
         JO    LE_370_21_#2                                       *CSC*
         MVC   RECORD+1(6),=CL6'NORES'                           RS1007
LE_370_21_#2 DS 0H                                                *CSC*
         MVC   RECORD+9(6),=CL6'SEQ'                             RS1007
         TM    LE_STATUS_BYTE_03,BIT3
         JO    LE_370_21_#3                                       *CSC*
         MVC   RECORD+9(6),=CL6'NOSEQ'                           RS1007
LE_370_21_#3 DS 0H                                                *CSC*
         MVC   RECORD+17(9),=CL9'SIZE(MAX)'                      RS1007
         TM    LE_STATUS_BYTE_03,BIT4
         JO    LE_370_21_#4                                       *CSC*
         MVC   RECORD+17(9),=CL9'SIZE(VAL)'                      RS1007
LE_370_21_#4 DS 0H                                                *CSC*
         MVC   RECORD+27(9),=CL9'SOURCE'                         RS1007
         TM    LE_STATUS_BYTE_03,BIT5
         JO    LE_370_21_#5                                       *CSC*
         MVC   RECORD+27(9),=CL9'NOSOURCE'                       RS1007
LE_370_21_#5 DS 0H                                                *CSC*
         MVC   RECORD+36(20),=CL20'SSRANGE(ZLEN/NOZLEN)'         RS0516
         CLC   LE_VERS(4),=C'0600'  Vers+Rel>0600 is V6.1        RS0516
         JH    LE_370_21_#51          yes                        RS0516
         MVC   RECORD+36(20),=CL20'SSRANGE'                      RS1007
LE_370_21_#51 DS 0H                                              RS0516
         TM    LE_STATUS_BYTE_03,BIT6
         JO    LE_370_21_#6                                       *CSC*
         MVC   RECORD+36(20),=CL20'NOSSRANGE'                    RS1007
LE_370_21_#6 DS 0H                                                *CSC*
         MVC   RECORD+55(8),=CL8'TERM'                           RS1007
         TM    LE_STATUS_BYTE_03,BIT7
         JO    LE_370_21_#7                                       *CSC*
         MVC   RECORD+55(8),=CL8'NOTERM'
LE_370_21_#7 DS 0H                                                *CSC*
         MVC   RECORD+66(8),=CL8'TEST'                           RS1007
         TM    LE_STATUS_BYTE_04,BIT0                            RS1007
         JO    LE_370_21_#8                                      RS1007
         MVC   RECORD+66(8),=CL8'NOTEST'                         RS1007
LE_370_21_#8 DS 0H                                               RS1007
         MVC   RECORD+76(10),=CL11'TRUNC(BIN)'                   RS1007
         TM    LE_STATUS_BYTE_05,BIT4                            RS1007
         JO    LE_370_33                                         RS1007
         MVC   RECORD+76(10),=CL11'TRUNC(STD)'                   RS1007
         TM    LE_STATUS_BYTE_04,BIT1                            RS1007
         JO    LE_370_33                                         RS1007
         MVC   RECORD+76(10),=CL11'TRUNC(OPT)'                   RS1007
LE_370_33 DS 0H                                                  RS1007
         MVC   RECORD+92(9),=CL9'WORD(xx)'                       RS1007
         TM    LE_STATUS_BYTE_04,BIT2                            RS1007
         JO    LE_370_33_#1                                      RS1007
         MVC   RECORD+92(9),=CL9'NOWORD'                         RS1007
LE_370_33_#1 DS 0H                                               RS1007
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(8),=CL8'VBREF'                           RS1007
         TM    LE_STATUS_BYTE_04,BIT3
         JO    LE_370_33_#2                                       *CSC*
         MVC   RECORD+1(8),=CL8'NOVBREF'                         RS1007
LE_370_33_#2 DS 0H                                                *CSC*
         MVC   RECORD+9(6),=CL6'XREF'                            RS1007
         TM    LE_STATUS_BYTE_04,BIT4
         JO    LE_370_33_#3                                       *CSC*
         MVC   RECORD+9(6),=CL6'NOXREF'
LE_370_33_#3 DS 0H                                                *CSC*
         MVC   RECORD+17(6),=CL6'ZWB'                            RS1007
         TM    LE_STATUS_BYTE_04,BIT5
         JO    LE_370_33_#4                                       *CSC*
         MVC   RECORD+17(6),=CL6'NOZWB'                          RS1007
LE_370_33_#4 DS 0H                                                *CSC*
         MVC   RECORD+27(7),=CL7'NAME'                           RS1007
         TM    LE_STATUS_BYTE_04,BIT6
         JO    LE_370_33_#5                                       *CSC*
         MVC   RECORD+27(7),=CL7'NONAME'
LE_370_33_#5 DS 0H                                                *CSC*
         CLI   LE_VERS+1,C'.'       Cobol/2 ?                    RS0712
         JE    LE_370_33_#6          yes                         RS0712
         CLC   LE_VERS(4),=C'0300'  Vers+Rel > 0300 COBOL V3R1   RS0103
         JH    LE_370_40             yes, CMPR2 no longer valid   *CSC*
LE_370_33_#6 DS 0H                                               RS0712
         MVC   RECORD+36(8),=CL8'CMPR2'                          RS1007
         TM    LE_STATUS_BYTE_04,BIT7
         JO    LE_370_40                                          *CSC*
         MVC   RECORD+36(8),=CL8'NOCMPR2'                        RS1007
LE_370_40 DS 0H                                                  RS0103
         MVC   RECORD+44(12),=CL12'NUMCLS'  other Cobol          RS1007
         TM    LE_STATUS_BYTE_05,BIT1
         JO    LE_370_40_#1                                       *CSC*
         MVC   RECORD+44(12),=CL12'NONUMCLS'                     RS1007
LE_370_40_#1 DS 0H                                                *CSC*
         CLI   LE_SWITCH,C'1'   COBOL/370
         JNE   LE_370_42
         CLC   LE_VERS(4),=C'0102'  Vers+Rel < 0102 COBOL MVS and VM
         JL    LE_370_42             yes
         MVC   RECORD+44(12),=CL12'NUMCLS(ALT)'                  RS1007
         TM    LE_STATUS_BYTE_05,BIT1
         JO    LE_370_52                                         RS1007
         MVC   RECORD+44(12),=CL12'NUMCLS(PRIM)'                 RS1007
LE_370_42 DS 0H
         MVC   RECORD+66(7),=CL7'DBCS'                           RS1007
         TM    LE_STATUS_BYTE_05,BIT2
         JO    LE_370_42_#1                                       *CSC*
         MVC   RECORD+66(7),=CL7'NODBCS'                         RS1007
LE_370_42_#1 DS 0H                                                *CSC*
         MVC   RECORD+76(6),=CL6'AWO'                            RS1007
         TM    LE_STATUS_BYTE_05,BIT3
         JO    LE_370_42_#2                                       *CSC*
         MVC   RECORD+76(6),=CL6'NOAWO'                          RS1007
LE_370_42_#2 DS 0H                                                *CSC*
         CLI   LE_SWITCH,C'1'                  Cobol/370
         JNE   LE_370_50Z                      no                RS1007
         CLC   LE_VERS(4),=C'0300'  Vers+Rel > 0300 COBOL V3R1
         JL    LE_370_45             yes, Events not for E.C.
         MVC   RECORD+92(9),=CL9'EVENTS'       n/a COBOL/2
         TM    LE_STATUS_BYTE_05,BIT5
         JO    LE_370_45                                          *CSC*
         MVC   RECORD+92(9),=CL9'NOEVENTS'                       RS1007
LE_370_45 DS 0H
         BRAS  R14,SPACE1                                        RS1007
         MVC   RECORD,BLANKS                                     RS1007
         MVC   RECORD+1(11),=CL11'CURRENCY'   n/a COBOL/2        RS1007
         TM    LE_STATUS_BYTE_05,BIT6
         JO    LE_370_48                                          *CSC*
         MVC   RECORD+1(11),=CL11'NOCURRENCY'                    RS1007
LE_370_48 DS 0H
         MVC   RECORD+17(40),=CL40'Compilation_unit_Class'       ES0116
         TM    LE_STATUS_BYTE_05,BIT7
         JO    LE_370_48_#1                                       *CSC*
         MVC   RECORD+17(40),=CL40'Compilation_unit_Program'     ES0116
LE_370_48_#1 DS 0H                                                *CSC*
         CLC   LE_VERS(4),=C'0102'  Vers+Rel < 0102 COBOL MVS and VM
         JL    LE_370_50Z         no
*                         Supported only for COBOL MVS and VM R2
         BRAS  R14,SPACE1
* The COBANAL SUMMARY report is only generated for Mainline      SS0615
* modules. As RMODE(24/ANY)" reporting appears in SUMMARY we     SS0615
* need to ensure that we only set "RM" to 24 or ANY in CSCRMODE  SS0615
* if this is a Mainline module and not a subroutine.             SS0615
         MVC   RECORD,BLANKS
         MVC   RECORD+1(11),=CL11'RMODE(ANY)'
         CLI   CSECT_ANALYZE_KZ,C'M' First csect (main-ep)?      SS0615
         JNE   LE_370_48_#11         No,do not set CSCRMODE      SS0615
         MVC   CSCRMODE(3),=CL3'ANY'                              *CSC*
LE_370_48_#11 DS 0H                                              SS0615
         TM    LE_STATUS_BYTE_26,BIT0
         JO    LE_370_48_#2                                       *CSC*
         MVC   RECORD+1(11),=CL11'RMODE(24)'
         CLI   CSECT_ANALYZE_KZ,C'M' First csect (main-ep)?      SS0615
         JNE   LE_370_48_#2          No,do not set CSCRMODE      SS0615
         MVC   CSCRMODE(3),=CL3'24 '                              *CSC*
LE_370_48_#2 DS 0H                                                *CSC*
         CLC   LE_VERS(4),=C'0401'  Vers+Rel < 0401 E.Cob V4.1   RS1207
         JL    LE_370_48_#21         no                          RS1207
         MVC   RECORD+17(13),=CL13'TEST(HOOK)'                   RS1207
         TM    LE_STATUS_BYTE_26,BIT1                            RS1207
         JO    LE_370_48_#5                                      RS1207
         TM    LE_STATUS_BYTE_26,BIT2                            RS1207
         JO    LE_370_48_#5                                      RS1207
         TM    LE_STATUS_BYTE_26,BIT3                            RS1207
         JO    LE_370_48_#5                                      RS1207
         MVC   RECORD+17(13),=CL13'NO_TEST(HOOK)'                ES0116
LE_370_48_#21 DS 0H                                              RS1207
         MVC   RECORD+17(13),=CL13'TEST(STMT)'                   RS1007
         TM    LE_STATUS_BYTE_26,BIT1
         JO    LE_370_48_#3                                       *CSC*
         MVC   RECORD+17(13),=CL13'NO_TEST(STMT)'                ES0116
LE_370_48_#3 DS 0H                                                *CSC*
         MVC   RECORD+36(13),=CL13'TEST(PATH)'                   RS1007
         TM    LE_STATUS_BYTE_26,BIT2
         JO    LE_370_48_#4                                       *CSC*
         MVC   RECORD+36(13),=CL13'NO_TEST(PATH)'                ES0116
LE_370_48_#4 DS 0H                                                *CSC*
         MVC   RECORD+55(14),=CL14'TEST(BLOCK)'                  RS1007
         TM    LE_STATUS_BYTE_26,BIT3
         JO    LE_370_48_#5                                       *CSC*
         MVC   RECORD+55(14),=CL14'NO_TEST(BLOCK)'               ES0116
LE_370_48_#5 DS 0H                                                *CSC*
         MVC   RECORD+76(17),=CL17'OPT(FULL)'                    RS1007
         TM    LE_STATUS_BYTE_26,BIT4
         JO    LE_370_48_#6                                       *CSC*
         MVC   RECORD+76(17),=CL17'NOOPT_OR_OPT(STD)'            ES0116
LE_370_48_#6 DS 0H                                                *CSC*
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(13),=CL13'INTDATE(LIL)'
         TM    LE_STATUS_BYTE_26,BIT5
         JO    LE_370_48_#7                                       *CSC*
         MVC   RECORD+1(13),=CL13'INTDATE(ANSI)'
LE_370_48_#7 DS 0H                                                *CSC*
         CLC   LE_VERS(4),=C'0202'  Vers+Rel < 0202 COBOL MVS and VM
         JL    LE_370_50Y           no lower                     RS1000
         MVC   RECORD+17(14),=CL14'TEST(SEPARATE)'               RS1007
         TM    LE_STATUS_BYTE_26,BIT6                            RS1000
         JO    LE_370_50Y                                         *CSC*
         MVC   RECORD+17(17),=CL17'NO_TEST(SEPARATE)'            ES0116
LE_370_50Y DS  0H
         MVC   RECORD+44(22),=CL22'PGMNAME(LONGUPPER)'           RS1007
         TM    LE_STATUS_BYTE_27,BIT0
         JO    LE_370_50Y_#1                                      *CSC*
         MVC   RECORD+44(22),=CL22'NOT_PGMNAME(LONGUPPER)'       ES0116
LE_370_50Y_#1 DS 0H                                               *CSC*
         MVC   RECORD+76(22),=CL22'PGMNAME(LONGMIXED)'
         TM    LE_STATUS_BYTE_27,BIT1
         JO    LE_370_SRST                                       RS0704
         MVC   RECORD+76(22),=CL22'NOT_PGMNAME(LONGMIXED)'       ES0116
LE_370_SRST    DS 0H                                             RS0704
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(5),=CL5'DLL'
         TM    LE_STATUS_BYTE_27,BIT2
         JO    LE_370_SRST_#1                                     *CSC*
         MVC   RECORD+1(5),=CL5'NODLL'
LE_370_SRST_#1 DS 0H                                              *CSC*
         MVC   RECORD+17(11),=CL11'EXPORTALL'                    RS1007
         TM    LE_STATUS_BYTE_27,BIT3
         JO    LE_370_SRST_#2                                     *CSC*
         MVC   RECORD+17(11),=CL11'NOEXPORTALL'                  RS1007
LE_370_SRST_#2 DS 0H                                              *CSC*
         MVC   RECORD+36(10),=CL10'DATEPROC'                     RS1007
         TM    LE_STATUS_BYTE_27,BIT4
         JO    LE_370_SRST_#3                                     *CSC*
         MVC   RECORD+36(10),=CL10'NODATEPROC'                   RS1007
LE_370_SRST_#3 DS 0H                                              *CSC*
         CLC   LE_VERS(4),=C'0500'  Vers+Rel =>0500 E.Cob V5.1   RS1015
         JH    LE_370_SRST_#3_1       yes (YEARWINDOW obsolete)  RS1015
         STRING64 (RECORD,,L),9X,'YEARWINDOW(',(LE_YEAR_WINDOW,H,R4B), X
               ')',INTO=RECORD                                   RS1007
LE_370_SRST_#3_1 DS 0H                                            *CSC*
         CLC   LE_VERS(4),=C'0202'  Vers+Rel < 0202 COBOL MVS and VM
         JL    LE_370_50Z           no lower                     RS1000
         MVC   RECORD+76(13),=CL13'ARITH(EXTEND)'                RS1007
         TM    LE_STATUS_BYTE_27,BIT5                            RS1000
         JO    LE_370_SRST_#4                                     *CSC*
         MVC   RECORD+76(13),=CL13'ARITH(COMPAT)'                RS1007
LE_370_SRST_#4 DS 0H                                              *CSC*
         CLI   LE_SWITCH,C'1'   COBOL/370
         JNE   LE_370_50Z
         CLC   LE_VERS(4),=C'0301'  Vers+Rel < 0301 COBOL V3R1
         JL    LE_370_50Z            yes
         MVC   RECORD+92(6),=CL6'THREAD'                         RS1007
         TM    LE_STATUS_BYTE_27,BIT6
         JO    LE_370_SRST_#40                                    *CSC*
         MVC   RECORD+92(8),=CL8'NOTHREAD'                       RS1007
LE_370_SRST_#40 DS 0H                                             *CSC*
         CLC   LE_VERS(6),=C'030401' Vers/Rel/Mod E.C. 3.4.1     RS1207
         JL    LE_370_SRST_#5        no                          RS1207
         BRAS  R14,SPACE1                                        RS1207
         MVC   RECORD,BLANKS                                     RS1207
         CLC   LE_VERS(4),=C'0401'  Vers+Rel < 0401 E.Cob V4.1   RS1207
         JL    LE_370_SRST_#41       no                          RS1207
         MVC   RECORD+1(10),=CL10'TEST(EJPD)'                    RS1207
         TM    LE_STATUS_BYTE_27,BIT7                            RS1207
         JO    LE_370_SRST_#41                                   RS1207
         MVC   RECORD+1(12),=CL12'TEST(NOEJPD)'                  RS1207
LE_370_SRST_#41 DS 0H
         MVC   RECORD+17(3),=CL3'SQL'                            RS1207
         TM    LE_STATUS_BYTE_28,BIT0                            RS1207
         JO    LE_370_SRST_#42                                   RS1207
         MVC   RECORD+17(5),=CL5'NOSQL'                          RS1207
LE_370_SRST_#42 DS 0H                                            RS1207
         MVC   RECORD+27(4),=CL4'CICS'                           RS1207
         TM    LE_STATUS_BYTE_28,BIT1                            RS1207
         JO    LE_370_SRST_#43                                   RS1207
         MVC   RECORD+27(6),=CL6'NOCICS'                         RS1207
LE_370_SRST_#43 DS 0H                                            RS1207
         CLC   LE_VERS(4),=C'0401'  Vers+Rel < 0401 E.Cob V4.1   RS1207
         JL    LE_370_SRST_#44       no                          RS1207
         MVC   RECORD+44(7),=CL7'MDECK'                          RS1207
         TM    LE_STATUS_BYTE_28,BIT2                            RS1207
         JO    LE_370_SRST_#44                                   RS1207
         MVC   RECORD+44(7),=CL7'NOMDECK'                        RS1207
LE_370_SRST_#44 DS 0H                                            RS1207
         MVC   RECORD+55(10),=CL10'SQLCCSID'                     RS1207
         TM    LE_STATUS_BYTE_28,BIT3                            RS1207
         JO    LE_370_SRST_#45                                   RS1207
         MVC   RECORD+55(10),=CL10'NOSQLCCSID'                   RS1207
LE_370_SRST_#45 DS 0H                                            RS1207
         CLC   LE_VERS(4),=C'0401'  Vers+Rel < 0401 E.Cob V4.1   RS1207
         JL    LE_370_SRST_#5        no                          RS1207
         MVC   RECORD+66(9),=CL9'OPTFILE'                        RS1207
         TM    LE_STATUS_BYTE_28,BIT4                            RS1207
         JO    LE_370_SRST_#46                                   RS1207
         MVC   RECORD+66(9),=CL9'NOOPTFILE'                      RS1207
LE_370_SRST_#46 DS 0H                                            RS1207
         MVC   RECORD+76(16),=CL16'XMLPARSE(XMLSS)'              RS0616
         TM    LE_STATUS_BYTE_28,BIT5                            RS1207
         JO    LE_370_SRST_#47                                   RS1207
         MVC   RECORD+76(16),=CL16'XMLPARSE(COMPAT)'             RS0616
LE_370_SRST_#47 DS 0H                                            RS1207
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         CLC   LE_VERS(4),=C'0402'  Vers+Rel < 0402 E.Cob V4.2   RS1015
         JL    LE_370_SRST_#5        no                          RS1015
         MVC   RECORD+1(8),=CL8'BLOCK0'                          RS1015
         TM    LE_STATUS_BYTE_28,BIT6                            RS1015
         JO    LE_370_SRST_#48                                   RS1015
         MVC   RECORD+1(8),=CL8'NOBLOCK0'                        RS1015
LE_370_SRST_#48 DS 0H                                            RS1015
         CLC   LE_VERS(4),=C'0501'  Vers+Rel < 0501 E.Cob V5.1   RS1015
         JL    LE_370_SRST_#58       no                          RS1015
         MVC   RECORD+17(13),=CL13'DISPSIGN(SEP)'                RS1015
         TM    LE_STATUS_BYTE_28,BIT6                            RS1015
         JO    LE_370_SRST_#49                                   RS1015
         MVC   RECORD+17(16),=CL16'DISPSIGN(COMPAT)'             RS1015
LE_370_SRST_#49 DS 0H                                            RS1015
         MVC   RECORD+36(8),=CL8'STGOPT'                         RS1015
         TM    LE_STATUS_BYTE_29,BIT4                            RS1015
         JO    LE_370_SRST_#50                                   RS1015
         MVC   RECORD+36(8),=CL8'NOSTGOPT'                       RS1015
LE_370_SRST_#50 DS 0H                                            RS1015
         MVC   RECORD+45(13),=CL13'AFP(VOLATILE)'                RS1015
         TM    LE_STATUS_BYTE_29,BIT5                            RS1015
         JO    LE_370_SRST_#51                                   RS1015
         MVC   RECORD+45(15),=CL15'AFP(NOVOLATILE)'              RS1015
LE_370_SRST_#51 DS 0H                                            RS1015
         MVC   RECORD+61(14),=CL14'HPGR(PRESERVE)'               RS1015
         TM    LE_STATUS_BYTE_29,BIT6                            RS1015
         JO    LE_370_SRST_#52                                   RS1015
         MVC   RECORD+61(16),=CL16'HPGR(NOPRESERVE)'             RS1015
LE_370_SRST_#52 DS 0H                                            RS1015
         MVC   RECORD+78(17),=CL17'NOT_NOTEST(DWARF)'            RS0316
         TM    LE_STATUS_BYTE_29,BIT7                            RS1015
         JO    LE_370_SRST_#53                                   RS1015
         MVC   RECORD+78(17),=CL17'NOTEST(DWARF)'                RS0316
LE_370_SRST_#53 DS 0H                                            RS1015
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(15),=CL15'QUALIFY(EXTEND)'               RS1015
         TM    LE_STATUS_BYTE_30,BIT0                            RS1015
         JO    LE_370_SRST_#54                                   RS1015
         MVC   RECORD+1(15),=CL15'QUALIFY(COMPAT)'               RS1015
LE_370_SRST_#54 DS 0H                                            RS1015
         MVC   RECORD+17(11),=CL11'VLR(COMPAT)'                  RS1015
         TM    LE_STATUS_BYTE_30,BIT1                            RS1015
         JO    LE_370_SRST_#55                                   RS1015
         MVC   RECORD+17(13),=CL13'VLR(STANDARD)'                RS1015
LE_370_SRST_#55 DS 0H                                            RS1015
         MVC   RECORD+36(9),=CL9'COPYRIGHT'                      RS1015
         TM    LE_STATUS_BYTE_30,BIT2                            RS1015
         JO    LE_370_SRST_#56                                   RS1015
         MVC   RECORD+36(11),=CL11'NOCOPYRIGHT'                  RS1015
LE_370_SRST_#56 DS 0H                                            RS1015
         MVC   RECORD+48(7),=CL7'SERVICE'                        RS1015
         TM    LE_STATUS_BYTE_30,BIT3                            RS1015
         JO    LE_370_SRST_#57                                   RS1015
         MVC   RECORD+48(9),=CL9'NOSERVICE'                      RS1015
LE_370_SRST_#57 DS 0H                                            RS1015
         MVC   RECORD+58(13),=CL13'ZONEDATA(MIG)'                RS1015
         TM    LE_STATUS_BYTE_30,BIT4                            RS1015
         JO    LE_370_SRST_#58                                   RS1015
         MVC   RECORD+58(13),=CL13'ZONEDATA(PFD)'                RS1015
LE_370_SRST_#58 DS 0H                                            RS1015
         CLC   LE_VERS(4),=C'0601'  Vers+Rel < 0601 E.Cob V6.1   RS0516
         JL    LE_370_SRST_#5        no                          RS0516
         BRAS  R14,SPACE1                                        RS0516
         MVC   RECORD,BLANKS                                     RS0516
         STRING64 (RECORD,,L),1X,'BUILD_LEVEL_INFO(',            RS0516X
               (LE_BUILD_LEVEL),')',                             RS0516X
               INTO=RECORD                                       RS0516
LE_370_SRST_#5 DS 0H                                              *CSC*
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         STRING64 (RECORD,,L),1X,'CODEPAGE(',(LE_CCSID,H,R4B),')',     X
               INTO=RECORD
LE_370_SRST_#99 DS 0H                                            RS1015
         CLC   LE_VERS(4),=C'0501'  Vers+Rel < 0501 E.Cob V5.1   RS1015
         JL    LE_370_50Z            no                          RS1015
         STRING64 (RECORD,,L),'  ARCH(',(LE_ARCHLEVEL,,X),             X
               ') OPT(',(LE_OPT_LEVEL,,X),')',INTO=RECORD        RS1015
LE_370_50Z DS 0H
         BRAS  R14,SPACE2
         STRING64 ADDINFO,INTO=RECORD                             *CSC*
         BRAS  R14,SPACE1
         STRING64 '------------ about DATA DIVISION    --------------',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
         STRING64 'Program use',' no',' QSAM or SAM access method',    X
               INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT0
         JNO   LE_370_51
         STRING64 'Program use',' QSAM or SAM access method',          X
               INTO=RECORD
LE_370_51 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program use',' no',' VSAM sequential files',        X
               INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT1
         JNO   LE_370_52
         STRING64 'Program use',' VSAM sequential files',INTO=RECORD
LE_370_52 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program use',' no',' VSAM indexed files',INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT2
         JNO   LE_370_53
         STRING64 'Program use',' VSAM indexed files',INTO=RECORD
LE_370_53 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program use',' no',' VSAM RBA files',INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT3
         JNO   LE_370_54
         STRING64 'Program use',' VSAM RBA files',INTO=RECORD
LE_370_54 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program use',' no',' CODE-SET (ASCII files)',       X
               INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT4
         JNO   LE_370_55
         STRING64 'Program use',' CODE-SET (ASCII files)',INTO=RECORD
LE_370_55 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program use',' no',' spanned records',INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT5
         JNO   LE_370_56
         STRING64 'Program use',' spanned records',INTO=RECORD
LE_370_56 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program has',' no',' picture G (DBCS) items',       X
               INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT6
         JNO   LE_370_57
         STRING64 'Program has',' picture G (DBCS) items',INTO=RECORD
LE_370_57 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program has',' no',' OCCURS DEPENDING ON items',    X
               INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT7
         JNO   LE_370_58
         STRING64 'Program has',' OCCURS DEPENDING ON items',          X
               INTO=RECORD
LE_370_58 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program has',' no',' SYNCHRONIZED clause',          X
               INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT0
         JNO   LE_370_59
         STRING64 'Program has',' SYNCHRONIZED clause',INTO=RECORD
LE_370_59 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program has',' no',' JUSTIFIED clause',INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT1
         JNO   LE_370_60
         STRING64 'Program has',' JUSTIFIED clause',INTO=RECORD
LE_370_60 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program has',' no',' POINTER items',INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT2
         JNO   LE_370_61
         STRING64 'Program has',' POINTER items',INTO=RECORD
LE_370_61 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program has',' no',' complex ODO clause',INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT3
         JNO   LE_370_62
         STRING64 'Program has',' complex ODO clause',INTO=RECORD
LE_370_62 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program has',' no',' external',                     X
               ' floating-point items',                                X
               INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT4
         JNO   LE_370_63
         STRING64 'Program has',' external',' floating-point items',   X
               INTO=RECORD
LE_370_63 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program has',' no',' internal',                     X
               ' floating-point items',                                X
               INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT5
         JNO   LE_370_63_1
         STRING64 'Program has',' internal',' floating-point items',   X
               INTO=RECORD
LE_370_63_1 DS 0H
         CLI   LE_SWITCH,C'1'                  Cobol/370
         JNE   LE_370_64                       no, jump around
         BRAS  R14,SPACE1
         STRING64 'Program has',' no',' Proc-Pointer or Func-Pointer', X
               ' items',INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT7
         JNO   LE_370_63_2
         STRING64 'Program has',' Proc or Func-Pointer',' items',      X
               INTO=RECORD
LE_370_63_2 DS 0H
         CLC   LE_VERS(4),=C'0202'  Vers+Rel < 0202 COBOL MVS and VM
         JL    LE_370_64            no lower                     RS1000
         BRAS  R14,SPACE1
         STRING64 'Program has',' no',' Line-sequential file',         X
               INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT6
         JNO   LE_370_64
         STRING64 'Program has',' Line-sequential file',               X
               INTO=RECORD
LE_370_64 DS 0H
         STRING64 'The working storage/DSA size is ',            RS0316X
               (LE_TGT_WS_LENGTH,F,R9B),INTO=RECORD              RS1007
         BRAS  R14,SPACE1                                        RS0316
LE_370_65 DS 0H                                                  RS0316
         BRAS  R14,BLANK1                                        RS0316
         STRING64 ADDINFO,INTO=RECORD                             *CSC*
         BRAS  R14,SPACE1
         STRING64 '------------ about ENVIROMENT DIVISION -----------',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
         STRING64 'Program use',' no',' FILE-STATUS clause',INTO=RECORD
         TM    LE_STATUS_BYTE_08,BIT0
         JNO   LE_370_66
         STRING64 'Program use',' FILE-STATUS clause',INTO=RECORD
LE_370_66 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program use',' no',' RERUN clause in I/O-control',  X
               INTO=RECORD
         TM    LE_STATUS_BYTE_08,BIT1
         JNO   LE_370_67
         STRING64 'Program has',' RERUN clause in I/O-control',        X
               INTO=RECORD
LE_370_67 DS 0H
         BRAS  R14,SPACE1
         STRING64 'Program use',' no',' UPSI switches',INTO=RECORD
         TM    LE_STATUS_BYTE_08,BIT2
         JNO   LE_370_68
         STRING64 'Program use',' UPSI switches',INTO=RECORD
LE_370_68 DS 0H
         CLC   LE_VERS(4),=C'0600'  Vers+Rel > 0600 E.Cob V6.1   RS0516
         JL    LE_370_70               no leave                  RS0516
         BRAS  R14,SPACE1                                        RS0516
         STRING64 'WSOPT bit is ','off',INTO=RECORD              RS0516
         TM    LE_STATUS_BYTE_08,BIT3                            RS0516
         JNO   LE_370_69                                         RS0516
         STRING64 'WSOPT bit is ','on',INTO=RECORD               RS0516
LE_370_69 DS 0H                                                  RS0516
         BRAS  R14,SPACE1                                        RS0516
         STRING64 'VSAMOPENFS is ','off',INTO=RECORD             RS0516
         TM    LE_STATUS_BYTE_08,BIT4                            RS0516
         JNO   LE_370_70                                         RS0516
         STRING64 'VSAMOPENFS is ','on',INTO=RECORD              RS0516
LE_370_70 DS 0H                                                  RS0516
         BRAS  R14,SPACE1                                        RS0215
         CLC   LE_VERS(4),=C'0500'  Vers+Rel > 0500 E.Cob V5.1   RS0215
         JH    LE_370_71_1              yes leave                RS0215
         STRING64 'Program address TGT via ','R13',INTO=RECORD   RS1007
         TM    LE_TGT_REG,BIT0                                   RS1007
         JNO   LE_370_71                                         RS1007
         STRING64 'Program address TGT via ','R9',INTO=RECORD    RS1007
LE_370_71 DS 0H
         BRAS  R14,SPACE1                                        RS0215
LE_370_71_1 DS 0H                                                RS0215
         BRAS  R14,BLANK1                                        RS0215
         STRING64 ADDINFO,INTO=RECORD                             *CSC*
         BRAS  R14,SPACE1
         STRING64 '------------ about PROCEDURE DIVISION  -----------',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
         STRING64 'Following statements in control (check Y/N):',      X
               INTO=RECORD
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(6),=CL6'Accept'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_09,BIT0
         JNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(3),=CL3'Add'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_09,BIT1
         JNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(5),=CL5'Alter'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_09,BIT2
         JNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(4),=CL4'Call'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_09,BIT3
         JNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(6),=CL6'Cancel'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_09,BIT4
         JNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(5),=CL5'Close'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_09,BIT6
         JNO   *+8
         MVI   RECORD+100,C'Y'
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(7),=CL7'Compute'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_10,BIT0
         JNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(6),=CL6'Delete'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_10,BIT2
         JNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(7),=CL7'Display'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_10,BIT4
         JNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(6),=CL6'Divide'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_10,BIT5
         JNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(11),=CL11'End-Perform'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_11,BIT1
         JNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(5),=CL5'Enter'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_11,BIT2
         JNO   *+8
         MVI   RECORD+100,C'Y'
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(5),=CL5'Entry'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_11,BIT3
         JNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(4),=CL4'Exit'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_11,BIT4
         JNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(5),=CL5'Go_to'                          ES0116
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_11,BIT6
         JNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(2),=CL2'If'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_11,BIT7
         JNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(10),=CL10'Initialize'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_12,BIT0
         JNO   *+8
         MVI   RECORD+83,C'Y'
         CLI   LE_SWITCH,C'1'   COBOL/370 ?
         JNE   LE_370_75          no, jump around
         MVC   RECORD+86(6),=CL6'Invoke'   comes with COBOL/370
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_12,BIT1
         JNO   *+8
         MVI   RECORD+100,C'Y'
LE_370_75 DS 0H
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(7),=CL7'Inspect'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_12,BIT2
         JNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(5),=CL5'Merge'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_12,BIT3
         JNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(4),=CL4'Move'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_12,BIT4
         JNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(8),=CL8'Multiply'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_12,BIT5
         JNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(4),=CL4'Open'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_12,BIT6
         JNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(7),=CL7'Perform'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_12,BIT7
         JNO   *+8
         MVI   RECORD+100,C'Y'
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(4),=CL4'Read'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_13,BIT0
         JNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(7),=CL7'Release'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_13,BIT2
         JNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(6),=CL6'Return'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_13,BIT3
         JNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(7),=CL7'Rewrite'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_13,BIT4
         JNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(6),=CL6'Search'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_13,BIT5
         JNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(3),=CL3'Set'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_13,BIT7
         JNO   *+8
         MVI   RECORD+100,C'Y'
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(4),=CL4'Sort'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_14,BIT0
         JNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(5),=CL5'Start'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_14,BIT1
         JNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(4),=CL4'Stop'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_14,BIT2
         JNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(6),=CL6'String'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_14,BIT3
         JNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(8),=CL8'Subtract'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_14,BIT4
         JNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(8),=CL8'Unstring'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_14,BIT7
         JNO   *+8
         MVI   RECORD+100,C'Y'
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(3),=CL3'Use'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_15,BIT0
         JNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(5),=CL5'Write'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_15,BIT1
         JNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(8),=CL8'Continue'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_15,BIT2
         JNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(7),=CL7'End-Add'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_15,BIT3
         JNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(8),=CL8'End-Call'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_15,BIT4
         JNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(11),=CL11'End-Compute'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_15,BIT5
         JNO   *+8
         MVI   RECORD+100,C'Y'
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(10),=CL10'End-Delete'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_15,BIT6
         JNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(10),=CL10'End-Divide'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_15,BIT7
         JNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(12),=CL12'End-Evaluate'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_16,BIT0
         JNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(6),=CL6'End-If'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_16,BIT1
         JNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(12),=CL12'End-Multiply'                 RS1007
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_16,BIT2
         JNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(8),=CL8'End-Read'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_16,BIT3
         JNO   *+8
         MVI   RECORD+100,C'Y'
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(10),=CL10'End-Return'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_16,BIT4
         JNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(11),=CL11'End-Rewrite'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_16,BIT5
         JNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(10),=CL10'End-Search'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_16,BIT6
         JNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(9),=CL9'End-Start'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_16,BIT7
         JNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(10),=CL10'End-String'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_17,BIT0
         JNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(12),=CL12'End-Subtract'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_17,BIT1
         JNO   *+8
         MVI   RECORD+100,C'Y'
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(12),=CL12'End-Unstring'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_17,BIT2
         JNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(9),=CL9'End-Write'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_17,BIT3
         JNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(6),=CL6'Goback'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_17,BIT4
         JNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(9),=CL9'Evaluate'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_17,BIT5
         JNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(7),=CL7'Service'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_17,BIT7
         JNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(10),=CL10'End-Invoke'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_18,BIT0
         JNO   *+8
         MVI   RECORD+100,C'Y'
         BRAS  R14,SPACE1
         CLI   LE_SWITCH,C'1'   COBOL/370
         JNE   LE_370_125
         CLC   LE_VERS(4),=C'0301'  Vers+Rel < 0301 COBOL V3R1
         JL    LE_370_125            yes
         MVC   RECORD,BLANKS
         MVC   RECORD+1(4),=CL4'Exec'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_11,BIT5
         JNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(8),=CL8'End-Exec'                       RS0705
         MVI   RECORD+32,C'N'                                    RS0705
         TM    LE_STATUS_BYTE_18,BIT1                            RS0705
         JNO   *+8                                               RS0705
         MVI   RECORD+32,C'Y'                                    RS0705
         MVC   RECORD+35(3),=CL3'XML'                            RS0705
         MVI   RECORD+49,C'N'                                    RS0705
         TM    LE_STATUS_BYTE_18,BIT2                            RS0705
         JNO   *+8                                               RS0705
         MVI   RECORD+49,C'Y'                                    RS0705
         MVC   RECORD+52(7),=CL7'End-XML'                        RS0705
         MVI   RECORD+66,C'N'                                    RS0705
         TM    LE_STATUS_BYTE_18,BIT3                            RS0705
         JNO   *+8                                               RS0705
         MVI   RECORD+66,C'Y'                                    RS0705
         BRAS  R14,SPACE1
LE_370_125 DS 0H
         STRING64 '- - - - - - - - - - - - - - - - - - - - - - - ', *CSX
               '- - - - - - - - - - - - - - - - - - - - - - - - - - -',X
               ' -',                                                   X
               INTO=RECORD                                       RS1007
         BRAS  R14,SPACE2
         STRING64 'No hexadecimal literals',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT0
         JNO   LE_370_128
         STRING64 'Procedure include hexadecimal literals',INTO=RECORD
LE_370_128 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No altered GO TO',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT1
         JNO   LE_370_129
         STRING64 'Program contains altered GO TO',INTO=RECORD
LE_370_129 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','I/O error declarative',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT2
         JNO   LE_370_130
         STRING64 'I/O error declarative',INTO=RECORD
LE_370_130 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Label declarative',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT3
         JNO   LE_370_131
         STRING64 'Label declarative',INTO=RECORD
LE_370_131 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Debugging declarative',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT4
         JNO   LE_370_132
         STRING64 'Debugging declarative',INTO=RECORD
LE_370_132 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Program segmentation',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT5
         JNO   LE_370_133
         STRING64 'Program segmentation',INTO=RECORD
LE_370_133 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Open Extend',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT6
         JNO   LE_370_134
         STRING64 'Open Extend',INTO=RECORD
LE_370_134 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Exit Program',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT7
         JNO   LE_370_135
         STRING64 'Exit Program',INTO=RECORD
LE_370_135 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No call literal',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT0
         JNO   LE_370_136
         STRING64 'Call literal (static?), see options',INTO=RECORD
LE_370_136 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Call identifier',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT1
         JNO   LE_370_137
         STRING64 'Call identifier',INTO=RECORD
LE_370_137 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Call on overflow',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT2
         JNO   LE_370_138
         STRING64 'Call on overflow',INTO=RECORD
LE_370_138 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Call length of',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT3
         JNO   LE_370_139
         STRING64 'Call length of',INTO=RECORD
LE_370_139 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Call address of',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT4
         JNO   LE_370_140
         STRING64 'Call address of',INTO=RECORD
LE_370_140 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Close reel/unit',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT5
         JNO   LE_370_141
         STRING64 'Close reel/unit',INTO=RECORD
LE_370_141 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Exponentiation used',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT6
         JNO   LE_370_142
         STRING64 'Exponentiation used',INTO=RECORD
LE_370_142 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Floating point items used',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT7
         JNO   LE_370_143
         STRING64 'Floating point items used',INTO=RECORD
LE_370_143 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Copy-Statements',INTO=RECORD
         TM    LE_STATUS_BYTE_23,BIT0
         JNO   LE_370_144
         STRING64 'Copy-Statements',INTO=RECORD
LE_370_144 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Basis-Statements',INTO=RECORD
         TM    LE_STATUS_BYTE_23,BIT1
         JNO   LE_370_145
         STRING64 'Basis-Statements',INTO=RECORD
LE_370_145 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','DBCS-Name in Program',INTO=RECORD
         TM    LE_STATUS_BYTE_23,BIT2
         JNO   LE_370_146
         STRING64 'DBCS-Name in Program',INTO=RECORD
LE_370_146 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Shift-In/Shift-Out',INTO=RECORD
         TM    LE_STATUS_BYTE_23,BIT3
         JNO   LE_370_146_1                                      RS0316
         STRING64 'Shift-In/Shift-Out',INTO=RECORD
LE_370_146_1 DS 0H
         CLC   LE_VERS(4),=C'0600'  Vers+Rel > 0600 E.Cob V6.1   RS0316
         JL    LE_370_147              no leave                  RS0316
         BRAS  R14,SPACE1                                        RS0316
         STRING64 'No ','Suppress',INTO=RECORD                   RS0316
         TM    LE_STATUS_BYTE_23,BIT4                            RS0316
         JNO   LE_370_147                                        RS0316
         STRING64 'Suppress',INTO=RECORD                         RS0316
LE_370_147 DS 0H                                                 RS0316
         BRAS  R14,SPACE1
         STRING64 'No ','DBCS literal',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT0
         JNO   LE_370_148
         STRING64 'DBCS literal',INTO=RECORD
LE_370_148 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Replace-Statements',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT1
         JNO   LE_370_149
         STRING64 'Replace-Statements',INTO=RECORD
LE_370_149 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Reference modification was used',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT2
         JNO   LE_370_150
         STRING64 'Reference modification was used',INTO=RECORD
LE_370_150 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Nested Program',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT3
         JNO   LE_370_151
         STRING64 'Nested Program',INTO=RECORD
LE_370_151 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','INITIAL Program',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT4
         JNO   LE_370_152
         STRING64 'INITIAL Program',INTO=RECORD
LE_370_152 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','COMMON Program',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT5
         JNO   LE_370_153
         STRING64 'COMMON Program',INTO=RECORD
LE_370_153 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Select Optional Files',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT6
         JNO   LE_370_154
         STRING64 'Select Optional Files',INTO=RECORD
LE_370_154 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','External Files',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT7
         JNO   LE_370_155
         STRING64 'External Files',INTO=RECORD
LE_370_155 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Global Files',INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT0
         JNO   LE_370_156
         STRING64 'Global Files',INTO=RECORD
LE_370_156 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Record is varying clause',INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT1
         JNO   LE_370_157
         STRING64 'Record is varying clause',INTO=RECORD
LE_370_157 DS 0H
         BRAS  R14,SPACE1
         CLC   LE_VERS(4),=C'0400'  Vers+Rel > 0400 E.Cob V4.1   RS1015
         JH    LE_370_157_1          yes                         RS1015
         STRING64 'No ','Accept',' from ','SYSIPT',                    X
               ' used in Label Declarative',                           X
               INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT2
         JNO   LE_370_158
         STRING64 'Accept',' from ','SYSIPT',                          X
               ' used in Label Declarative',                           X
               INTO=RECORD
         J     LE_370_158
LE_370_157_1 DS 0H                          Enterprise Cobol
         STRING64 'No ','Volatile',                                    X
               INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT2
         JNO   LE_370_158
         STRING64 'Volatile',                                          X
               INTO=RECORD
LE_370_158 DS 0H
         BRAS  R14,SPACE1
         CLC   LE_VERS(4),=C'0400'  Vers+Rel > 0400 E.Cob V4.1   RS1015
         JH    LE_370_160_#1         yes                         RS1015
         STRING64 'No ','Display',' upon ','SYSLST',                   X
               ' used in Label Declarative',                           X
               INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT3
         JNO   LE_370_159
         STRING64 'Display',' upon ','SYSLST',                         X
               ' used in Label Declarative',                           X
               INTO=RECORD
LE_370_159 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Display',' upon ','SYSPCH',                   X
               ' used in Label Declarative',                           X
               INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT4
         JNO   LE_370_160
         STRING64 'Display',' upon ','SYSPCH',                         X
               ' used in Label Declarative',                           X
               INTO=RECORD
LE_370_160 DS 0H
         BRAS  R14,SPACE1
LE_370_160_#1 DS 0H
         STRING64 'No ','Intrinsic function was used',INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT5
         JNO   LE_370_160_1
         STRING64 'Intrinsic function was used',INTO=RECORD
LE_370_160_1 DS 0H
         BRAS  R14,SPACE1
         CLC   LE_VERS(4),=C'0400'  Vers+Rel > 0400 E.Cob V4.1   RS1015
         JL    LE_370_161            no                          RS1015
         STRING64 'No ','Z-literal found',INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT5
         JNO   LE_370_160_2
         STRING64 'Z-literal found',INTO=RECORD
LE_370_160_2 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Recursive',INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT5
         JNO   LE_370_161
         STRING64 'Recursive',INTO=RECORD
LE_370_161 DS 0H
         CLI   LE_SWITCH,C'1'   COBOL/370
         JNE   LE_370_177
         CLC   LE_VERS(4),=C'0301'  Vers+Rel < 0301 COBOL V3R1
         JL    LE_370_177            yes
         BRAS  R14,SPACE1
         STRING64 'No ','Function Random was used',INTO=RECORD
         TM    LE_STATUS_BYTE_29,BIT1
         JNO   LE_370_162
         STRING64 'Function Random was used',INTO=RECORD
LE_370_162 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','Java-based OO syntax was used',INTO=RECORD
         TM    LE_STATUS_BYTE_29,BIT0
         JNO   LE_370_163
         STRING64 'Java-based OO syntax was used',INTO=RECORD
LE_370_163 DS 0H
         BRAS  R14,SPACE1
         STRING64 'No ','National data was used',INTO=RECORD
         TM    LE_STATUS_BYTE_29,BIT2
         JNO   LE_370_164                                        RS1015
         STRING64 'National data was used',INTO=RECORD
LE_370_164 DS 0H                                                 RS1015
         BRAS  R14,SPACE1                                        RS1015
         STRING64 'No ','XML PARSE with schema validation',INTO=RECORD
         TM    LE_STATUS_BYTE_29,BIT2                            RS1015
         JNO   LE_370_177                                        RS1015
         STRING64 'XML PARSE with schema validation',INTO=RECORD RS1015
LE_370_177 DS 0H
         BRAS  R14,SPACE2
*>--moved start -------------------------------------------------HP1107
         L     R8,LE_TGT_FIB_PTR                                 RS1007
         USING COBOL_FIB_DSECT,R8                                RS1007
         ICM   R9,B'1111',LE_TGT_NO_FCB  for the loop            RS1007
         JZ    LE_FCB_END        no entry leave                  RS1007
         TM    LE_STATUS_BYTE_03,BIT1 RENT?                      RS1107
         JO    LE_FCB_RENT                                       RS1107
         L     R8,LE_TGT_PTR_FCB_CELL Point to FCB-Cells         RS1107
         ST    R8,SAVE_CUR_FCB_CELL   Keep it for later
         L     R8,0(R8)               First FCB
         L     R8,164(R8)             First FIB
LE_FCB_RENT DS 0H                                                RS1007
         STRING64 '------------ FCB-Analysis ------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD                                       RS1007
         BRAS  R14,SPACE2                                        RS1007
         STRING64 'DDName   RecFM Acc  DSOrg       RecL      Blk   RM',X
               INTO=RECORD                                       RS1207
         BRAS  R14,SPACE1                                        RS1007
*loop                                                            RS1007
LE_FCB_01  DS 0H                                                 RS1007
         CLC   COBOL_FIB_EYEC,=C'FIB'  is this a FIB ??          RS1007
         JE    LE_FCB_02                                         RS1007
         AHI   R8,4                    try +4                    RS1007
         J     LE_FCB_01               loop                      RS1007
LE_FCB_02      DS 0H                                             RS1007
***      STRING64 (COBOL_FIB_DDN),1X,(COBOL_FIB_RECFM,,X),4X,          X
               (COBOL_FIB_ACCESS,,X),3X,(COBOL_FIB_DSORG,,X),3X,       X
               (COBOL_FIB_LRECL,,X),1X,(COBOL_FIB_BLK,,X),1X,          X
               (COBOL_FIB_RM,,X),1X,(COBOL_FIB_OPEN_CLOSE,,X),1X,      X
               (COBOL_FIB_I_O_VERB1,,X),1X,                            X
               (COBOL_FIB_I_O_VERB2,,X),1X,                            X
               (COBOL_FIB_BYTE18,,X),1X,(COBOL_FIB_BYTE19,,X),1X,      X
               (COBOL_FIB_FS1,,X),1X,                                  X
               (COBOL_FIB_FS2,,X),                                     X
               INTO=RECORD             debugcode                 RS1007
***      BRAS  R14,SPACE1              debugcode                 HP1107
         STRING64 (COBOL_FIB_DDN),INTO=RECORD                    RS1007
         BRAS  R10,LE_FCB_05                                     RS1007
         DC    XL1'C0',CL3'U  '                                  HP1107
         DC    XL1'98',CL3'FBS'                                  RS1007
         DC    XL1'94',CL3'FBA'                                  RS1007
         DC    XL1'92',CL3'FBM'                                  RS1007
         DC    XL1'90',CL3'FB '                                  RS1007
         DC    XL1'84',CL3'FA '                                  RS1007
         DC    XL1'82',CL3'FM '                                  RS1007
         DC    XL1'80',CL3'F  '                                  RS1007
         DC    XL1'58',CL3'VBS'                                  RS1007
         DC    XL1'54',CL3'VBA'                                  RS1007
         DC    XL1'52',CL3'VBM'                                  RS1007
         DC    XL1'50',CL3'VB '                                  RS1007
         DC    XL1'44',CL3'VA '                                  RS1007
         DC    XL1'42',CL3'VM '                                  RS1007
         DC    XL1'40',CL3'V  '                                  RS1007
         DC    XL1'20',CL3'U  '                                  HP1107
         DC    XL1'00',CL3'???'                 end of table     RS1007
*  loop                                                          RS1007
LE_FCB_05      DS 0H                                             RS1007
         CLC   COBOL_FIB_RECFM,0(R10)          check             RS1007
         JE    LE_FCB_06               jump if on                RS1007
         LA    R10,4(,R10)             Skip entry                RS1007
         CLI   0(R10),0                end of table?             RS1007
         JNE   LE_FCB_05               not yet, loop             RS1007
*  endloop                                                       RS1007
LE_FCB_06      DS 0H                                             RS1007
         MVC   RECORD+9(3),1(R10)      long text for RECFM       RS1007
         BRAS  R10,LE_FCB_10                                     RS1007
         DC    XL1'80',CL3'SEQ'                                  RS1007
         DC    XL1'40',CL3'RAN'                                  RS1007
         DC    XL1'20',CL3'DYN'                                  RS1007
         DC    XL1'10',CL3'SPA'                                  RS1107
         DC    XL1'00',CL3'???'                 end of table     RS1007
*  loop                                                          RS1007
LE_FCB_10      DS 0H                                             RS1007
         CLC   COBOL_FIB_ACCESS,0(R10)         check             RS1007
         JE    LE_FCB_11               jump if on                RS1007
         LA    R10,4(,R10)             Skip entry                RS1007
         CLI   0(R10),0                end of table?             RS1007
         JNE   LE_FCB_10               not yet, loop             RS1007
*  endloop                                                       RS1007
LE_FCB_11      DS 0H                                             RS1007
         MVC   RECORD+15(3),1(R10)     long text for Access      RS1007
         BRAS  R10,LE_FCB_15                                     RS1007
         DC    XL1'88',CL4'ESDS'                                 RS1007
         DC    XL1'84',CL4'PS  '                                 RS1007
         DC    XL1'80',CL4'PS  '                                 RS1007
         DC    XL1'48',CL4'KSDS'                                 RS1007
         DC    XL1'40',CL4'KSDS'                                 RS1007
         DC    XL1'28',CL4'RRDS'                                 RS1007
         DC    XL1'20',CL4'RRDS'                                 RS1007
         DC    XL1'10',CL4'LSEQ'                                 HP1107
         DC    XL1'00',CL4'??? '                end of table     RS1007
*  loop                                                          RS1007
LE_FCB_15      DS 0H                                             RS1007
         CLC   COBOL_FIB_DSORG,0(R10)          check             RS1007
         JE    LE_FCB_16               jump if on                RS1007
         LA    R10,5(,R10)             Skip entry                RS1007
         CLI   0(R10),0                end of table?             RS1007
         JNE   LE_FCB_15               not yet, loop             RS1007
*  endloop                                                       RS1007
LE_FCB_16      DS 0H                                             RS1007
         MVC   RECORD+20(4),1(R10)     long text for DSORG       RS1007
         STRING64 (RECORD,26),1X,                                      X
               (COBOL_FIB_LRECL,F,R9B),1X,(COBOL_FIB_BLK,F,R9B),       X
               INTO=RECORD                                       RS1007
         BRAS  R10,LE_FCB_20                                     RS1007
         DC    XL1'80',CL2'F '                                   RS1007
         DC    XL1'40',CL2'V '                                   RS1007
         DC    XL1'20',CL2'U '                                   RS1007
         DC    XL1'10',CL2'D '                                   RS1007
         DC    XL1'00',CL4'??? '                end of table     RS1007
*  loop
LE_FCB_20      DS 0H                                             RS1007
         CLC   COBOL_FIB_RM,0(R10)
         JE    LE_FCB_21               jump if on                RS1007
         LA    R10,3(,R10)             Skip entry                RS1007
         CLI   0(R10),0                end of table?             RS1007
         JNE   LE_FCB_20               not yet, loop             RS1007
*  endloop
LE_FCB_21      DS 0H                                             RS1007
         MVC   RECORD+48(2),1(R10)     text for recording mode   HP1107
         LA    R3,RECORD+51            R3 for #STATUS            HP1107
        #STATUS COBOL_FIB_OPEN_CLOSE,BIT0,'Input'                RS1007
        #STATUS COBOL_FIB_OPEN_CLOSE,BIT1,'Output'               RS1007
        #STATUS COBOL_FIB_OPEN_CLOSE,BIT2,'IO'                   RS1007
        #STATUS COBOL_FIB_OPEN_CLOSE,BIT3,'Extent'               RS1007
        #STATUS COBOL_FIB_OPEN_CLOSE,BIT4,'Reverse'              RS1007
        #STATUS COBOL_FIB_OPEN_CLOSE,BIT5,'Norewind'             RS1007
        #STATUS COBOL_FIB_OPEN_CLOSE,BIT6,'Close'                RS1007
        #STATUS COBOL_FIB_OPEN_CLOSE,BIT7,'Close-R'              RS1007
        #STATUS COBOL_FIB_I_O_VERB1,BIT4,'Read-IO'               RS1007
        #STATUS COBOL_FIB_I_O_VERB1,BIT2+BIT3+BIT5,'Write-IO'    RS1007
        #STATUS COBOL_FIB_I_O_VERB1,BIT6,'Rewrite-IO'            RS1007
        #STATUS COBOL_FIB_I_O_VERB1,BIT7,'Start-IO'              RS1007
        #STATUS COBOL_FIB_I_O_VERB2,BIT0,'Delete-IO'             RS1007
        #STATUS COBOL_FIB_I_O_VERB2,BIT1,'Sort-IO-G'             RS1007
        #STATUS COBOL_FIB_I_O_VERB2,BIT2,'Sort-IO-U'             RS1007
         MVC   0(2,R3),=C'E '                                    RS1007
        #STATUS COBOL_FIB_BYTE18,BIT4,'L'                        RS1007
         BRASL R14,SPACE1                                        RS1007
         CHI   R9,1                   Last entry?                RS1107
         JE    LE_FCB_97              jump around RENT           RS1107
         TM    LE_STATUS_BYTE_03,BIT1 RENT?                      RS1107
         JO    LE_FCB_95                yes                      RS1107
         L     R8,SAVE_CUR_FCB_CELL   Restore last FCB-CELL
         AHI   R8,4                   Next FCB-CELL
         ST    R8,SAVE_CUR_FCB_CELL   Keep it for later
         L     R8,0(R8)               Next FCB
         L     R8,164(R8)             Next FIB
         J     LE_FCB_97              jump around RENT           RS1107
LE_FCB_95 DS 0H
*              Was 160(R8), but COBOL/2 V1 M2 R0 is only 128...  PF0608
         LA    R8,128(R8)              next entry                PF0608
LE_FCB_97 DS 0H
         BRCT  R9,LE_FCB_01            loop                      RS1007
*  endloop                                                       RS1007
LE_FCB_END DS 0H                                                 RS1007
         BRAS  R14,BLANK1                                        RS1107
         STRING64 '------------ End  --------------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
*>--moved end ---------------------------------------------------HP1107
*>---------------------------------------------------------------HP1107
*>-      check for submodul-analysis                             HP1107
*>---------------------------------------------------------------HP1107
         CLI   csect_analyze_kz,C'M'  first csect (main-ep)      HP1107
         je    BINDER_Anf             yes, skip csect-info       HP1107
         CLI   csect_analyze_kz,C'S'  any more csects ?          HP1107
         je    COBANAL_Csect_Loop                                HP1107
         mvc   PGMNAME_GET,PGMNAME_sav                           HP1107
         MVI   PRINT_LEAD_SPACE,C'N' Insert space                HP1107
         J     COBANAL_EXIT           main-loop                  HP1107
BINDER_Anf  DS    0H                                             HP1107
*>---------------------------------------------------------------HP1107
         BRAS  R14,BINDER_INFO
         BRAS  R14,CEEUOPT_INFO
CICS     DS    0H
         STRING64 '------------ CICS (contains also included Csects) ',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
         CLC   CSV_OUTXTLST_ENTRR,=F'1' only one extent ??       RS0704
         JNH   LE_CICS                                           RS0704
         STRING64 'This module was loaded into more then one extent,', X
               ' perhaps it is a DLL with different RMODE',INTO=RECORD
         BRAS  R14,SPACE1                                        RS0704
         STRING64 'CobAnal analyze the first extent only!!!',          X
               INTO=RECORD
         BRAS  R14,SPACE1                                        RS0704
LE_CICS  DS    0H
         L     R5,CSV_OUTXTLST_ELP1  Start of data to be searchedRS0704
*        STRING64 4X,(00(R5),4,X),1X,(04(R5),4,X),1X,(08(R5),4,X),1X,  X
               (12(R5),4,X),3X,(00(R5),16),                            X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
         L     R4,CSV_OUTXTLST_EL1   Length of string            RS0704
         AR    R4,R5         Points to the end of data
         LR    R8,R4         keep it for later
         LA    R0,C'D'       Search for 'D'
LE_CICS_10  DS    0H
         SRST  R4,R5         Search
         BRC   1,LE_CICS_10  Search interrupted, continue        RS1007
         BRC   2,LE_CICS_20  String not found                    RS1007
         LR    R2,R8         End of string
         SR    R2,R4         minus found at
         CH    R2,=H'9'      at least 9 bytes ???
         JL    LE_CICS_20    no leave
         CLC   =C'DFHEITAB ',0(R4)
         JE    LE_CICS_11
         LR    R5,R4
         LA    R5,1(,R5)     +1
         LR    R4,R8
         J     LE_CICS_10    Search again
LE_CICS_11  DS    0F
*        STRING64 'CICS Precompiler Debug2 R2=',((R2),,X),'<- ',       X
               'R4=',((R4),,X),'<- ',                                  X
               'R8=',((R8),,X),'<- ',                                  X
               'VALUE=',(9(R4),3,T),'<-',                              X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
         STRING64 'COBOL2',INTO=CSCCOBOL                          *CSC*
         STRING64 'P',(9(R4),3,T),INTO=CSCCICS                    *CSC*
         STRING64 'CICS Precompiler Version: ',                        X
               (9(R4),3,T),INTO=RECORD
         CLC   CSCCOMP(11),=CL11'OS/VS/COBOL' OS/VS/Cobol ?      RS1107
         JNE   LE_CICS_12             no, jump arounded          RS1107
         STRING64 'n/a',INTO=CSCCOBOL Set n/a for OS/VS Cobol    RS1107
LE_CICS_12  DS    0H                                             RS1107
         J     LE_CICS_50    end
LE_CICS_20  DS    0H                                             RS1207
         L     R5,CSV_OUTXTLST_ELP1  Start of data to be searchedRS1207
         L     R4,CSV_OUTXTLST_EL1   Length of string            RS1207
         AR    R4,R5         Points to the end of data           RS1207
         LR    R8,R4         keep it for later                   RS1207
         LA    R0,C'd'       Search for 'D'                      RS1207
LE_CICS_21  DS    0H                                             RS1207
         SRST  R4,R5         Search                              RS1207
         BRC   1,LE_CICS_21  Search interrupted, continue        RS1207
         BRC   2,LE_CICS_30  String not found                    RS1207
         LR    R2,R8         End of string Test                  RS1207
         SR    R2,R4         minus found at                      RS1207
         CH    R2,=H'9'      at least 9 bytes ???                RS1207
         JL    LE_CICS_30    no leave                            RS1207
         CLC   =C'dfheitab ',0(R4)                               RS1207
         JE    LE_CICS_22                                        RS1207
         LR    R5,R4                                             RS1207
         LA    R5,1(,R5)     +1                                  RS1207
         LR    R4,R8                                             RS1207
         J     LE_CICS_21    Search again                        RS1207
LE_CICS_22  DS    0F                                             RS1207
*        STRING64 'CICS Precompiler Debug2 R2=',((R2),,X),'<- ', RS1207X
               'R4=',((R4),,X),'<- ',                            RS1207X
               'R8=',((R8),,X),'<- ',                            RS1207X
               'VALUE=',(9(R4),3,T),'<-',                        RS1207X
               INTO=RECORD                                       RS1207
*        BRAS  R14,SPACE1          <== next line                 RS1207
         STRING64 'COBOL2',INTO=CSCCOBOL                         RS1207
         STRING64 'P',(9(R4),3,T),INTO=CSCCICS                   RS1207
         STRING64 'CICS Precompiler Version: ',                  RS1207X
               (9(R4),3,T),INTO=RECORD Columns                   RS1207
         CLC   CSCCOMP(11),=CL11'OS/VS/COBOL' OS/VS/Cobol ?      RS1207
         JNE   LE_CICS_29             no, jump arounded          RS1207
         STRING64 'n/a',INTO=CSCCOBOL Set n/a for OS/VS Cobol    RS1207
LE_CICS_29  DS    0H                                             RS1207
         J     LE_CICS_50    end Scroll                          RS1207
LE_CICS_30 DS 0H ===>
*        STRING64 'CICS Precompiler Debug3 R2=',((R2),,X),'<- ',       X
               'R4=',((R4),,X),'<- ',                                  X
               'R8=',((R8),,X),'<- ',                                  X
               'VALUE=',(9(R4),3,T),'<-',                              X
               INTO=RECORD
*        BRAS  R14,SPACE1          <== next line
         STRING64 'CICS Precompiler Version: ','n/a',INTO=RECORD
LE_CICS_50  DS    0H
         BRAS  R14,SPACE1
         L     R5,CSV_OUTXTLST_ELP1  Start of data to be searchedRS0704
         L     R4,CSV_OUTXTLST_EL1   Length of string            RS0704
         AR    R4,R5         Points to the end of data
         LR    R8,R4         keep it for later
         LA    R0,C'D'       Search for 'D'
LE_CICS_60  DS    0H
         SRST  R4,R5         Search
         BRC   1,LE_CICS_60  Search interrupted, continue        RS1007
         BRC   2,LE_CICS_80  String not found                    RS1007
         LR    R2,R8         End of string
         SR    R2,R4         minus found at
         CH    R2,=H'5'      at least 5 bytes ???
         JL    LE_CICS_80    no leave
         CLC   =C'DFHYI',0(R4)  DFHEILII
         JE    LE_CICS_70
         CLC   =C'DFHYC',0(R4)  DFHECI
         JE    LE_CICS_70
         LR    R5,R4
         LA    R5,1(,R5)     +1
         LR    R4,R8
         J     LE_CICS_60    Search again
LE_CICS_70  DS    0H
         CLC   CSCCOBOL,=CL6'COBOL2'                              *CSC*
         JE    LE_CICS_75                                         *CSC*
*        Stub included but no precompiler so COBOL3 assumed
         STRING64 'COBOL3',INTO=CSCCOBOL                          *CSC*
LE_CICS_75  DS    0H
         STRING64 'S',(5(R4),3,T),INTO=CSCCICS                    *CSC*
         STRING64 'CICS Stub Version: ',                               X
               (5(R4),3,T),INTO=RECORD
         CLC   CSCCOMP(11),=CL11'OS/VS/COBOL' OS/VS/Cobol ?      RS1107
         JNE   LE_CICS_76             no, jump arounded          RS1107
         STRING64 'n/a',INTO=CSCCOBOL Set n/a for OS/VS Cobol    RS1107
LE_CICS_76  DS    0H                                             RS1107
         J     LE_CICS_90
LE_CICS_80 DS 0H
         STRING64 'CICS Stub Version: ','n/a',INTO=RECORD
LE_CICS_90  DS    0H
         BRAS  R14,SPACE1
         L     R5,CSV_OUTXTLST_ELP1  Start of data to be searchedRS0704
         L     R4,CSV_OUTXTLST_EL1   Length of string            RS0704
         AR    R4,R5         Points to the end of data
         LR    R8,R4         keep it for later
         LA    R0,C'D'       Search for 'D'
LE_CICS_100 DS    0H
         SRST  R4,R5         Search
         BRC   1,LE_CICS_100 Search interrupted, continue        RS1007
         BRC   2,LE_CICS_120 String not found                    RS1007
         LR    R2,R8         End of string
         SR    R2,R4         minus found at
         CH    R2,=H'8'      at least 8 bytes ???
         JL    LE_CICS_120   no leave
         CLC   =C'DFHXCSTB',0(R4)
         JE    LE_CICS_110
         LR    R5,R4
         LA    R5,1(,R5)     +1
         LR    R4,R8
         J     LE_CICS_100   Search again
LE_CICS_110 DS    0H
         STRING64 'X',(13(R4),3,T),INTO=CSCCICS                  RS1007
         STRING64 'CICS EXCI Version: ',                               X
               (13(R4),3,T),INTO=RECORD
         BRAS  R14,SPACE2                                         *CSC*
         STRING64 'Note: This program uses the CICS EXCI ',       *CSC*X
               'Interface.',INTO=RECORD                           *SC*X
         J     LE_CICS_END   end
LE_CICS_120 DS 0H
         STRING64 'CICS EXCI Version: ','n/a',INTO=RECORD
LE_CICS_END DS 0H
         BRAS  R14,SPACE2
*>---------------------------------------------------------------HP1107
*>   any more csect's ? -> return to csect-loop                  HP1107
         CLI   LE_SWITCH,C'3'    OS/VS COBOL ?                   RS1107
         JE    INFO_COBOL_END      no, go ahead                  RS1107
         CLI   csect_analyze_kz,C'S'  any more csects ?          HP1107
         je    COBANAL_Csect_Loop                                HP1107
*>---------------------------------------------------------------HP1107
         MVC   PGMNAME_GET,PGMNAME_SAV                           PF0608
         MVI   PRINT_LEAD_SPACE,C'N' Insert no space             PF0608
         LA    R15,0
         J     COBANAL_EXIT
INFO_COBOL DS 0H
         L     R4,SAVER4                                          *CSC*
         USING COBOL_1_DSECT,R4                                   *CSC*
         L     R5,C1_TGT_PTR     Ensure still point to COBOL1 TGT *CSC*
*                                                                 *CSC*
         CLI   C1_OEM_MOD_AREA,X'00' low-value ?                 RS0700
         JE    INFO_COBOL_OEM                                    RS0700
         STRING64 '------------ OEM Modified Area -------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD                                       RS0700
         BRAS  R14,SPACE2                                        RS0700
         STRING64 ' ',C1_OEM_MOD_AREA,INTO=RECORD                RS0700
         BRAS  R14,SPACE2                                        RS0700
INFO_COBOL_OEM DS 0H                                             RS0700
         STRING64 '------------ Options in effect -------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
         MVC   RECORD,BLANKS
         MVC   RECORD+1(8),=CL8'SYMDMP'
         TM    C1_STATUS_BYTE_01,X'08'
         JO    *+10
         MVC   RECORD+1(8),=CL8'NOSYMDMP'
         MVC   RECORD+10(6),=CL6'FLOW'
         TM    C1_STATUS_BYTE_01,X'04'
         JO    *+10
         MVC   RECORD+10(6),=CL6'NOFLOW'
         MVC   RECORD+17(7),=CL7'STATE'
         TM    C1_STATUS_BYTE_01,X'02'
         JO    *+10
         MVC   RECORD+17(7),=CL7'NOSTATE'
         MVC   RECORD+25(6),=CL6'OPT'
         TM    C1_STATUS_BYTE_01,X'01'
         JO    *+10
         MVC   RECORD+25(6),=CL6'NOOPT'
         MVC   RECORD+32(6),=CL6'TEST'
         TM    C1_STATUS_BYTE_02,X'10'
         JO    *+10
         MVC   RECORD+32(6),=CL6'NOTEST'
         MVC   RECORD+39(6),=CL6'RES'
         TM    C1_STATUS_BYTE_03,X'80'
         JO    *+10
         MVC   RECORD+39(6),=CL6'NORES'
         MVC   RECORD+46(8),=CL8'ENDJOB'
         TM    C1_STATUS_BYTE_03,X'40'
         JO    *+10
         MVC   RECORD+46(8),=CL8'NOENDJOB'
         MVC   RECORD+55(8),=CL8'OBJ370'
         TM    C1_STATUS_BYTE_03,X'20'
         JO    *+10
         MVC   RECORD+55(8),=CL8'NOOBJ370'
         MVC   RECORD+64(8),=CL8'COUNT'
         TM    C1_STATUS_BYTE_03,X'08'
         JO    *+10
         MVC   RECORD+64(8),=CL8'NOCOUNT'
         BRAS  R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(11),=CL11'READY_TRACE'                   RS0116
         TM    C1_STATUS_BYTE_03,X'04'
         JO    *+10
         MVC   RECORD+1(11),=CL11'NO_TRACE'                      RS0116
         BRAS  R14,SPACE2
         CLI   csect_analyze_kz,C'M'  first csect (main-ep)      RS1107
         jne   INFO_COBOL_OPT         yes, skip csect-info       RS1107
         BRAS  R14,BINDER_INFO                                   RS1107
INFO_COBOL_OPT DS 0H                                             RS1107
         BRAS  R14,CEEUOPT_INFO                                  RS1107
         J     CICS                                              RS1107
INFO_COBOL_END DS 0H                                             RS1107
         STRING64 '- - - - - - - - - - - - - - - - - - - - - - - ',    X
               '- - - - - - - - - - - - - - - - - - - - - - - - - - -',X
               ' -',                                                   X
               INTO=RECORD                                       RS1107
         BRAS  R14,SPACE2                                        RS1107
         STRING64 'Sorry no more infomation for OS/VS COBOL',          X
               INTO=RECORD
         BRAS  R14,SPACE2                                         *CSC*
         STRING64 'This should be considered a significant ',     *CSC*X
               'business risk.',INTO=RECORD                       *CSC*
         BRAS  R14,SPACE1                                         *CSC*
         STRING64 'Please SERIOUSLY consider ',                   *CSC*X
               'upgrading this program to Enterprise COBOL V3',   *CSC*X
               INTO=RECORD
         BRAS  R14,SPACE1
         STRING64 '------------ End  --------------------------------',X
               '---------------------------------------------------',  X
               INTO=RECORD
         BRAS  R14,SPACE2
*>---------------------------------------------------------------HP1107
*>   any more csect's ? -> return to csect-loop                  HP1107
*>---------------------------------------------------------------HP1107
         CLI   csect_analyze_kz,C'S'  any more csects ?          HP1107
         je    COBANAL_Csect_Loop                                HP1107
*>---------------------------------------------------------------HP1107
         MVC   PGMNAME_GET,PGMNAME_SAV                           PF0608
         MVI   PRINT_LEAD_SPACE,C'N' Insert no space             PF0608
         LA    R15,0
         J     COBANAL_EXIT
         DROP  R4,R5
*------------------------------------------------------------*
* Print                                                      *
*------------------------------------------------------------*
BLANK1   DS 0H                                                   RS1107
         ST    R14,SAVER14                                       RS1107
         LA    R1,SYSPRINT         GET OUTPUT DCB ADDRESS        RS1107
         LA    R0,BLANKS           GET OBJECT NAME ADDRESS       RS1107
         PUT   (1),(0)             WRITE NAME TO NOTIFY DATA SET RS1107
         L     R14,SAVER14                                       RS1107
         BR    R14            return                             RS1107
SPACE2   DS 0H
         ST    R14,SAVER14
         LA    R1,SYSPRINT         GET OUTPUT DCB ADDRESS
         LA    R0,RECORD           GET OBJECT NAME ADDRESS
         CLI   PRINT_LEAD_SPACE,C'Y' Insert space                HP1107
         JNE   SPACE2_01
         AHI   R0,-4
SPACE2_01 DS 0H
         PUT   (1),(0)             WRITE NAME TO NOTIFY DATA SET
         LA    R1,SYSPRINT         GET OUTPUT DCB ADDRESS
         LA    R0,BLANKS           GET OBJECT NAME ADDRESS
         PUT   (1),(0)             WRITE NAME TO NOTIFY DATA SET
         L     R14,SAVER14
         BR    R14            return
SPACE1   DS 0H
         ST    R14,SAVER14
         LA    R1,SYSPRINT         GET OUTPUT DCB ADDRESS
         LA    R0,RECORD           GET OBJECT NAME ADDRESS
         CLI   PRINT_LEAD_SPACE,C'Y'  Insert space               HP1107
         JNE   SPACE1_01
         AHI   R0,-4
SPACE1_01 DS 0H
         PUT   (1),(0)             WRITE NAME TO NOTIFY DATA SET
         L     R14,SAVER14
         BR    R14            return
*------------------------------------------------------------*    *CSC*
* Print SUMMARY                                              *    *CSC*
*------------------------------------------------------------*    *CSC*
SUMMARY2 DS 0H                                                    *CSC*
         CLI   SUMMARYR,C'N'       Is SUMMARY DD Allocated?       *CSC*
         BER   R14                 No, No point in writing!       *CSC*
         ST    R14,SAVER14                                        *CSC*
         LA    R1,SUMMARY          GET OUTPUT DCB ADDRESS         *CSC*
         LA    R0,RECORD           GET OBJECT NAME ADDRESS        *CSC*
         PUT   (1),(0)             WRITE NAME TO NOTIFY DATA SET  *CSC*
         LA    R1,SUMMARY          GET OUTPUT DCB ADDRESS         *CSC*
         LA    R0,BLANKS           GET OBJECT NAME ADDRESS        *CSC*
         PUT   (1),(0)             WRITE NAME TO NOTIFY DATA SET  *CSC*
         L     R14,SAVER14                                        *CSC*
         BR    R14            return                              *CSC*
SUMMARY1 DS 0H                                                    *CSC*
         CLI   SUMMARYR,C'N'       Is SUMMARY DD Allocated?       *CSC*
         BER   R14                 No, No point in writing!       *CSC*
         ST    R14,SAVER14                                        *CSC*
         LA    R1,SUMMARY          GET OUTPUT DCB ADDRESS         *CSC*
         LA    R0,RECORD           GET OBJECT NAME ADDRESS        *CSC*
         PUT   (1),(0)             WRITE NAME TO NOTIFY DATA SET  *CSC*
         L     R14,SAVER14                                        *CSC*
         BR    R14            return                              *CSC*
JUSTDATA_PUT EQU *                                                =CMS=
         CLI   JUSTDATA_R,C'N'     Is JUSTDATA DD Allocated?      =CMS=
         BER   R14                 No, No point in writing|       =CMS=
         MVC   JUSTDATA_DSN,CSCDSN                                =CMS=
         ST    R14,SAVER14                                        =CMS=
         LA    R1,JUSTDATA         GET OUTPUT DCB ADDRESS         =CMS=
         LA    R0,JUSTDATA_        GET OBJECT NAME ADDRESS        =CMS=
         PUT   (1),(0)             WRITE NAME TO NOTIFY DATA SET  =CMS=
         L     R14,SAVER14                                        =CMS=
         BR    R14            return                              =CMS=
***************************************************************
*
*                  get Member Name from PDS-Directory
*
***************************************************************
GETMEM   DS    0H                                                PF0608
         ST    R14,GETMSAVE            save return address
         L     R4,ADBLKPTR             restore pointer
         CLC   DIRAREA(2),=XL2'0000'   Directory present?
         JNE   NEWNAME                   yes, get next
NEWBLOCK DS    0H                                                PF0608
         GET   INPUT,DIRAREA           get a new directory
         LA    R4,DIRAREA              get work area address
         AH    R4,DIRAREA              + length
         ST    R4,ADBLKEND             save ending address
         LA    R4,DIRAREA+2            Skip LL bytes
         ST    R4,ADBLKPTR             save pointer
NEWNAME  DS    0H                                                PF0608
         C     R4,ADBLKEND             end of current dir block
         JNL   NEWBLOCK                  yes, get new block
         MVC   PGMNAME_GET,0(R4)       Save member-name
         IC    R5,11(R4)               LOOK FOR ANY USER TTRN'S
         SLL   R5,27                   SHIFT OFF UNWANTED BITS
         SRL   R5,26                   SHIFT BACK THE USABLE BITS
         LA    R4,12(R4,R5)            ADD DISPL TO GET OVER TT
         ST    R4,ADBLKPTR             save Pointer next mem
         L     R14,GETMSAVE            restore return address
         BR    R14                     goback
*---------------------------------------------------------------------*
*        move status flags                                            *
*---------------------------------------------------------------------*
$$STATUS LA    R15,0                   do not change CC          RS1007
         IC    R15,0(,R14)             get length                RS1007
         JZ    $$STATUS8               flag off, goback          RS1007
         EX    R15,MOVE_$STATUS        move status flags         PF0708
*        EX    R15,=S(X'200'(R13),0(R3),1(R14)) MVC 0(*-*,R3),1(R14)007
         LA    R3,2(R15,R3)            bump pointer up           RS1007
$$STATUS8 LA   R14,2(R15,R14)          return address            RS1007
         CLI   0(R14),0                alignment byte?           RS1007
         BNER  R14                     no, goback                RS1007
         B     1(,R14)                 yes, skip it              RS1007
COBANAL_END    DS  0D
*>---------------------------------------------------------------HP1107
*>   additional csect-analysis for sub-module                    HP1107
*>---------------------------------------------------------------HP1107
COBANAL_Csect_Loop DS 0H                                         HP1107
         lh    R3,csect_anz_tabelem                              HP1107
         ch    r3,=h'0'             any more csects ?            HP1107
         Je    COBANAL_EXIT         no, leave                    HP1107
*>avoid s0c4 within program-objects                              HP1107
*>unknown, how to see, what's the associated CSV_OUTXTLST_ELPx   HP1107
         CLC   CSV_OUTXTLST_ENTRR,=F'1' only one extent ??       HP1107
         JNH   COBANAL_Csect_Check0A                             HP1107
*>just for test |                                                HP1107
*        CLC   CSV_OUTXTLST_ENTRR,=F'2' p.o. with 2 extends ?    RS0108
*        JNE   COBANAL_Csect_Check0B                             RS0108
*        mvc   CSV_LOADPT,CSV_OUTXTLST_ELP2                      RS0108
*        J     COBANAL_Csect_Check0A                             HP1107
COBANAL_Csect_Check0B   DS 0H                                    HP1107
         STRING64 'This module was loaded into more then one extent,', X
               ' sub-module analysis aborted',                   PF0608X
               INTO=RECORD                                       PF0608
         BRAS  R14,SPACE1                                        HP1107
         J     COBANAL_EXIT         do some more research ?|     HP1107
COBANAL_Csect_Check0A   DS 0H                                    HP1107
         BCTR  R3,0                                              HP1107
         sth   R3,csect_anz_tabelem                              HP1107
         ch    r3,=h'0'             last csect        ?          HP1107
         Jne   COBANAL_Csect_Check0                              HP1107
         MVI   csect_analyze_kz,C'L'                             HP1107
COBANAL_Csect_Check0    DS 0H                                    HP1107
         l     R3,csect_tabelem_act csect-elem                   HP1107
         la    R4,10(r3)                                         HP1107
         st    R4,csect_tabelem_act next-entry                   HP1107
         l     R4,2(r3)             csect-offset                 HP1107
         xr    r1,r1                                             HP1107
         l     r1,CSV_LOADPT        load-point  lmod             HP1107
         ar    r4,r1                csect-postion in lmod        HP1107
         st    r4,csect_anf         csect-postion in lmod        HP1107
         mvc   hadr,ADR_PGMNAME     ep                           HP1107
         xi    hadr,x'80'                                        HP1107
         l     r1,hadr              ep                           HP1107
         cr    r4,r1                                             HP1107
         je    COBANAL_Csect_Loop   main-csect  |                HP1107
COBANAL_Csect_Check4    DS 0H                                    RS0316
         clc   0(2,R3),=C'C5'       Enterprise Cobol V5          RS0316
         jne   COBANAL_Csect_Check3                              RS0316
         J     ENTCOBOLV5                                        RS0316
COBANAL_Csect_Check3    DS 0H                                    HP1107
         clc   0(2,R3),=C'C1'       cobol/370 ff                 HP1107
         jne   COBANAL_Csect_Check2                              HP1107
         J     COBOL_370                                         HP1107
COBANAL_Csect_Check2    DS 0H                                    HP1107
         clc   0(2,R3),=C'C2'       cobol2                       HP1107
         jne   COBANAL_Csect_Check1                              HP1107
         J     COBOL_2                                           HP1107
COBANAL_Csect_Check1    DS 0H                                    HP1107
         clc   0(2,R3),=C'C3'       osvs                         HP1107
         jne   COBANAL_Csect_Loop   no cobol-csect               HP1107
         J     COBOL_1                                           HP1107
*        l     R3,saveR3                                         HP1107
*>---------------------------------------------------------------HP1107
*
*------------------------------------------------------------*
* SONSTIGE DEFINITIONS                                       *
*------------------------------------------------------------*
****************************** CONSTANTS *****************************
*
*------------------------------------------------------------*
* Workarea below the line                                    *
*------------------------------------------------------------*
COBANAL_WORK        DSECT
EYECATCHER          DS    CL8   'COBANAL'
*>---------------------------------------------------------------HP1107
CSECT_ANF           DS    F                                      HP1107
SAVER3              DS    F                                      HP1107
HADR                DS    F                                      HP1107
PGMNAME_SAV         DS    CL8                                    HP1107
CSECT_ANALYZE_KZ    DS    CL1                                    HP1107
CSECT_ACT_KZ        DS    CL2                                    HP1107
CSECT_TABELEM_ACT   DS    F                                      HP1107
CSECT_ANZ_TABELEM   DS    H                                      HP1107
CSECT_TABLE         DS    50CL10                                 HP1107
*>---------------------------------------------------------------HP1107
PGMNAME             DS    CL8   Pgmname from the parmlist
PGMNAME_GET         DS    CL8   Pgmname from GETMEM
PGMNAME_PDS2FTB2    DS    CL2   PDS2FTB2 from GETMEM             RS0316
SAVEAREA            DS    36F   SaveArea for AMODE64 (144 Bytes)
SAVER1              DS    F                                       *CSC*
SAVER4              DS    F                                       *CSC*
SAVER5              DS    F
SAVER4_AND_R5       DS    F,F                                    RS1007
SNAPREGS DS    A(14,15,0,1,2,3,14,15)                            RS1007
SAVER14             DS    F
SAVER15             DS    F                                       *CSC*
IRETCODE            DS    F
RETCODE             DS    F
RSNCODE             DS    F
ADR_COBANAL_WORK    DS    F     Save Workarea pointer
ADR_COBANAL_PARM    DS    F     Save Parmlist pointer
ADR_PGMNAME         DS    F     Save entry-point Application PGM
ADR_PIDENTRY        DS    F     Save A(PIDTABLE) entry found     PF0608
OFF_PGMNAME         DS    F     Save entry-point offset          PF0608
CNT_R14SAVE         DS    F     Save for R14 in ADJUST_COUNTS    PF0608
RC_PGMNAME          DS    F     Save application RC
PARM_LENGTH         DS    H     Parm length wihout header
                    DS    H     FILLER                           PF0608
GETMSAVE            DS    F     Save R14 for GETM
BINDSAVE            DS    F Save R14 for Binder-Info
ADBLKPTR            DS    F     Parm length without header
ADBLKEND            DS    F     Parm+length without header
DOALL               DS    CL1   Analyze a complete loadlib
DD_COBANAL          DS    CL1   Switch for DD CobAnal
DD_SYSIN            DS    CL1   Switch for DD SYSIN              RS1207
LOADERR             DS    CL1   Switch for LOAD errors           PF0608
FIXEDSUM            DS    CL1   Remember fixed LANG in SUMMARY   PF0608
SETRMODE            DS    CL1   Remember already set RMODE       RS0316
                    DS    CL2   FILLER                           PF0608
DOUBLE              DS    D
CSV_OUTVALID        DS    F     Length returned by CSVQuery
CSV_OUTPID          DS    CL4   PID   returned by CSVQuery       PF0608
CSV_OUTEPA64        DS    D     EPA64 returned by CSVQuery
CSV_LENGTH          DS    F     Length returned by CSVQuery
CSV_LOADPT          DS    F     Loadptr returned by CSVQuery
CSV_EPTOKEN         DS    CL8   TOKEN returned by CSVQuery
CSV_OUTXTLST        DS    0C
CSV_OUTXTLST_ENTR   DS    F     Number of entries (reserved room)
CSV_OUTXTLST_ENTRR  DS    F     Number of entries returned
CSV_OUTXTLST_ELP1   DS    F     Extent-1 load point
CSV_OUTXTLST_EL1    DS    F     Extent-1 Length
CSV_OUTXTLST_ELP2   DS    F     Extent-2 load point
CSV_OUTXTLST_EL2    DS    F     Extent-2 Length
CSV_OUTXTLST_ELP3   DS    F     Extent-3 load point
CSV_OUTXTLST_EL3    DS    F     Extent-3 Length
CSV_OUTXTLST_ELP4   DS    F     Extent-4 load point
CSV_OUTXTLST_EL4    DS    F     Extent-4 Length
CSV_OUTXTLST_ELP5   DS    F     Extent-5 load point
CSV_OUTXTLST_EL5    DS    F     Extent-5 Length
CSV_OUTXTLST_ELP6   DS    F     Extent-6 load point
CSV_OUTXTLST_EL6    DS    F     Extent-6 Length
CSV_OUTXTLST_ELP7   DS    F     Extent-7 load point
CSV_OUTXTLST_EL7    DS    F     Extent-7 Length
CSV_OUTXTLST_ELP8   DS    F     Extent-8 load point
CSV_OUTXTLST_EL8    DS    F     Extent-8 Length
CSV_OUTXTLST_FILLER DS    CL64
CSV_OUTATTR1        DS    C
CSV_OUTATTR2        DS    C
CSV_OUTATTR3        DS    C
                    DS    C     FILLER                           PF0608
IEW_BNLI_PTR        DS    F     Ptr of IEWBUFF area
IEW_IDLI_PTR        DS    F     Ptr of IEWBUFF area              RS1007
IEW_ESDI_PTR        DS    F     Ptr of IEWBUFF area              RS1007
IEW_IDUI_PTR        DS    F     Ptr of IEWBUFF area              RS1007
IEW_IDZI_PTR        DS    F     Ptr of IEWBUFF area              RS1007
IEW_IDBI_PTR        DS    F     Ptr of IEWBUFF area              RS1007
IEW_DTOKEN          DS    CL8   Dialog Token for IEWBIND
IEW_WKTOKEN         DS    CL8   Workmod Token for IEWBIND
IEW_CURSORN         DS    F     Cursor for GETN
IEW_CURSORD         DS    F     Cursor for GETD
IEW_COUNTN          DS    F     Count for GETN
IEW_COUNTD          DS    F     Count for GETD
IEW_TCOUNT          DS    F     Total number of Sections
IEW_MBR             DS    0H    Label for MEMBER=   for INCLUDE  PF0608
IEW_MBRL            DS    H     Length of IEW_MBRN  for INCLUDE  PF0608
IEW_MBRN            DS    CL8   Copy of PGMNAME_GET for INCLUDE  PF0608
IEWBIND_FUNCTION    DS    CL8   IEWBIND Funtion for error        RS1007
PRINT_LEAD_SPACE    DS    C     Insert space for sub-modules     RS1107
SUM_DATE_SAVE       DS    CL7   Copy of IDL_DATE_PROCESSED       PF0608
         CSVQUERY MF=(L,CSVQRYWK)
         ASAXWC    MF=(L,MYLIST)
         IEWBIND2 PLISTVER=MAX,MF=(L,IEWBIND)
****************************** VARIABLES *****************************
LE_SWITCH           DS    CL1   Switch for COBOL/370 or COBOL/2
LE_PGM_NAME         DS CL8  name of program
LE_COMP_YEAR        DS CL4  year of compilation
*  3 bytes because of OS/VS COBOL
LE_COMP_MONTH       DS CL3  month of compilation
LE_COMP_DAY         DS CL2  day of compilation
LE_COMP_HOURS       DS CL2  hours of compilation
LE_COMP_MIN         DS CL2  minutes of compilation
LE_COMP_SEC         DS CL2  seconds of compilation
LE_VERS             DS CL2  version
LE_REL              DS CL2  release
LE_MOD              DS CL2  modification level
LE_CCSID            DS XL2  Codepage
LE_TGT_ADDRESS      DS A    TGT-Address (NORENT) or DAB (RENT)   RS1007
LE_TGT_REG          DS X    80 = R13 40 ? R9                     RS1007
                    DS CL3  Boundary                             RS1007
LE_DAB_FIB_OFF      DS F    IDBA FIB Offset                      RS1007
LE_TGT_FIB_PTR      DS F    FIB Pointer (RENT)                   RS1007
LE_TGT_PTR_FCB_CELL DS F    FCB Pointer                          RS1007
LE_TGT_NO_FCB       DS F    No of FCBs                           RS1007
LE_TGT_WS_LENGTH    DS F    Length of working storage            RS1007
LE_STATUS_BYTE      DS    0C   signature bytes
LE_STATUS_BYTE_01   DS X    status byte
LE_STATUS_BYTE_02   DS X    status byte
LE_STATUS_BYTE_03   DS X    status byte
LE_STATUS_BYTE_04   DS X    status byte
LE_STATUS_BYTE_05   DS X    status byte
LE_STATUS_BYTE_06   DS X    status byte
LE_STATUS_BYTE_07   DS X    status byte
LE_STATUS_BYTE_08   DS X    status byte
LE_STATUS_BYTE_09   DS X    status byte
LE_STATUS_BYTE_10   DS X    status byte
LE_STATUS_BYTE_11   DS X    status byte
LE_STATUS_BYTE_12   DS X    status byte
LE_STATUS_BYTE_13   DS X    status byte
LE_STATUS_BYTE_14   DS X    status byte
LE_STATUS_BYTE_15   DS X    status byte
LE_STATUS_BYTE_16   DS X    status byte
LE_STATUS_BYTE_17   DS X    status byte
LE_STATUS_BYTE_18   DS X    status byte
LE_STATUS_BYTE_19   DS X    status byte
LE_STATUS_BYTE_20   DS X    status byte
LE_STATUS_BYTE_21   DS X    status byte
LE_STATUS_BYTE_22   DS X    status byte
LE_STATUS_BYTE_23   DS X    status byte
LE_STATUS_BYTE_24   DS X    status byte
LE_STATUS_BYTE_25   DS X    status byte
LE_STATUS_BYTE_26   DS X    status byte Cobol for MVS and VM
LE_STATUS_BYTE_27   DS X    status byte Cobol for MVS and VM
LE_STATUS_BYTE_28   DS X    status byte Cobol V3R1
LE_STATUS_BYTE_29   DS X    status byte Cobol V3R1
LE_STATUS_BYTE_30   DS X    status byte E.C. V5
LE_STATUS_BYTE_31   DS X    status byte E.C. V5
LE_COBOL_SIGNAT     DS X    cobol signature level
LE_DATA_STATEMENTS  DS XL4  number of data items
LE_PROC_LINES       DS XL4  number of proc statements
LE_YEAR_WINDOW      DS H    YearWindow
LE_ARCHLEVEL        DS X    Architecure level
LE_OPT_LEVEL        DS X    Optimization evel
LE_BUILD_LEVEL      DS CL7  Build Level                          RS0316
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
               RECFM=FB,LRECL=121
SUMMARY  DCB   DSORG=PS,MACRF=PM,DDNAME=SUMMARY,                  *CSC*X
               RECFM=FB,LRECL=121                                 *CSC*
JUSTDATA DCB   DSORG=PS,MACRF=PM,DDNAME=JUSTDATA,                 =CMS=X
               RECFM=FB,LRECL=#JUSTDATA_                          =CMS=
INPUT    DCB   DSORG=PS,DDNAME=COBANAL,MACRF=(GM),                     X
               RECFM=U,BLKSIZE=256
LOADL    DCB   DSORG=PO,DDNAME=COBANAL,MACRF=(R),                PF0608X
               RECFM=U,DCBE=*-*                                  PF0608
LOADLE   DCBE RMODE31=BUFF                                       RS0516
SYSIN    DCB   DSORG=PS,DDNAME=SYSIN,MACRF=(GM),                 RS1207X
               RECFM=FB,LRECL=80,DCBE=SYSINE                     RS0908
SYSINE   DCBE RMODE31=BUFF,EODAD=COBANAL_FIN                     RS0908
JUSTDATA_R          DS CL1                                        =CMS=
JUSTDATA_           DS 0C                                         =CMS=
JUSTDATA_DSN        DS CL44                                       =CMS=
JUSTDATA_MEM        DS CL8                                        =CMS=
JUSTDATA_PGM        DS CL8                                        =CMS=
JUSTDATA_LANG       DS CL8                                        =CMS=
JUSTDATA_COMPILER   DS CL8                                        =CMS=
JUSTDATA_VV         DS CL2                                        =CMS=
JUSTDATA_RR         DS CL2                                        =CMS=
JUSTDATA_MM         DS CL2                                        =CMS=
JUSTDATA_LE_CYEAR   DS CL4  year of compilation                   =CMS=
JUSTDATA_LE_CMONTH  DS CL2  month of compilation                  =CMS=
JUSTDATA_LE_CDAY    DS CL2  day of compilation                    =CMS=
JUSTDATA_LE_CHOURS  DS CL2  hours of compilation                  =CMS=
JUSTDATA_LE_CMIN    DS CL2  minutes of compilation                =CMS=
JUSTDATA_LE_CSEC    DS CL2  seconds of compilation                =CMS=
#JUSTDATA_          EQU *-JUSTDATA_                               =CMS=
DIRAREA             DS    XL256          PDS-Directory input area
SYSIN_DATA          DS CL80                                      RS1207
PARMLIST            DS XL40
JUST_SPACE          DS CL4               Please leave it here
RECORD              DS CL132
*                                                                 *CSC*
* CSC WORKAREA                                                    *CSC*
LEFOUND             DS    CL1            LE/370 module located?   *CSC*
SUMMARYR            DS    CL1            Perform CSC Summary Func *CSC*
*                                                                 *CSC*
CSCDSN              DS   CL44            Dataset Name             *CSC*
*                                                                 *CSC*
CSCSUMM             DS   0CL122                                   *CSC*
CSCPNAM             DS    CL9            Program Name             *CSC*
                    DS    CL1            Filler                   *CSC*
CSCLANG             DS    CL9            Program Language         *CSC*
                    DS    CL1            Filler                   *CSC*
CSCCICS             DS    CL4            CICS EI Stub level       *CSC*
                    DS    CL1            Filler                   *CSC*
CSCCOBOL            DS    CL6            CICS EI Stub level       *CSC*
                    DS    CL1            Filler                   *CSC*
CSCCOMP             DS    CL17           Compiler Details         *CSC*
                    DS    CL1            Filler                   *CSC*
CSCLE               DS    CL3            LE370? YES/NO            *CSC*
                    DS    CL2            Filler                   *CSC*
CSCD31              DS    CL2            DATA(31)? YES/NO         *CSC*
                    DS    CL2            Filler                   *CSC*
CSCRMODE            DS    CL3            RMODE - Compiler         *CSC*
                    DS    CL1            Filler                   *CSC*
CSCCRNT             DS    CL3            Compiled RENT? YES/NO    *CSC*
                    DS    CL2            Filler                   *CSC*
CSCRM               DS    CL3            RMODE - LINK            RS0316
                    DS    CL1            Filler                  RS0316
CSCAM               DS    CL3            AMODE - LINK             *CSC*
                    DS    CL1            Filler                   *CSC*
CSCLPRM             DS    CL25           Link Parameters          *CSC*
                    DS    CL1            Filler                   *CSC*
CSCDATE             DS    CL11           Comp Date yy.ddd         *CSC*
                    DS    CL13           Filler                   *CSC*
*                                                                 *CSC*
CNT_ASSEMBLER       DS    PL3            Count of ASSEMBLER Progs *CSC*
CNT_BMS             DS    PL3            Count of BMS Maps        *CSC*
CNT_COBOLI          DS    PL3            Count of COBOL1    Progs *CSC*
CNT_COBOL2          DS    PL3            Count of VS/COBOL2 Progs *CSC*
CNT_COBOLLE         DS    PL3            Count of LE COBOL  Progs *CSC*
CNT_C370            DS    PL3            Count of C/C++     Progs *CSC*
CNT_FORTRAN         DS    PL3            Count of FORTRAN   Progs *CSC*
CNT_INVALID         DS    PL3            Count of Invalid   Progs *CSC*
CNT_NOTLOAD         DS    PL3            Count of NotLoaded ProgsPF0608
CNT_EZTRV           DS    PL3            Count of EZTrieve+ ProgsPF0708
CNT_LEASS           DS    PL3            Count of LE Assem  Progs *CSC*
CNT_OTHER           DS    PL3            Count of Other     Progs *CSC*
CNT_PLI             DS    PL3            Count of PL/I      Progs *CSC*
CNT_TOTAL           DS    PL3            Count of Total     Progs *CSC*
CNT_UNKNOWN         DS    PL3            Count of UNKNOWN   Progs *CSC*
TOT_ASSEMBLER       DS    CL5            Total of ASSEMBLER Progs *CSC*
TOT_BMS             DS    CL5            Total of BMS Maps        *CSC*
TOT_COBOLI          DS    CL5            Total of COBOL1    Progs *CSC*
TOT_COBOL2          DS    CL5            Total of VS/COBOL2 Progs *CSC*
TOT_COBOLLE         DS    CL5            Total of LE COBOL  Progs *CSC*
TOT_C370            DS    CL5            Total of C/C++     ProgsRS1107
TOT_FORTRAN         DS    CL5            Total of FORTRAN   Progs *CSC*
TOT_INVALID         DS    CL5            Total of Invalid   Progs *CSC*
TOT_NOTLOAD         DS    CL5            Total of Notloaded ProgsPF0608
TOT_EZTRV           DS    CL5            Total of EZTrieve+ ProgsPF0708
TOT_LEASS           DS    CL5            Total of LE Assem  Progs *CSC*
TOT_OTHER           DS    CL5            Total of Other     Progs *CSC*
TOT_PLI             DS    CL5            Total of PL/I      Progs *CSC*
TOT_TOTAL           DS    CL5            Total of all programs    *CSC*
TOT_UNKNOWN         DS    CL5            Total of UNKNOWN   Progs *CSC*
WORK                DS    D              General WORK AREA        *CSC*
ESDNAME             DS    D              ESD entry nams          PF0608
PLINAME_AREA        DS    0D             PL/I internal name area PF0708
PLINAME             DS    CL7            PL/I name w/leading '*' PF0708
PLINAME_LEN         DS    X              PL/I internal name len  PF0708
SAVE_CUR_FCB_CELL   DS    F              Save current FCB-CELL RS1107
*                                                                 *CSC*
*                                                                 *CSC*
SWAWORK             DS    10F            WORK AREA                *CSC*
SWAREQL1 SWAREQ MF=L                     WORK AREA FOR SWAREQ     *CSC*
LOADWK   LOAD  EPLOC=,DCB=,                                      RS0908X
               LSEARCH=,SF=L                                     RS0908
BLDLLIST            DS    0CL100                                 RS0516
BLDL_FF             DS    H             No of entries            RS0516
BLDL_LL             DS    H             Length of entry          RS0516
BLDL_NAME           DS    CL8           Name                     RS0516
DIRTTRP             DS    CL3           TTR                      RS0516
BLDL_CNCT DS    FL1            CONCATENATION NUMBER OF THE DATA SET
BLDL_LIBF DS    C              LIBRARY FLAG FIELD
BLDLLNRM EQU   X'00'          NORMAL CASE
BLDLLLNK EQU   X'01'          IF DCB OPERAND IN BLDL MACRO INTRUCTION
*                             WAS SPECIFIED AS ZERO, NAME WAS FOUND IN
*                             LINK LIBRARY
BLDLLJOB EQU   X'02'          IF DCB OPERAND IN BLDL MACRO INTRUCTION
*                             WAS SPECIFIED AS ZERO, NAME WAS FOUND IN
*                             JOB LIBRARY
DIRFLAG  DS    X
DIRALIAS EQU   X'80'          MEMBER IS AN ALIAS
DIR2TTR  EQU   X'40'          TWO TTR'S TO UPDATE
DIR1TTR  EQU   X'20'          ONE TTR TO UPDATE
DIRUSER  DS    XL62
         ORG   DIRUSER  FOLLOWING FOR LOAD MODULES
DIRSTART DS    XL4            TTR OF FIRST TEXT BLOCK
DIRNOTE  DS    XL3            TTR OF NOTELIST
DIRNOTE# DS    X              NUMBER OF NOTELIST ENTRIES
DIRATTR  DS    XL2            MEMBER ATTRIBUTES
DIRSTORE DS    XL3            SIZE OF LOAD MODULE
DIRTEXTL DS    XL2            LENGTH OF 1ST TEXT RECORD
DIREPA   DS    XL3            ENTRY POINT ADDRESS
DIRATTR2 DS    X          ADDITIONAL ATTRIBUTE BYTES:
DIRAOSLE EQU   X'80'          VS LINKAGE EDITOR CREATED THIS MODULE
DIR2BIG  EQU   X'40'          REQUIRES 16M OR MORE OF VIRTUAL STORAGE
DIR2PAGA EQU   X'20'          PAGE ALIGNMENT REQUIRED FOR THIS MODULE
DIR2SSI  EQU   X'10'          SSI INFORMATION IS PRESENT FOR MODULE
DIRAPFLG EQU   X'08'          APF INFORMATION FOR THIS MODULE IS VALID
DIR2LFMT EQU   X'04'          MODULE IS IN PROGRAM OBJECT FORMAT
DIRATTR3 DS    X          ADDITIONAL ATTRIBUTE BYTES:
DIRRMANY EQU   X'10'          RMODE=ANY
DIRAA31  EQU   X'08'          AMODE=31 (ALIAS ENTRY)
DIRAA64  EQU   X'04'          AMODE=64 (ALIAS ENTRY)          DRK OCT02
DIRAA24  EQU   X'00'          AMODE=24 (ALIAS ENTRY)          DRK OCT02
DIRAM31  EQU   X'02'          AMODE=31 (MAIN ENTRY)
DIRAM64  EQU   X'01'          AMODE=64 (MAIN ENTRY)           DRK OCT02
DIRAM24  EQU   X'00'          AMODE=24 (MAIN ENTRY)           DRK OCT02
DIRATTR4 DS    X              COUNT OF RLD ENTRIES AFTER FIRST TEXT
DIRAPF   DS    0XL2           APF (IF NOT SCAT, SSI OR ALIAS)
DIREP    DS    XL3            ENTRY POINT (MAIN MEMBER)
DIRREAL  DS    CL8            REAL NAME OF MEMBER
DIRAPF2  DS    XL2            APF INFORMATION (ALIAS, NO SCAT OR SSI)
DIREND2  DS    0X             END OF ALIAS SECTION
IEW_SECTION         DS    0CL1049       Length (H), Name 1047    PF0608
IEW_SECTION_LEN     DS    H             Length (H)               PF0608
IEW_SECTION_DATA    DS    CL1047        Name 1047                PF0608
COBANAL_WORK_LENGTH EQU *-COBANAL_WORK  Length workarea
*
*------------------------------------------------------------*
* Parameter (JCL)                                            *
*------------------------------------------------------------*
COBANAL_PARM        DSECT
COBANAL_PARM_LENGTH DS H
*
*
*------------------------------------------------------------*
* Enterprise Cobol V5
*------------------------------------------------------------*
COBOLV5_DSECT       DSECT
CV5_Length          DS H
CV5_CCSID           DS XL2  Codepage (COBOL V3R1 only)
CV5_ARCHLEVEL       DS X    Architecure level
CV5_OPT_LEVEL       DS X    Optimization evel
CV5_STATUS_BYTE_28  DS X    status byte
CV5_STATUS_BYTE_29  DS X    status byte
CV5_STATUS_BYTE_30  DS X    status byte
CV5_STATUS_BYTE_31  DS X    status byte
CV5_STATUS_BYTE_01  DS X    status byte
CV5_STATUS_BYTE_02  DS X    status byte
CV5_STATUS_BYTE_03  DS X    status byte
CV5_STATUS_BYTE_04  DS X    status byte
CV5_STATUS_BYTE_05  DS X    status byte
CV5_STATUS_BYTE_06  DS X    status byte
CV5_STATUS_BYTE_07  DS X    status byte
CV5_STATUS_BYTE_08  DS X    status byte
CV5_STATUS_BYTE_09  DS X    status byte
CV5_STATUS_BYTE_10  DS X    status byte
CV5_STATUS_BYTE_11  DS X    status byte
CV5_STATUS_BYTE_12  DS X    status byte
CV5_STATUS_BYTE_13  DS X    status byte
CV5_STATUS_BYTE_14  DS X    status byte
CV5_STATUS_BYTE_15  DS X    status byte
CV5_STATUS_BYTE_16  DS X    status byte
CV5_STATUS_BYTE_17  DS X    status byte
CV5_STATUS_BYTE_18  DS X    status byte
CV5_STATUS_BYTE_19  DS X    status byte
CV5_STATUS_BYTE_20  DS X    status byte
CV5_STATUS_BYTE_21  DS X    status byte
CV5_STATUS_BYTE_22  DS X    status byte
CV5_STATUS_BYTE_23  DS X    status byte
CV5_COBOL_SIGNAT    DS X    cobol signature level
CV5_DATA_STATEMENTS DS XL4  number of data items
CV5_PROC_LINES      DS XL4  number of proc statements
CV5_STATUS_BYTE_24  DS X    status byte
CV5_STATUS_BYTE_25  DS X    status byte
CV5_STATUS_BYTE_26  DS X    status byte
CV5_STATUS_BYTE_27  DS X    status byte
CV5_BUILD_LEVEL     DS CL7  Build Level INFO                     RS0316
COBOLV5_COMP_INFO   DSECT
CV5_COMP_YEAR       DS CL4  year of compilation
CV5_COMP_MONTH      DS CL2  month of compilation
CV5_COMP_DAY        DS CL2  day of compilation
CV5_COMP_HOURS      DS CL2  hours of compilation
CV5_COMP_MIN        DS CL2  minutes of compilation
CV5_COMP_SEC        DS CL2  seconds of compilation
CV5_VERS            DS CL2  version
CV5_REL             DS CL2  release
CV5_MOD             DS CL2  modification level
*------------------------------------------------------------*
* COBOL/370 DCL
*------------------------------------------------------------*
COBOL_370_DSECT     DSECT
                    DS CL4  bypass
CEE_EYECATCHER      DS CL4  eyecatcher
CEE_STACK_FRAME     DS F    stack frame size
CEE_PPA1_OFFSET     DS F    offset to first ppa1
                    DS CL4  reserved
CEE_PPA1_START      DS 0C
CEE_OFFSET          DS X    offset to length of name from ppa1
CEE_SIGNATURE       DS X    CEL-Signature
CEE_FLAG1           DS X    CEL-FLAGS Bitmask
CEE_FLAG2           DS X    Member Flags for Cobol
CEE_ADDRESS_OF_PPA2 DS F    Address of PPA2
CEE_OFFSET_DBI      DS F    Offset BDI (None)
CEE_EP_DESCRIPTOR   DS F    Entry Point Descriptor
CEE_STACK_OVERFLOW  DS F    Offset for Stack overflow
                    DS F    available word
                    DS F    available word
                    DS F    available word
                    DS F    available word
CEE_PRIMARY_EP      DS 0C
CEE_PRI_EP_ADDRESS  DS A    primary entry-point address
CEE_PGT_ADDRESS     DS A    PGT-Address
CEE_TGT_ADDRESS     DS A    TGT-Address or DAB RENT/NORENT       RS1007
CEE_EP_NAME         DS A    Offset to entry_point_name
CEE_CURRENT_EP      DS A    current EP-Address
CEE_START           DS A    procedure code Address
CEE_INIT_PROG       DS A    Initialize Routine
CEE_PARM_LIST       DS A    Address of parm list for CEEINT
CEE_COMP_LEVEL      DS XL2  0010                                 RS1007
CEE_TGT_REG         DS X    80 = R13 40 ? R9                     RS1007
                    DS X                                         RS1007
                    DS H    available half-word
CEE_LENGTH_NAME     DS XL2  length of program_name
CEE_NAME_PART       DS 0C
CEE_PGM_NAME        DS CL8  name of program
CEE_COMP_YEAR       DS CL4  year of compilation
CEE_COMP_MONTH      DS CL2  month of compilation
CEE_COMP_DAY        DS CL2  day of compilation
CEE_COMP_HOURS      DS CL2  hours of compilation
CEE_COMP_MIN        DS CL2  minutes of compilation
CEE_COMP_SEC        DS CL2  seconds of compilation
CEE_VERS            DS CL2  version
CEE_REL             DS CL2  release
CEE_MOD             DS CL2  modification level
CEE_CCSID           DS XL2  Codepage (COBOL V3R1 only)
                    DS H    available halfword
CEE_STATUS_BYTE_28  DS X    status byte
CEE_STATUS_BYTE_29  DS X    status byte
CEE_YEAR_WINDOW     DS H    YearWindow
CEE_STATUS_BYTE_01  DS X    status byte
CEE_STATUS_BYTE_02  DS X    status byte
CEE_STATUS_BYTE_03  DS X    status byte
CEE_STATUS_BYTE_04  DS X    status byte
CEE_STATUS_BYTE_05  DS X    status byte
CEE_STATUS_BYTE_06  DS X    status byte
CEE_STATUS_BYTE_07  DS X    status byte
CEE_STATUS_BYTE_08  DS X    status byte
CEE_STATUS_BYTE_09  DS X    status byte
CEE_STATUS_BYTE_10  DS X    status byte
CEE_STATUS_BYTE_11  DS X    status byte
CEE_STATUS_BYTE_12  DS X    status byte
CEE_STATUS_BYTE_13  DS X    status byte
CEE_STATUS_BYTE_14  DS X    status byte
CEE_STATUS_BYTE_15  DS X    status byte
CEE_STATUS_BYTE_16  DS X    status byte
CEE_STATUS_BYTE_17  DS X    status byte
CEE_STATUS_BYTE_18  DS X    status byte
CEE_STATUS_BYTE_19  DS X    status byte
CEE_STATUS_BYTE_20  DS X    status byte
CEE_STATUS_BYTE_21  DS X    status byte
CEE_STATUS_BYTE_22  DS X    status byte
CEE_STATUS_BYTE_23  DS X    status byte
CEE_COBOL_SIGNAT    DS X    cobol signature level
CEE_DATA_STATEMENTS DS XL4  number of data items
CEE_PROC_LINES      DS XL4  number of proc statements
CEE_STATUS_BYTE_24  DS X    status byte
CEE_STATUS_BYTE_25  DS X    status byte
CEE_STATUS_BYTE_26  DS X    status byte
CEE_STATUS_BYTE_27  DS X    status byte
*------------------------------------------------------------*
* COBOL2 DCL
*------------------------------------------------------------*
COBOL_2_DSECT      DSECT
                   DS CL4  bypass
                   DS X
C2_PGM_NAME        DS CL8  name of program
C2_EYECATCHER      DS CL4  eyecatcher
C2_VERS            DS CL2  version
C2_REL             DS CL2  release
C2_MOD             DS CL2  modification level
C2_COMP_MONTH      DS CL2  month of compilation
                   DS CL1
C2_COMP_DAY        DS CL2  day of compilation
                   DS CL1
C2_COMP_YEAR       DS CL2  year of compilation
                   DS CL1
C2_COMP_HOURS      DS CL2  hours of compilation
                   DS CL1
C2_COMP_MIN        DS CL2  minutes of compilation
                   DS CL1
C2_COMP_SEC        DS CL2  seconds of compilation
C2_GET_ENTRY       DS A    Address of address
C2_STATUS_BYTE_01  DS X    status byte
C2_STATUS_BYTE_02  DS X    status byte
C2_STATUS_BYTE_03  DS X    status byte
C2_STATUS_BYTE_04  DS X    status byte
C2_STATUS_BYTE_05  DS X    status byte
C2_STATUS_BYTE_06  DS X    status byte
C2_STATUS_BYTE_07  DS X    status byte
C2_STATUS_BYTE_08  DS X    status byte
C2_STATUS_BYTE_09  DS X    status byte
C2_STATUS_BYTE_10  DS X    status byte
C2_STATUS_BYTE_11  DS X    status byte
C2_STATUS_BYTE_12  DS X    status byte
C2_STATUS_BYTE_13  DS X    status byte
C2_STATUS_BYTE_14  DS X    status byte
C2_STATUS_BYTE_15  DS X    status byte
C2_STATUS_BYTE_16  DS X    status byte
C2_STATUS_BYTE_17  DS X    status byte
C2_STATUS_BYTE_18  DS X    status byte
C2_STATUS_BYTE_19  DS X    status byte
C2_STATUS_BYTE_20  DS X    status byte
C2_STATUS_BYTE_21  DS X    status byte
C2_STATUS_BYTE_22  DS X    status byte
C2_STATUS_BYTE_23  DS X    status byte
                   DS X    cobol signature level
C2_DATA_STATEMENTS DS XL4  number of data items
C2_PROC_LINES      DS XL4  number of proc statements
C2_STATUS_BYTE_24  DS X    status byte
C2_STATUS_BYTE_25  DS X    status byte
                   DS XL2  status byte
                   DS CL4  status byte
C2_PRI_EP_ADDRESS  DS A    primary entry-point address
*
*------------------------------------------------------------*
* OS/VS COBOL
*------------------------------------------------------------*
COBOL_1_DSECT      DSECT
                   DS CL12 bypass
C1_PGM_NAME        DS CL8  name of program
C1_EYECATCHER      DS CL2  eyecatcher
C1_REL             DS CL2  release
                   DS CL36
C1_TGT_PTR         DS F    pointer to tgt
                   DS CL8  unknown                               RS0700
C1_OEM_MOD_AREA    DS CL60 Optimizer Info orgin COBOL low-values RS0700
                   DS CL4  unknown                               RS0700
C1_COMP_HOURS      DS CL2  hours of compilation
                   DS CL1
C1_COMP_MIN        DS CL2  minutes of compilation
                   DS CL1
C1_COMP_SEC        DS CL2  seconds of compilation
C1_COMP_MONTH      DS CL3  month of compilation
                   DS CL1
C1_COMP_DAY        DS CL2  day of compilation
                   DS CL2
C1_COMP_YEAR       DS CL4  year of compilation
COBOL_1_TGT        DSECT
                   DS CL72 ?
C1_STATUS_BYTE_01  DS X    status byte
C1_STATUS_BYTE_02  DS X    status byte
C1_STATUS_BYTE_03  DS X    status byte
                   DS CL369
C1_CHECK           DS CL8  check TGT for SYSOUT
*------------------------------------------------------------*   PF0708
* Compiled EZTRIEVE PLUS Main entry point (STINIT)               PF0708
*------------------------------------------------------------*   PF0708
EZTRIEVE_DSECT     DSECT ,                                       PF0708
                   DS CL44 bypass                                PF0708
EZ_EYECATCHER      DS CL8  eyecatcher EZTPA00                    PF0708
EZ_TABLE_OFFSET    DS F    Offset to start of table of offsets   PF0708
EZ_TBLEND_OFFSET   DS F    Offset to end of table (=CL4'OPTT')   PF0708
                   DS CL4  bypass                                PF0708
EZ_OFFSET_TABLE    DS 0CL8 Table of offsets                      PF0708
EZ_TBL_WORD1       DS F    If =F'0' bypass                       PF0708
EZ_TBL_WORD2       DS F    If =F'0' bypass                       PF0708
*------------------------------------------------------------*   PF0708
* Compiled EZTRIEVE PLUS JNLx entry point (JNLnnnnn)             PF0708
*------------------------------------------------------------*   PF0708
EZTRIEVE_JNL_DSECT DSECT ,                                       PF0708
EZ_JNL_START_CODE  DS CL3  =X'47F0F0'                            PF0708
                   DS CL1  =5+EZ_JNL_IDENT_LEN                   PF0708
EZ_JNL_IDENT_LEN   DS XL1  eyecatcher total length               PF0708
EZ_JNL_R4_R5       DS 0CL44 R4-R5 JNL area                       PF0708
EZ_JNL_R4_R5_EYECT DS 0CL17 eyecatcher 'E Z T  ' etc.            PF0708
EZ_JNL_R4_R5_CATCH DS CL7  eyecatcher 'E Z T  '                  PF0708
EZ_JNL_R4_R5_VERSN DS CL10 eyecatcher 'PLUS ' and version        PF0708
                   DS CL1  hyphen '-'                            PF0708
EZ_JNL_R4_R5_TMSTP DS 0CL23 R4-R5 timestamp+JSN level            PF0708
EZ_JNL_R4_R5_CDATE DS CL8  R4-R5 compile date                    PF0708
                   DS CL1  hyphen '-'                            PF0708
EZ_JNL_R4_R5_CTIME DS CL5  R4-R5 compile time                    PF0708
                   DS CL1  hyphen '-'                            PF0708
EZ_JNL_R4_R5_JSNID DS CL8  R4-R5 JSNnnnnn value                  PF0708
                   ORG EZ_JNL_R4_R5                              PF0708
EZ_JNL_R6          DS 0CL51 R6 JNL area                          PF0708
EZ_JNL_R6_EYECT    DS 0CL27 eyecatcher 'CA-EASYTRIEVE ' etc.     PF0708
EZ_JNL_R6_CATCH    DS CL14 eyecatcher 'CA-EASYTRIEVE '           PF0708
EZ_JNL_R6_VERSN    DS CL13 eyecatcher 'PLUS ' and version        PF0708
                   DS CL1  hyphen '-'                            PF0708
EZ_JNL_R6_TMSTP    DS 0CL23 R6 timestamp+JSN level               PF0708
EZ_JNL_R6_CDATE    DS CL8  R4-R5 compile date                    PF0708
                   DS CL1  hyphen '-'                            PF0708
EZ_JNL_R6_CTIME    DS CL5  R4-R5 compile time                    PF0708
                   DS CL1  hyphen '-'                            PF0708
EZ_JNL_R6_JSNID    DS CL8  R4-R5 JSNnnnnn value                  PF0708
*------------------------------------------------------------*   RS1007
* COBOL/370 DAB for RENT Cobol-Programs                          RS1007
*------------------------------------------------------------*   RS1007
COBOL_DAB_DSECT     DSECT                                        RS1007
CEE_DAB_ADR         DS F    ??                                   RS1007
                    DS CL4                                       RS1007
CEE_DAB_TGT         DS F    TGT - 6 Bytes |||                    RS1007
CEE_DAB_EYEC        DS CL4  CL'IDBA'                             RS1007
                    DS CL8                                       RS1007
CEE_DAB_FIB_OFF     DS CL3  Offset to FIB from Entry-Point       RS1007
*------------------------------------------------------------*   RS1007
* COBOL/370 TGT                                                  RS1007
*------------------------------------------------------------*   RS1007
COBOL_TGT_DSECT     DSECT                                        RS1007
                    DS CL72 Reserved 72 Bytes                    RS1007
CEE_TGT_IDENT       DS CL4  TGT identifier                       RS1007
                    DS CL4  Reserved 4 Bytes                     RS1007
CEE_TGT_LEVEL       DS X    TGT level indicator                  RS1007
                    DS CL3  Reserved 3 Bytes                     RS1007
CEE_TGT_32BIT_SWITCH DS F    32 bit switch                       RS1007
CEE_TGT_PTR_RUNCOM  DS F    Pointer to RUNCOM                    RS1007
CEE_TGT_PTR_COBVEC  DS F    Pointer to COBVEC                    RS1007
CEE_TGT_PTR_PDBT    DS F    Pointer to Program Dynamic Block TableS1007
CEE_TGT_NO_FCBS     DS F    Number of FCBs                       RS1007
CEE_TGT_WS_LENGTH   DS F    Working-Storage Length               RS1007
                    DS CL4  Reserved 4 Bytes                     RS1007
CEE_TGT_IGZEMSG_W   DS F    Address of IGZESMG Work Ares         RS1007
CEE_TGT_GETMAIN_B   DS F    Address of 1st Getmain Block (Space Mgr)007
                    DS CL6  Reserved 6 Bytes                     RS1007
CEE_TGT_MERG_FILE_NO DS H   Merge File Number                    RS1007
CEE_TGT_CEL_CAA     DS F    Address of CEL Common Anchor Area    RS1007
CEE_TGT_LENGTH      DS F    Length of TGT                        RS1007
                    DS CL1  Reserved 1 Byte                      RS1007
CEE_TGT_PGM_MASK    DS X    Program Mask used by this Program    RS1007
                    DS CL2  Reserved 2 Bytes                     RS1007
CEE_TGT_NO_SEC_FCBS  DS F    Number of secondary FCB Cells       RS1007
                    DS CL128 ?? (see compile output)             RS1007
CEE_TGT_PTR_FCB_CELL DS F   Pointer to first FCB Cell (NORENT)   RS1007
CEE_TGT_WS_PTR      DS F    Working-Storage Address              RS1007
CEE_TGT_PTR_FCB_SEC_CELL DS F  Pointer to first secondary FCB CellS1007
*------------------------------------------------------------*   RS1007
* COBOL/370 FIB                                                  RS1007
*------------------------------------------------------------*   RS1007
COBOL_FIB_DSECT     DSECT                                        RS1007
COBOL_FIB_EYEC      DS CL3  Eyecatcher FIB                       RS1007
COBOL_FIB_NUM       DS CL2                                       RS1007
COBOL_FIB_LEVEL     DS XL1                                       RS1007
COBOL_FIB_DDN       DS CL8  DD-Name                              RS1007
                    DS CL1                                       RS1007
COBOL_FIB_DSORG     DS CL1                                       RS1007
COBOL_FIB_ACCESS    DS CL1                                       RS1007
COBOL_FIB_RM        DS CL1                                       RS1007
COBOL_FIB_BYTE18    DS CL1                                       RS1007
COBOL_FIB_BYTE19    DS CL1                                       RS1007
                    DS CL2                                       RS1007
COBOL_FIB_RECFM     DS CL1                                       RS1007
                    DS CL1                                       RS1007
COBOL_FIB_BLK       DS F                                         RS1007
COBOL_FIB_LRECL     DS F                                         RS1007
                    DS CL16                                      RS1007
COBOL_FIB_OPEN_CLOSE DS CL1                                      RS1007
COBOL_FIB_I_O_VERB1 DS CL1                                       RS1007
COBOL_FIB_I_O_VERB2 DS CL1                                       RS1007
                    DS CL9                                       RS1007
COBOL_FIB_FS1       DS F                                         RS1007
COBOL_FIB_FS2       DS F                                         RS1007
         DCBD    DSORG=QS
         STRING64 GENERATE
BIT0     EQU   B'10000000'
BIT1     EQU   B'01000000'
BIT2     EQU   B'00100000'
BIT3     EQU   B'00010000'
BIT4     EQU   B'00001000'
BIT5     EQU   B'00000100'
BIT6     EQU   B'00000010'
BIT7     EQU   B'00000001'
*------------------------------------------------------------*
* Program equates                                            *
*------------------------------------------------------------*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*                                                                 *CSC*
COBANAL  CSECT ,                                                 PF0608
STATIC_AREA DS 0D
ADDINFO  DC    C'------------ Additional information    ---------------X
               -----------------------------------------------'
FOOTER   DC    C'======================================================X
               ==============================================='
MASKTOT  DC    XL6'402020202120'       Mask for totals            *CSC*
C_COBOL370 DC X'00',C'CEE'                   COBOL/370 ?  X'00C3C5C5'
C_OPLINK   DC X'01',C'CEE'                   C370         X'01C3C5C5'
C_COBV5   EQU C_OPLINK                 Enterprise CobV5?  X'01C3C5C5'
*EW_IDL DC H'5',C'B_IDL'                                         RS1007
IEW_IDL  DC H'6',C'B_IDRL'                                       RS1007
IEW_ESD  DC H'5',C'B_ESD'                                        RS1007
IEW_IDU  DC H'6',C'B_IDRU'                                       RS1007
IEW_IDZ  DC H'6',C'B_IDRZ'                                       RS1007
IEW_IDB  DC H'6',C'B_IDRB'                                       RS1007
IEW_DDN  DC 0H                                                   PF0608
IEW_DDNL DC H'7'                                                 PF0608
IEW_DDNN DC CL8'COBANAL'                                         PF0608
O_LIST   DC    H'4',C'LIST'               Option: List           RS1007
V_ALL    DC    H'3',C'ALL'                Value: All             RS1007
FILELIST DS    0F                         ddname                 RS1007
         DC    F'1'                       Number                 RS1007
         DC    CL8'PRINT',F'8',A(PRINTX)  Type, length of ddname, addr
PRINTX   DC    CL8'BINDEROU'              The ddname             RS1007
OPTION_Y DC    C'Y'                                              RS1007
OPTION_N DC    C'N'                                              RS1007
*                                                                RS1007
OPTLIST3 DS    0F                         Global options specs   RS1007
         DC    F'2'                       Number of list entries RS1007
         DC    CL8'TERM    ',F'1',A(OPTION_N)                    RS1007
         DC    CL8'PRINT   ',F'1',A(OPTION_Y)                    RS1007
* EXecuted moves                                                 PF0708
MOVE_PLINAME MVC 0(0,R14),IEW_MBRN        Move name to PLINAME   PF0708
MOVE_$STATUS MVC 0(*-*,R3),1(R14)         Move status flags      PF0708
MOVE_PGM_NAME MVC LE_PGM_NAME(0),58(R2)      Move PGM-Name       RS0116
BLANKS   DC    CL255' '           just blanks
C_LSTO   OPEN  (*-*,(OUTPUT)),MODE=31,MF=L
C_LSTOL  EQU   *-C_LSTO
C_LSTI   OPEN  (*-*,(INPUT)),MODE=31,MF=L
C_LSTIL  EQU   *-C_LSTI
C_CLOSE  CLOSE (*-*),MF=L
C_CLOSEL EQU   *-C_CLOSE
XFF      DC    XL8'FFFFFFFFFFFFFFFF' just High-value
* Initializing DCB/DCBE's moved to separate CSECTS to make more  PF0608
* space available in the STATIC_AREA                             PF0608
* NAME The names of each section or class in the workmod, a      PF0608
*      count of the total number of sections or classes, and the PF0608
*      compile unit (CU) numbers for each section.               PF0608
         IEWBUFF FUNC=MAPBUF,TYPE=NAME,SIZE=200,                  *CSC*X
               HEADREG=8,ENTRYREG=9,VERSION=4                     *CSC*
* IDL Language processor identification record, indicating the   PF0608
*     compilers that created the binder input, the date of       PF0608
*     compilation and the binder size.                           PF0608
         IEWBUFF FUNC=MAPBUF,TYPE=IDRL,SIZE=50,                        X
               HEADREG=8,ENTRYREG=9,VERSION=4                    RS1007
* ESD External Symbol Dictionary, a catalog containing all       PF0608
*     symbols that are available to the binder. These symbols    PF0608
*     include section and class names, as well as ordinary       PF0608
*     symbol definitions and references.                         PF0608
         IEWBUFF FUNC=MAPBUF,TYPE=ESD,SIZE=50,                         X
               HEADREG=8,ENTRYREG=9,VERSION=4                    RS1007
* IDU User-specified identification record, containing data      PF0608
*     provided on an IDENTIFY control statement.                 PF0608
         IEWBUFF FUNC=MAPBUF,TYPE=IDRU,SIZE=50,                        X
               HEADREG=8,ENTRYREG=9,VERSION=4                    RS1007
* IDZ AMASPZAP identification record, for programs that have     PF0608
*     been modified at the object level.                         PF0608
         IEWBUFF FUNC=MAPBUF,TYPE=IDRZ,SIZE=50,                        X
               HEADREG=8,ENTRYREG=9,VERSION=4                    RS1007
* IDB Binder identification record, indicating the binder        PF0608
*     version, size, and how and when the program object was     PF0608
*     created.                                                   PF0608
         IEWBUFF FUNC=MAPBUF,TYPE=IDRB,SIZE=50,                        X
               HEADREG=8,ENTRYREG=9,VERSION=4                    RS1007
         LTORG
STATIC_AREA_END DS 0D
* -------------------------------------------------------------- PF0608
* Separate CSECT for each initializing DCB/DCBE                  PF0608
* -------------------------------------------------------------- PF0608
FIXSYSPR CSECT ,                                                 PF0608
FIXSYSPR AMODE 31
FIXSYSPR RMODE ANY
* Output information for selected programs                       PF0608
SYSPRINT_FIX DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,            PF0608X
               RECFM=FB,LRECL=121,DCBE=SYSPRE                    PF0608
SYSPRINT_FIX_LENGTH EQU *-SYSPRINT_FIX   Length workarea         PF0608
SYSPRE   DCBE RMODE31=BUFF                                       PF0608
FIXSUMMA CSECT ,                                                 PF0608
FIXSUMMA AMODE 31
FIXSUMMA RMODE ANY
* Summary WORK file for CSC Summary report.                      PF0608
SUMMARY_FIX DCB   DSORG=PS,DDNAME=SUMMARY,MACRF=PM,              PF0608X
               RECFM=FB,LRECL=121,DCBE=SUMPRE                    PF0608
SUMMARY_FIX_LENGTH EQU *-SUMMARY_FIX   Length workarea           PF0608
SUMPRE   DCBE RMODE31=BUFF                                       PF0608
FIXJUSTD CSECT ,                                                 =CMS=
FIXJUSTD AMODE 31
FIXJUSTD RMODE ANY
* JUSTDATA file for CMS data                                     =CMS=
JUSTDATA_FIX DCB   DSORG=PS,DDNAME=JUSTDATA,MACRF=PM,            =CMS= X
               RECFM=FB,LRECL=#JUSTDATA_,DCBE=JUSTDPRE
JUSTDATA_FIX_LENGTH EQU *-JUSTDATA_FIX   Length workarea         =CMS=
JUSTDPRE DCBE RMODE31=BUFF                                       =CMS=
FIXINPUT CSECT ,                                                 PF0608
FIXINPUT AMODE 31
FIXINPUT RMODE ANY
* PDS Directory input file for PARM=ALL and COBANAL DD           PF0608
INPUT_FIX DCB   DSORG=PS,DDNAME=COBANAL,MACRF=(GM),              PF0608X
               RECFM=U,BLKSIZE=256,DCBE=INPUTE                   PF0608
INPUT_FIX_LENGTH EQU *-INPUT_FIX     Length workarea             PF0608
INPUTE   DCBE RMODE31=BUFF                                       PF0608
FIXLOADL CSECT ,                                                 PF0608
FIXLOADL AMODE 31
FIXLOADL RMODE ANY
* PDS input file for IEWBIND FUNC=INCLUDE and COBANAL DD         PF0608
LOADL_FIX DCB   DSORG=PO,DDNAME=COBANAL,MACRF=(R),               PF0608X
               RECFM=U,DCBE=LOADLE_FIX                           RS0516
LOADLE_FIX   DCBE RMODE31=BUFF                                   RS0516
LOADL_FIX_LENGTH EQU *-LOADL_FIX     Length workarea             PF0608
FIXSYSIN CSECT ,                                                 PF0608
FIXSYSIN AMODE 31
FIXSYSIN RMODE ANY
* Optional input file for list of programs to process            PF0608
SYSIN_FIX DCB   DSORG=PS,DDNAME=SYSIN,MACRF=GM,                  RS0908X
               RECFM=FB,LRECL=80,DCBE=SYSINE_FIX                 RS0908
SYSINE_FIX  DCBE RMODE31=BUFF,EODAD=COBANAL_FIN                  RS0908
SYSIN_FIX_LENGTH EQU *-SYSIN_FIX     Length workarea             PF0608
COBANAL  CSECT ,                                                 PF0608
         IHAPSA                                                   *CSC*
         IKJTCB                                                   *CSC*
         IEFJFCBN                                                 *CSC*
TIOT     DSECT                                                    *CSC*
         IEFTIOT1                                                 *CSC*
         USING INFMJFCB,R2                                        *CSC*
         IEFZB505 LOCEPAX=YES          EPA MAPPING FOR SWAREQ     *CSC*
         CVT   PREFIX=YES,DSECT=YES,LIST=NO    CVT                *CSC*
         IEFJESCT                      JES VECTOR TABLE           *CSC*
         IEFQMIDS                      SWA Block Identifiers      *CSC*
*        IHAPDS                        PDS Directory             RS0316
CEEOCB   DSECT      LE option cblock (OCO)
CEEOCB_EYEC       DS CL8               Eyecatcher
CEEOCB_VER        DS H                 Version
CEEOCB_LEN        DS AL2               Length of OCB
CEEOCB_EVP        DS A                 Expansion vector pointer
                  DS A                 Reserved for future use
OPTION_RES1       DS 0C                Reserved option
OPTION_RES1_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_RES1_WHSET DS H                 Where set
*                                      50 default
*                                      100 DOPT
*                                      200 UOPT
*                                      500 ROPT
OPTION_RES1_SUBOPT DS A                Offset to sub-options
OPTION_AIXB       DS 0C                AIXBLD
OPTION_AIXB_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_AIXB_WHSET DS H                 Where set
*                                      50 default
*                                      100 DOPT
*                                      200 UOPT
*                                      500 ROPT
OPTION_AIXB_SUB   DS A                 Offset to sub-options
OPTION_ALL3       DS 0C                ALL31
OPTION_ALL3_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_ALL3_WHSET DS H                 Where set
OPTION_ALL3_SUB   DS A                 Offset to sub-options
OPTION_BELH       DS 0C                BELOWHEAP
OPTION_BELH_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_BELH_WHSET DS H                 Where set
OPTION_BELH_SUB   DS A                 Offset to sub-options
OPTION_CHEC       DS 0C                CHECK
OPTION_CHEC_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_CHEC_WHSET DS H                 Where set
OPTION_CHEC_SUB   DS A                 Offset to sub-options
OPTION_PLIT       DS 0C                PLITASKCOUNT
OPTION_PLIT_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_PLIT_WHSET DS H                 Where set
OPTION_PLIT_SUB   DS A                 Offset to sub-options
OPTION_ABTE       DS 0C                ABTERMENC
OPTION_ABTE_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_ABTE_WHSET DS H                 Where set
OPTION_ABTE_SUB   DS A                 Offset to sub-options
OPTION_COUN       DS 0C                COUNTRY
OPTION_COUN_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_COUN_WHSET DS H                 Where set
OPTION_COUN_SUB   DS A                 Offset to sub-options
OPTION_DEBU       DS 0C                DEBUG
OPTION_DEBU_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_DEBU_WHSET DS H                 Where set
OPTION_DEBU_SUB   DS A                 Offset to sub-options
OPTION_ERRC       DS 0C                ERRCOUNT
OPTION_ERRC_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_ERRC_WHSET DS H                 Where set
OPTION_ERRC_SUB   DS A                 Offset to sub-options
OPTION_FILE       DS 0C                FILEHIST
OPTION_FILE_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_FILE_WHSET DS H                 Where set
OPTION_FILE_SUB   DS A                 Offset to sub-options
OPTION_ENVA       DS 0C                ENVAR
OPTION_ENVA_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_ENVA_WHSET DS H                 Where set
OPTION_ENVA_SUB   DS A                 Offset to sub-options
OPTION_FLOW       DS 0C                FLOW
OPTION_FLOW_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_FLOW_WHSET DS H                 Where set
OPTION_FLOW_SUB   DS A                 Offset to sub-options
OPTION_HEAP       DS 0C                HEAP
OPTION_HEAP_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_HEAP_WHSET DS H                 Where set
OPTION_HEAP_SUB   DS A                 Offset to sub-options
OPTION_INQP       DS 0C                INQPCOPN
OPTION_INQP_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_INQP_WHSET DS H                 Where set
OPTION_INQP_SUB   DS A                 Offset to sub-options
OPTION_INTE       DS 0C                INTERRUPT
OPTION_INTE_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_INTE_WHSET DS H                 Where set
OPTION_INTE_SUB   DS A                 Offset to sub-options
OPTION_LIBS       DS 0C                LIBSTACK
OPTION_LIBS_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_LIBS_WHSET DS H                 Where set
OPTION_LIBS_SUB   DS A                 Offset to sub-options
OPTION_MSGQ       DS 0C                MSGQ
OPTION_MSGQ_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_MSGQ_WHSET DS H                 Where set
OPTION_MSGQ_SUB   DS A                 Offset to sub-options
OPTION_MSGF       DS 0C                MSGFILE
OPTION_MSGF_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_MSGF_WHSET DS H                 Where set
OPTION_MSGF_SUB   DS A                 Offset to sub-options
OPTION_NATL       DS 0C                NATLANG
OPTION_NATL_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_NATL_WHSET DS H                 Where set
OPTION_NATL_SUB   DS A                 Offset to sub-options
OPTION_ERRU       DS 0C                ERRUNIT
OPTION_ERRU_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_ERRU_WHSET DS H                 Where set
OPTION_ERRU_SUB   DS A                 Offset to sub-options
OPTION_OCST       DS 0C                OCSTATUS
OPTION_OCST_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_OCST_WHSET DS H                 Where set
OPTION_OCST_SUB   DS A                 Offset to sub-options
OPTION_POSI       DS 0C                POSIX
OPTION_POSI_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_POSI_WHSET DS H                 Where set
OPTION_POSI_SUB   DS A                 Offset to sub-options
OPTION_RPTS       DS 0C                RPTSTG
OPTION_RPTS_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_RPTS_WHSET DS H                 Where set
OPTION_RPTS_SUB   DS A                 Offset to sub-options
OPTION_RTER       DS 0C                RTEREUS
OPTION_RTER_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_RTER_WHSET DS H                 Where set
OPTION_RTER_SUB   DS A                 Offset to sub-options
OPTION_SIMV       DS 0C                SIMVRD
OPTION_SIMV_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_SIMV_WHSET DS H                 Where set
OPTION_SIMV_SUB   DS A                 Offset to sub-options
OPTION_STAC       DS 0C                STACK
OPTION_STAC_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_STAC_WHSET DS H                 Where set
OPTION_STAC_SUB   DS A                 Offset to sub-options
OPTION_STOR       DS 0C                STORAGE
OPTION_STOR_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_STOR_WHSET DS H                 Where set
OPTION_STOR_SUB   DS A                 Offset to sub-options
OPTION_AUTO       DS 0C                AUTOTASK
OPTION_AUTO_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_AUTO_WHSET DS H                 Where set
OPTION_AUTO_SUB   DS A                 Offset to sub-options
OPTION_TRAC       DS 0C                TRACE
OPTION_TRAC_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_TRAC_WHSET DS H                 Where set
OPTION_TRAC_SUB   DS A                 Offset to sub-options
OPTION_THRH       DS 0C                THREADHEAP
OPTION_THRH_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_THRH_WHSET DS H                 Where set
OPTION_THRH_SUB   DS A                 Offset to sub-options
OPTION_TEST       DS 0C                TEST
OPTION_TEST_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_TEST_WHSET DS H                 Where set
OPTION_TEST_SUB   DS A                 Offset to sub-options
OPTION_THRS       DS 0C                THREADSTACK
OPTION_THRS_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_THRS_WHSET DS H                 Where set
OPTION_THRS_SUB   DS A                 Offset to sub-options
OPTION_TRAP       DS 0C                TRAP
OPTION_TRAP_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_TRAP_WHSET DS H                 Where set
OPTION_TRAP_SUB   DS A                 Offset to sub-options
OPTION_UPSI       DS 0C                UPSI
OPTION_UPSI_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_UPSI_WHSET DS H                 Where set
OPTION_UPSI_SUB   DS A                 Offset to sub-options
OPTION_VCTR       DS 0C                VCTRSAVE
OPTION_VCTR_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_VCTR_WHSET DS H                 Where set
OPTION_VCTR_SUB   DS A                 Offset to sub-options
OPTION_PRTU       DS 0C                PRTUNIT
OPTION_PRTU_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_PRTU_WHSET DS H                 Where set
OPTION_PRTU_SUB   DS A                 Offset to sub-options
OPTION_XUFL       DS 0C                XUFLOW
OPTION_XUFL_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_XUFL_WHSET DS H                 Where set
OPTION_XUFL_SUB   DS A                 Offset to sub-options
OPTION_CBLO       DS 0C                CBLOPTS
OPTION_CBLO_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_CBLO_WHSET DS H                 Where set
OPTION_CBLO_SUB   DS A                 Offset to sub-options
OPTION_NONI       DS 0C                NONIPTSTACK
OPTION_NONI_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_NONI_WHSET DS H                 Where set
OPTION_NONI_SUB   DS A                 Offset to sub-options
OPTION_RPTO       DS 0C                RPTOPTS
OPTION_RPTO_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_RPTO_WHSET DS H                 Where set
OPTION_RPTO_SUB   DS A                 Offset to sub-options
OPTION_ANYH       DS 0C                ANYHEAP
OPTION_ANYH_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_ANYH_WHSET DS H                 Where set
OPTION_ANYH_SUB   DS A                 Offset to sub-options
OPTION_ABPE       DS 0C                ABPERC
OPTION_ABPE_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_ABPE_WHSET DS H                 Where set
OPTION_ABPE_SUB   DS A                 Offset to sub-options
OPTION_TERM       DS 0C                TERMTHDACT
OPTION_TERM_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_TERM_WHSET DS H                 Where set
OPTION_TERM_SUB   DS A                 Offset to sub-options
OPTION_DEPT       DS 0C                DEPTHCONDLMT
OPTION_DEPT_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_DEPT_WHSET DS H                 Where set
OPTION_DEPT_SUB   DS A                 Offset to sub-options
OPTION_CBLP       DS 0C                CBLPSHPOP
OPTION_CBLP_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_CBLP_WHSET DS H                 Where set
OPTION_CBLP_SUB   DS A                 Offset to sub-options
OPTION_CBLQ       DS 0C                CBLQDA
OPTION_CBLQ_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_CBLQ_WHSET DS H                 Where set
OPTION_CBLQ_SUB   DS A                 Offset to sub-options
OPTION_PUNU       DS 0C                PUNUNIT
OPTION_PUNU_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_PUNU_WHSET DS H                 Where set
OPTION_PUNU_SUB   DS A                 Offset to sub-options
OPTION_RDRU       DS 0C                RDRUNIT
OPTION_RDRU_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_RDRU_WHSET DS H                 Where set
OPTION_RDRU_SUB   DS A                 Offset to sub-options
OPTION_RECP       DS 0C                RECPAD
OPTION_RECP_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_RECP_WHSET DS H                 Where set
OPTION_RECP_SUB   DS A                 Offset to sub-options
OPTION_USRH       DS 0C                USRHDLR
OPTION_USRH_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_USRH_WHSET DS H                 Where set
OPTION_USRH_SUB   DS A                 Offset to sub-options
OPTION_RES2       DS 0C                Reserved option
OPTION_RES2_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_RES2_WHSET DS H                 Where set
OPTION_RES2_SUB   DS A                 Offset to sub-options
OPTION_PC         DS 0C                PC
OPTION_PC_FLAG    DS AL1               Flag for option
                  DS X                 Unused
OPTION_PC_WHSET   DS H                 Where set
OPTION_PC_SUB     DS A                 Offset to sub-options
OPTION_LIBR       DS 0C                LIBRARY
OPTION_LIBR_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_LIBR_WHSET DS H                 Where set
OPTION_LIBR_SUB   DS A                 Offset to sub-options
OPTION_VERS       DS 0C                VERSION
OPTION_VERS_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_VERS_WHSET DS H                 Where set
OPTION_VERS_SUB   DS A                 Offset to sub-options
OPTION_RTLS       DS 0C                RTLS
OPTION_RTLS_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_RTLS_WHSET DS H                 Where set
OPTION_RTLS_SUB   DS A                 Offset to sub-options
OPTION_HCHK       DS 0C                HEAPCHK
OPTION_HCHK_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_HCHK_WHSET DS H                 Where set
OPTION_HCHK_SUB   DS A                 Offset to sub-options
OPTION_PROF       DS 0C                PROFILE
OPTION_PROF_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_PROF_WHSET DS H                 Where set
OPTION_PROF_SUB   DS A                 Offset to sub-options
OPTION_HEPP       DS 0C                HEAPPOOLS
OPTION_HEPP_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_HEPP_WHSET DS H                 Where set
OPTION_HEPP_SUB   DS A                 Offset to sub-options
OPTION_INFO       DS 0C                INFOMSGFILTER
OPTION_INFO_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_INFO_WHSET DS H                 Where set
OPTION_INFO_SUB   DS A                 Offset to sub-options
OPTION_XPLI       DS 0C                XPLINK
OPTION_XPLI_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_XPLI_WHSET DS H                 Where set
OPTION_XPLI_SUB   DS A                 Offset to sub-options
OPTION_FILT       DS 0C                FILETAG
OPTION_FILT_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_FILT_WHSET DS H                 Where set
OPTION_FILT_SUB   DS A                 Offset to sub-options
OPTION_HE64       DS 0C                HEAP64
OPTION_HE64_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_HE64_WHSET DS H                 Where set
OPTION_HE64_SUB   DS A                 Offset to sub-options
OPTION_HEPP64     DS 0C                HEAPPOOLS64
OPTION_HEPP64_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_HEPP64_WHSET DS H                 Where set
OPTION_HEPP64_SUB   DS A                 Offset to sub-options
OPTION_IOHE64     DS 0C                IOHEAP64
OPTION_IOHE64_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_IOHE64_WHSET DS H                 Where set
OPTION_IOHE64_SUB   DS A                 Offset to sub-options
OPTION_LIHE64     DS 0C                LIBHEAP64
OPTION_LIHE64_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_LIHE64_WHSET DS H                 Where set
OPTION_LIHE64_SUB   DS A                 Offset to sub-options
OPTION_STAC64     DS 0C                STACK64
OPTION_STAC64_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_STAC64_WHSET DS H                 Where set
OPTION_STAC64_SUB   DS A                 Offset to sub-options
OPTION_THRS64     DS 0C                THREADSTACK64
OPTION_THRS64_FLAG  DS AL1               Flag for option
                  DS X                 Unused
OPTION_THRS64_WHSET DS H                 Where set
OPTION_THRS64_SUB   DS A                 Offset to sub-options
OPTION_DYNDMP     DS 0C                DYNDUMP                   RS0806
OPTION_DYNDMP_FLAG  DS AL1               Flag for option         RS0806
                  DS X                 Unused                    RS0806
OPTION_DYNDMP_WHSET DS H                 Where set               RS0806
OPTION_DYNDMP_SUB   DS A                 Offset to sub-options   RS0806
OPTION_CEEDMP     DS 0C                CEEDUMP                   RS1007
OPTION_CEEDMP_FLAG  DS AL1               Flag for option         RS1007
                  DS X                 Unused                    RS1007
OPTION_CEEDMP_WHSET DS H                 Where set               RS1007
OPTION_CEEDMP_SUB   DS A                 Offset to sub-options   RS1007
SUBOPT_BELH       DSECT                Suboptions BELOWHEAP
SUBOPT_BELH_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_BELH_INIT  DS F                 BELOWHEAP initial size
SUBOPT_BELH_INC   DS F                 BELOWHEAP increment size
SUBOPT_BELH_ALLOC DS AL1               128 = BELOW, 64 = FREE
SUBOPT_PLIT       DSECT                Suboptions PLITASKCOUNT
SUBOPT_PLIT_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_PLIT_COUNT DS F                 PLITASKCOUNT # condition limit
SUBOPT_ABTE       DSECT                Suboptions ABTERMENC
SUBOPT_ABTE_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_ABTE_OPT   DS F                 2=ABEND, 1=RETCODE
SUBOPT_COUN       DSECT                Suboptions COUNTRY
SUBOPT_COUN_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_COUN_ID    DS CL2               COUNTRY identifier
                  DS AL2               Unused
SUBOPT_ERRC       DSECT                Suboptions ERRCOUNT
SUBOPT_ERRC_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_ERRC_COUNT DS F                 ERRCOUNT # non-fatal errors
SUBOPT_ENVA       DSECT                Suboptions ENVAR
SUBOPT_ENVA_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_ENVA_OFFS  DS F                 Offset to envar string
SUBOPT_ENVA_LEN   DS H                 length of envar
SUBOPT_ENVA_STR   DS CL250             envar string
SUBOPT_FLOW       DSECT                Suboptions FLOW
SUBOPT_FLOW_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_FLOW_COUNT DS F                 FLOWC max # procedures
SUBOPT_HEAP       DSECT                Suboptions HEAP
SUBOPT_HEAP_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_HEAP_INIT  DS F                 HEAP initial size
SUBOPT_HEAP_INC   DS F                 HEAP increment size
SUBOPT_HEAP_ALLOC DS AL1               128 = BELOW, 64 = FREE
                  DS AL3               Unused
SUBOPT_HEAP24_INIT DS F                HEAP24 initial size
SUBOPT_HEAP24_INC DS F                 HEAP24 increment size
SUBOPT_LIBS       DSECT                Suboptions LIBSTACK
SUBOPT_LIBS_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_LIBS_INIT  DS F                 LIBSTACK initial size
SUBOPT_LIBS_INC   DS F                 LIBSTACK increment size
SUBOPT_LIBS_ALLOC DS AL1               128 = BELOW, 64 = FREE
                  DS AL3               Unused
SUBOPT_MSGQ       DS 0C                Suboptions MSGQ
SUBOPT_MSGQ_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_MSGQ_COUNT DS F                 MSGQ maximum # MIB entries
SUBOPT_MSGF       DSECT                Suboptions MSGFILE
SUBOPT_MSGF_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_MSGF_DDO   DS A                 Offset to DDNAME
SUBOPT_MSGF_RFMO  DS A                 Offset to RECFM
SUBOPT_MSGF_RECL  DS F                 RECL
SUBOPT_MSGF_BLKS  DS F                 Block size
SUBOPT_MSGF_DDL   DS H                 Effective length of following
SUBOPT_MSGF_DD    DS CL8               MSGFILE DDname
SUBOPT_MSGF_ENQ   DS CL2               Space = NOENQ ' *' = ENQ
SUBOPT_MSGF_RFML  DS H                 Effective length of following
SUBOPT_MSGF_RFM   DS CL5               Record format
                  DS CL1               Unused
SUBOPT_NATL       DSECT                Suboptions NATLANG
SUBOPT_NATL_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_NATL_ID    DS CL3               COUNTRY identifier
                  DS AL1               Unused
SUBOPT_ERRU       DSECT                Suboptions ERRUNIT
SUBOPT_ERRU_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_ERRU_COUNT DS F                 ERRUNIT # non-fatal errors
SUBOPT_STAC       DSECT                Suboptions STACK
SUBOPT_STAC_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_STAC_INIT  DS F                 STACK initial size
SUBOPT_STAC_INC   DS F                 STACK increment size
SUBOPT_STAC_ALLOC DS AL1               128 = BELOW, 64 = FREE
                  DS AL3               Unused
SUBOPT_STAC_DINIT DS F                 DownSTACK initial size
SUBOPT_STAC_DINC  DS F                 DownSTACK increment size
SUBOPT_STOR       DSECT                Suboptions STACK
SUBOPT_STOR_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_STOR_CSF   DS AL1               Characters-specified flags
SUBOPT_STOR_AHSC  DS X                 Allocated heap storage character
SUBOPT_STOR_FHSC  DS X                 Freed heap storage character
SUBOPT_STOR_ADSC  DS X                 Allocated DSA storage character
SUBOPT_STOR_SOSSZ DS F                 Short on storage reserve size
SUBOPT_AUTO       DSECT                Suboptions AUTOTASK
SUBOPT_AUTO_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_AUTO_LMO   DS A                 Offset to loadmod
SUBOPT_AUTO_NO    DS F                 Number of subtasks
SUBOPT_AUTO_LEN   DS H                 Length of Loadmod
SUBOPT_AUTO_LMOD  DS CL8               Loadmod
                  DS AL2               Unused
SUBOPT_TRAC       DSECT                Suboptions TRACE
SUBOPT_TRAC_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_TRAC_SIZE  DS F                 Trace buffer size
SUBOPT_TRAC_GFLG  DS XL4               Global trace level bits
SUBOPT_TRAC_FLG1  DS X                 Trace flags ('80xxxxxx' = DUMP)
SUBOPT_TRAC_FLG2  DS X                 Trace flags ('xx00xxxx'       )
SUBOPT_TRAC_FLG3  DS X                 Trace flags ('xxxx00xx'       )
SUBOPT_TRAC_FLG4  DS X                 Trace flags ('xxxxxx00'       )
SUBOPT_TRAC_TRVO  DS A                 Offset of Trace level verify
SUBOPT_TRAC_TRSO  DS A                 Offset of Trace level set
SUBOPT_TRAC_TRAO  DS A                 Offset of Trace level array
SUBOPT_TRAC_TRVA  DS AL1               Verify flags for the following
                  DS AL1                array of trace level
                  DS AL1
                  DS AL1
SUBOPT_TRAC_TRSA  DS XL4               Trace level set flags array
SUBOPT_TRAC_TRAA  DS XL4               Unused trace level bits
                  DS XL4               CEL trace level bits
                  DS XL4               Unused trace level bits
                  DS XL4               C/370 trace level bits
                  DS XL4               Unused trace level bits
                  DS XL4               Unused trace level bits
                  DS XL4               Unused trace level bits
                  DS XL4               Unused trace level bits
                  DS XL4               DCE trace level bits
                  DS XL4               Unused trace level bits
                  DS XL4               Unused trace level bits
                  DS XL4               Unused trace level bits
                  DS XL4               Sockets trace level bits
                  DS XL4               Unused trace level bits
                  DS XL4               Unused trace level bits
                  DS XL4               Unused trace level bits
                  DS XL4               Unused trace level bits
                  DS XL4               Unused trace level bits
SUBOPT_THRH       DSECT                Suboptions THREADHEAP
SUBOPT_THRH_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_THRH_INIT  DS F                 THREADHEAP initial size
SUBOPT_THRH_INC   DS F                 THREADHEAP increment size
SUBOPT_THRH_ALLOC DS AL1               128 = BELOW, 64 = FREE
                  DS AL3               Unused
SUBOPT_TEST       DSECT                Suboptions TEST
SUBOPT_TEST_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_TEST_OPT   DS F                 1 = NONE, 2 = ERROR, 4 = ALL
SUBOPT_TEST_CFO   DS A                 Offset of commands_file
SUBOPT_TEST_CLO   DS A                 Offset of command_list|prompt
SUBOPT_TEST_PFO   DS A                 Offset of preference_file
SUBOPT_TEST_CFL   DS H                 Effective length of following
SUBOPT_TEST_CF    DS CL80              Commands_file name
                  DS CL2               unused
SUBOPT_TEST_CLL   DS H                 Effective length of following
SUBOPT_TEST_CL    DS CL250             Command_list name|prompt option
SUBOPT_TEST_PFL   DS H                 Effective length of following
SUBOPT_TEST_PF    DS CL80              Preference_file name
                  DS CL2               Unused
SUBOPT_THRS       DSECT                Suboptions THREADSTACK
SUBOPT_THRS_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_THRS_INIT  DS F                 ThreadStack initial size
SUBOPT_THRS_INC   DS F                 ThreadStack increment size
SUBOPT_THRS_ALLOC DS AL1               128 = BELOW, 64 = FREE
                  DS AL3               Unused
SUBOPT_THRS_DINIT DS F                 Down STACK initial size
SUBOPT_THRS_DINC  DS F                 Down  STACK increment size
SUBOPT_TRAP       DSECT                Suboptions TRAP
SUBOPT_TRAP_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_TRAP_FLG   DS AL1               Trap  flags ('80xxxxxx' = SPIE)
                  DS AL3               Unused
SUBOPT_UPSI       DSECT                Suboptions UPSI
SUBOPT_UPSI_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_UPSI_SW    DS CL8               8 UPSI switches
SUBOPT_PRTU       DSECT                Suboptions PRTUNIT
SUBOPT_PRTU_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_PRTU_COUNT DS F                 PRTUNIT # non-fatal errors
SUBOPT_XUFL       DSECT                Suboptions XUFLOW
SUBOPT_XUFL_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_XUFL_COUNT DS F                 4 = OFF, 2 = ON, 1 = AUTOs
SUBOPT_NONI       DSECT                Suboptions NONIPTSTACK
SUBOPT_NONI_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_NONI_INIT  DS F                 NONIPTSTACK initial size
SUBOPT_NONI_INC   DS F                 NONIPTSTACK increment size
SUBOPT_NONI_ALLOC DS AL1               128 = BELOW, 64 = FREE
                  DS AL3               Unused
SUBOPT_ANYH       DSECT                Suboptions ANYHEAP
SUBOPT_ANYH_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_ANYH_INIT  DS F                 ANYHEAP initial size
SUBOPT_ANYH_INC   DS F                 ANYHEAP increment size
SUBOPT_ANYH_ALLOC DS AL1               128 = BELOW, 64 = FREE
                  DS AL3               Unused
SUBOPT_ABPE       DSECT                Suboptions ABPERC
SUBOPT_ABPE_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_ABPE_US    DS AL1               128=NONE, 64=U, 32=S, 16=other
                  DS AL3               Unused
SUBOPT_ABPE_CODE  DS F                 Numeric portion of U or S abcode
SUBOPT_ABPE_ABC   DS CL8               Abcode (blank-padded)
SUBOPT_TERM       DSECT                Suboptions TERMTHDACT
SUBOPT_TERM_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_TERM_FLG   DS F                 8=QUIET, 4=MSG, 2=TRACE, 1=DUMP
SUBOPT_TERM_CESE  DS AL1               128=CESE,64=CICSDDS
                  DS AL3               Unused
SUBOPT_TERM_STOR  DS H                 reg_stor_amount suboption
                  DS AL2               Unused
SUBOPT_DEPT       DSECT                Suboptions DEPTHCONDLMT
SUBOPT_DEPT_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_DEPT_COUNT DS F                 DEPTHCONDLMT # condition limit
SUBOPT_PUNU       DSECT                Suboptions PUNUNIT
SUBOPT_PUNU_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_PUNU_COUNT DS F                 PUNUNIT # non-fatal errors
SUBOPT_RDRU       DSECT                Suboptions RDRUNIT
SUBOPT_RDRU_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_RDRU_COUNT DS F                 RDRUNIT # non-fatal errors
SUBOPT_RECP       DSECT                Suboptions RECPAD
SUBOPT_RECP_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_RECP_FLG   DS F                 4 = OFF, 2 = ON, 1 = VAR
SUBOPT_USRH       DSECT                Suboptions USRHDLR
SUBOPT_USRH_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_USRH_UN1O  DS A                 Offset of UHname
SUBOPT_USRH_UN2O  DS A                 Offset of UHname2
SUBOPT_USRH_UN1L  DS H                 Effective length of following
SUBOPT_USRH_UN1   DS CL8               USRHDLR UHname
                  DS CL2
SUBOPT_USRH_UN2L  DS H                 Effective length of following
SUBOPT_USRH_UN2   DS CL8               USRHDLR UHname2
                  DS CL2
SUBOPT_RES2       DSECT                Suboptions
SUBOPT_RES2_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_RES2_LVL   DS F                 Level information
SUBOPT_LIBR       DSECT                Suboptions LIBRARY
SUBOPT_LIBR_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_LIBR_LMO   DS A                 Offset of load module name
SUBOPT_LIBR_LML   DS H                 Effective length of following
SUBOPT_LIBR_LM    DS CL8               Name of load module
                  DS CL2
SUBOPT_VERS       DSECT                Suboptions VERSION
SUBOPT_VERS_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_VERS_LMO   DS A                 Offset of load module name
SUBOPT_VERS_LML   DS H                 Effective length of following
SUBOPT_VERS_LM    DS CL8               Name of load module
                  DS CL2
SUBOPT_HCHK       DSECT                Suboptions HEAPCHK
SUBOPT_HCHK_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_HCHK_FREQ  DS F                 HeapChk frequency
SUBOPT_HCHK_INIT  DS F                 HeapChk initial delay
SUBOPT_HCHK_CLVL  DS F                 HeapChk call level
SUBOPT_HCHK_PLVL  DS F                 HeapChk pool call level
SUBOPT_PROF       DSECT                Suboptions PROFILE
SUBOPT_PROF_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_PROF_STRO  DS A                 Offset of Profiler string
SUBOPT_PROF_STRL  DS H                 Effective length of following
SUBOPT_PROF_STR   DS CL250             PROFILE String
SUBOPT_HEPP       DSECT                Suboptions HEAPPOOLS
SUBOPT_HEPP_FLG1  DS AL1               Suboption valid bits
SUBOPT_HEPP_FLG2  DS AL1               Suboption valid bits
                  DS AL2               Unused suboption valid bits
SUBOPT_HEPP_CP1S  DS F                 cell pool 1 size
SUBOPT_HEPP_CP1P  DS F                 cell pool 1 percentage
SUBOPT_HEPP_CP2S  DS F                 cell pool 2 size
SUBOPT_HEPP_CP2P  DS F                 cell pool 2 percentage
SUBOPT_HEPP_CP3S  DS F                 cell pool 3 size
SUBOPT_HEPP_CP3P  DS F                 cell pool 3 percentage
SUBOPT_HEPP_CP4S  DS F                 cell pool 4 size
SUBOPT_HEPP_CP4P  DS F                 cell pool 4 percentage
SUBOPT_HEPP_CP5S  DS F                 cell pool 5 size
SUBOPT_HEPP_CP5P  DS F                 cell pool 5 percentage
SUBOPT_HEPP_CP6S  DS F                 cell pool 6 size
SUBOPT_HEPP_CP6P  DS F                 cell pool 6 percentage
SUBOPT_HEPP_CP7S  DS F                 cell pool 7 size
SUBOPT_HEPP_CP7P  DS F                 cell pool 7 percentage
SUBOPT_HEPP_CP8S  DS F                 cell pool 8 size
SUBOPT_HEPP_CP8P  DS F                 cell pool 8 percentage
SUBOPT_HEPP_CP9S  DS F                 cell pool 9 size
SUBOPT_HEPP_CP9P  DS F                 cell pool 9 percentage
SUBOPT_HEPP_CP10S DS F                 cell pool 10 size
SUBOPT_HEPP_CP10P DS F                 cell pool 10 percentage
SUBOPT_HEPP_CP11S DS F                 cell pool 11 size
SUBOPT_HEPP_CP11P DS F                 cell pool 11 percentage
SUBOPT_HEPP_CP12S DS F                 cell pool 12 size
SUBOPT_HEPP_CP12P DS F                 cell pool 12 percentage
SUBOPT_INFO       DSECT                Suboptions INFOMSGFILTER
SUBOPT_INFO_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_INFO_ID1   DS CL1               Single char environment ids
SUBOPT_INFO_ID2   DS CL1
SUBOPT_INFO_ID3   DS CL1
SUBOPT_INFO_ID4   DS CL1
SUBOPT_FILT       DSECT                Suboptions FILETAG
SUBOPT_FILT_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_FILT_FLG   DS AL1               FILETAG Flags
                  DS CL3               Unused
SUBOPT_HE64       DSECT                Suboptions HEAP
SUBOPT_HE64_FLAG  DS AL1               Suboption valid bits
                  DS AL3               Unused suboption valid bits
SUBOPT_HE64_INIT  DS FDL8              HEAP initial size
SUBOPT_HE64_INC   DS FDL8              HEAP increment size
SUBOPT_HE64_ALLOC DS AL1               128 = BELOW, 64 = FREE
                  DS AL3               Unused
SUBOPT_HE6431_INIT DS F                HEAP24 initial size
SUBOPT_HE6431_INC  DS F                 HEAP24 increment size
SUBOPT_HE6431_ALLOC DS AL1               128 = BELOW, 64 = FREE
                   DS AL3               Unused
SUBOPT_HE6424_INIT DS F                HEAP24 initial size
SUBOPT_HE6424_INC  DS F                 HEAP24 increment size
SUBOPT_HE6424_ALLOC DS AL1               128 = BELOW, 64 = FREE
                   DS AL3               Unused
SUBOPT_HEPP64     DSECT                Suboptions HEAPPOOLS
SUBOPT_HEPP64_FLG1  DS AL1               Suboption valid bits
SUBOPT_HEPP64_FLG2  DS AL1               Suboption valid bits
                  DS AL2               Unused suboption valid bits
SUBOPT_HEPP64_CP1S  DS F                 cell pool 1 size
SUBOPT_HEPP64_CP1P  DS F                 cell pool 1 percentage
SUBOPT_HEPP64_CP2S  DS F                 cell pool 2 size
SUBOPT_HEPP64_CP2P  DS F                 cell pool 2 percentage
SUBOPT_HEPP64_CP3S  DS F                 cell pool 3 size
SUBOPT_HEPP64_CP3P  DS F                 cell pool 3 percentage
SUBOPT_HEPP64_CP4S  DS F                 cell pool 4 size
SUBOPT_HEPP64_CP4P  DS F                 cell pool 4 percentage
SUBOPT_HEPP64_CP5S  DS F                 cell pool 5 size
SUBOPT_HEPP64_CP5P  DS F                 cell pool 5 percentage
SUBOPT_HEPP64_CP6S  DS F                 cell pool 6 size
SUBOPT_HEPP64_CP6P  DS F                 cell pool 6 percentage
SUBOPT_HEPP64_CP7S  DS F                 cell pool 7 size
SUBOPT_HEPP64_CP7P  DS F                 cell pool 7 percentage
SUBOPT_HEPP64_CP8S  DS F                 cell pool 8 size
SUBOPT_HEPP64_CP8P  DS F                 cell pool 8 percentage
SUBOPT_HEPP64_CP9S  DS F                 cell pool 9 size
SUBOPT_HEPP64_CP9P  DS F                 cell pool 9 percentage
SUBOPT_HEPP64_CP10S DS F                 cell pool 10 size
SUBOPT_HEPP64_CP10P DS F                 cell pool 10 percentage
SUBOPT_HEPP64_CP11S DS F                 cell pool 11 size
SUBOPT_HEPP64_CP11P DS F                 cell pool 11 percentage
SUBOPT_HEPP64_CP12S DS F                 cell pool 12 size
SUBOPT_HEPP64_CP12P DS F                 cell pool 12 percentage
SUBOPT_IOHE64       DSECT                Suboptions IOHEAP64
SUBOPT_IOHE64_FLAG  DS AL1               Suboption valid bits
SUBOPT_IOHE64_OPT   DS AL1               Suboption valid bits (part 2)
                    DS AL2               Unused suboption valid bits
SUBOPT_IOHE64_INIT  DS FDL8              IOHEAP64 initial size 64
SUBOPT_IOHE64_INC   DS FDL8              IOHEAP64 increment size 64
SUBOPT_IOHE64_ALLOC DS AL1               128 = BELOW, 64 = FREE
                    DS AL3               Unused
SUBOPT_IOHE6431_INIT DS F                IOHEAP64 initial size 31
SUBOPT_IOHE6431_INC  DS F                IOHEAP64 increment size 31
SUBOPT_IOHE6431_ALLOC DS AL1             128 = BELOW, 64 = FREE
                    DS AL3               Unused
SUBOPT_IOHE6424_INIT DS F                IOHEAP64 initial size 24
SUBOPT_IOHE6424_INC  DS F                IOHEAP64 increment size 24
SUBOPT_IOHE6424_ALLOC DS AL1             128 = BELOW, 64 = FREE
SUBOPT_LIHE64       DSECT                Suboptions LIBHEAP64
SUBOPT_LIHE64_FLAG  DS AL1               Suboption valid bits
SUBOPT_LIHE64_OPT   DS AL1               Suboption valid bits (part 2)
                    DS AL2               Unused suboption valid bits
SUBOPT_LIHE64_INIT  DS FDL8              LIBHEAP64 initial size 64
SUBOPT_LIHE64_INC   DS FDL8              LIBHEAP64 increment size 64
SUBOPT_LIHE64_ALLOC DS AL1               128 = BELOW, 64 = FREE
                    DS AL3               Unused
SUBOPT_LIHE6431_INIT DS F                LIBHEAP64 initial size 31
SUBOPT_LIHE6431_INC  DS F                LIBHEAP64 increment size 31
SUBOPT_LIHE6431_ALLOC DS AL1             128 = BELOW, 64 = FREE
                    DS AL3               Unused
SUBOPT_LIHE6424_INIT DS F                LIBHEAP64 initial size 24
SUBOPT_LIHE6424_INC  DS F                LIBHEAP64 increment size 24
SUBOPT_LIHE6424_ALLOC DS AL1             128 = BELOW, 64 = FREE
                    DS AL3               Unused
SUBOPT_STAC64       DSECT                Suboptions STACK64
SUBOPT_STAC64_FLAG  DS AL1               Suboption valid bits
                    DS AL3               Unused suboption valid bits
SUBOPT_STAC64_INIT  DS FDL8              STACK64 initial size
SUBOPT_STAC64_INC   DS FDL8              STACK64 increment size
SUBOPT_STAC64_MAX   DS FDL8              STACK64 maximum
SUBOPT_THRS64       DSECT                Suboptions THREADSTACK64
SUBOPT_THRS64_FLAG  DS AL1               Suboption valid bits
                    DS AL3               Unused suboption valid bits
SUBOPT_THRS64_INIT  DS FDL8              THREADSTACK64 initial size
SUBOPT_THRS64_INC   DS FDL8              THREADSTACK64 increment size
SUBOPT_THRS64_MAX   DS FDL8              THREADSTACK64 maximum
SUBOPT_DYNDMP       DSECT                Suboptions DYNDUMP      RS0806
SUBOPT_DYNDMP_FLAG  DS AL1               Suboption valid bits    RS0806
                    DS AL3               Unused suboption valid bits806
SUBOPT_DYNDMP_HLQP  DS A                 DYNDUMP HLQ-Option Ptr  RS0806
SUBOPT_DYNDMP_FLG1  DS X                 DYNDUMP FLAG 4039       RS0806
SUBOPT_DYNDMP_FLG2  DS X                 DYNDUMP FLAG 40xx       RS0806
SUBOPT_DYNDMP_HLQO  DSECT                DYNDUMP HLQ             RS0806
SUBOPT_DYNDMP_HLQL  DS H                 Length of DYNDUMP HLQ   RS0806
SUBOPT_DYNDMP_HLQS  DS CL26              String of DYNDUMP HLQ   RS0806
SUBOPT_CEEDMP       DSECT                Suboptions CEEDUMP      RS1007
SUBOPT_CEEDMP_FLAG  DS AL1               Suboption valid bits    RS1007
                    DS AL3               Unused suboption valid bits007
SUBOPT_CEEDMP_PAGL  DS F                 CEEDUMP Pagelength      RS1007
SUBOPT_CEEDMP_SYSO  DS CL4               CEEDUMP Sysout-Fname    RS1007
SUBOPT_CEEDMP_SYSC  DS CL1               CEEDUMP Sysout-Class    RS1007
SUBOPT_CEEDMP_FREE  DS X                 CEEDUMP 0=FREE=END      RS1007
SUBOPT_CEEDMP_SPIN  DS X                 CEEDUMP 0=SPIN=UNALLOC  RS1007
                    DS X                 CEEDUMP padding         RS1007
         END
